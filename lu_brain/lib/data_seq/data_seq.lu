/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// Create and destroy

	Lu_Data_Seq lu_data_seq__create(Lu_Mem mem, lu_size wave_id, lu_size recs_size)
	{
		lu__assert(mem);
		lu__assert(recs_size);

		Lu_Data_Seq self 					= (Lu_Data_Seq) lu_mem__alloc(mem, sizeof(struct lu_data_seq));

		// Initialize
		self->mem 						= mem;
		self->wave_id					= wave_id;
		self->recs_size 				= recs_size;
		self->blocks 					= lu_list__create(self->mem);
		self->blocks_count 				= 0; 
		self->start_block_on_next_data 	= false;  

		self->current_read_pos 			= NULL;
		
		return self;
	}

	void lu_seq_destroy_blocks(Lu_List blocks, lu_p_void value, lu_p_void p1)
	{
		lu__assert(blocks);
		lu__assert(value);
		lu_data_block__destroy((Lu_Data_Block) value);
	}

	void lu_data_seq__destroy(Lu_Data_Seq self)
	{
		lu__user_assert_void(self, "Lu_Data_Seq is NULL");

		lu_list__each_1p(self->blocks, lu_seq_destroy_blocks, NULL);
		lu_list__destroy(self->blocks);
		lu_mem__free(self->mem, (lu_p_byte) self);
	}

///////////////////////////////////////////////////////////////////////////////
// Seq Block 

	void lu_data_seq__block_begin(Lu_Data_Seq seq)
	{
		lu__user_assert_void(seq, "Lu_Data_Seq is NULL");
		//lu__debug("\nlu_block_begin");
		seq->start_block_on_next_data = true;
	}

	void lu_data_seq__block_end(Lu_Data_Seq seq)
	{
		lu__user_assert_void(seq, "Lu_Data_Seq is NULL");
		//lu__debug("\nlu_block_end");
		seq->start_block_on_next_data = true;
	}


///////////////////////////////////////////////////////////////////////////////
// 

	Lu_Data lu_data_seq__data_get(Lu_Data_Seq self, lu_size rec_i, Lu_L_Node node)
	{
		lu__assert(self);

		if (node == NULL) return NULL;

		lu__assert(node->value);

		Lu_Data_Block block = (Lu_Data_Block) node->value;

		lu__assert(rec_i < block->datum_size);

		return &block->datum[rec_i]; 
	}

	lu_size lu_data_seq__blocks_count(Lu_Data_Seq self)
	{ 
		lu__assert(self);
		return lu_list__count(self->blocks);
	}

	lu_p_value lu_data_seq__get_last_values(Lu_Data_Seq self, lu_size rec_i)
	{
		lu__user_assert(self, "Lu_Data_Seq is NULL");
		Lu_Data data = lu_data_seq__data_get(self, rec_i, lu_list__last_node(self->blocks));
		if (data == NULL) return NULL;

		return data->values;
	}

	Lu_Data lu_data_seq__get_last_data(Lu_Data_Seq self, lu_size rec_i)
	{
		lu__user_assert(self, "Lu_Data_Seq is NULL");
		return lu_data_seq__data_get(self, rec_i, lu_list__last_node(self->blocks));
	}

	static Lu_Data_Block lu_data_seq__block_add(Lu_Data_Seq self)
	{
		lu__assert(self);
		lu__assert(self->blocks);

		// lu__debug("\n LIST_COUNT: %d", lu_list__count(self->blocks));
		Lu_Data_Block block = lu_data_block__create(self->mem, self->recs_size, self->blocks_count);
		lu__assert(block);

		++self->blocks_count;

		lu_list__append(self->blocks, (lu_p_void) block);

		return block;
	}

	void lu_data_seq__reset(Lu_Data_Seq self)
	{
		lu__user_assert_void(self, "Lu_Data_Seq should be present");
		lu__user_assert_void(self->blocks, "Lu_Data_Seq blocks should be present");

		lu_list__each_1p(self->blocks, lu_seq_destroy_blocks, NULL);
		lu_list__clear(self->blocks); 

		self->start_block_on_next_data = false;
	}

	void lu_data_seq__push(
		Lu_Data_Seq self, 
		Lu_Rec rec, 
		lu_value* values, 
		lu_size width, 
		lu_size height, 
		lu_size depth,
		struct lu_rec_view view
	)
	{ 
		lu__user_assert_void(self, "Lu_Data_Seq should not be NULL"); 
		lu__user_assert_void(rec, "Lu_Rec should not be NULL"); 
		lu__user_assert_void(values, "values should not be NULL");
		lu__user_assert_void(rec->depth, "Lu_Rec depth is zero"); 
		lu__user_assert_void(width > 0, "width should be greater than zero");
		lu__user_assert_void(height > 0, "height should be greater than zero");
		lu__user_assert_void(depth > 0, "depth should be greater than zero");

	 	if (self->start_block_on_next_data)
		{ 
			// yaksho my na nuliu, to ce itak pochatok bloka
			lu_data_seq__block_add(self);
			
			self->start_block_on_next_data = false;
		}

		if (lu_list__is_blank(self->blocks))
			lu_data_seq__block_add(self);

		Lu_Data data = lu_data_seq__data_get(self, rec->id, lu_list__last_node(self->blocks));
		lu_p_value v = data->values;
		if (v)
			// new input to the same rec and channel advances seq
			lu_data_seq__block_add(self);

		data = lu_data_seq__data_get(self, rec->id, lu_list__last_node(self->blocks));
		lu__assert(data);
		lu__assert(data->values == NULL);

		lu__debug("\n>>>>>wave_id=%ld, BLOCK_ix= %ld, rec_id = %ld \n", self->wave_id, data->block_ix, rec->id);

	 	lu_data__set(data, self->wave_id, data->block_ix, rec->id, width, height, depth, values, view, data->flags);
	}

	static lu_bool lu_seq_blocks_non_empty_values_block(lu_p_void value, lu_p_void p1)
	{
		if (value == NULL) return false;
		lu__assert(p1);

		lu_size* p_rec_i = (lu_size*) p1;

		Lu_Data_Block block = (Lu_Data_Block) value;

		lu__assert(*p_rec_i < block->datum_size);

		Lu_Data data = &block->datum[*p_rec_i];

		return data->values != NULL;
	}

	static Lu_Data lu_seq_first_non_null_data(Lu_Data_Seq self, lu_size rec_i)
	{
		lu__user_assert(self, "Lu_Data_Seq is NULL");

		Lu_Data_Block block = (Lu_Data_Block) lu_list__find_forward_1p(self->blocks, lu_seq_blocks_non_empty_values_block, &rec_i);

		if (block == NULL) return NULL;

		lu__assert(rec_i < block->datum_size);

		return &block->datum[rec_i];
	}

	Lu_Data_Seq lu_data_seq__validate(Lu_Data_Seq self)
	{
		lu__user_assert(lu_data_seq__blocks_count(self), "Seq is empty");

		return self;
	}

	//
	// We don't need this actually, we can move this out of scope. 
	// W_Rec/Wave should have reset() to clear last data.
	//
	Lu_Data_Seq lu_data_seq__prepare(Lu_Data_Seq self)
	{
		lu__user_assert(self, "Lu_Data_Seq is NULL");
		lu__assert(self->blocks);

		lu_size rec_i;
		Lu_Data d1;
		Lu_Data d2;

		lu_size recs_size =self->recs_size;

		for(rec_i = 0; rec_i < recs_size; rec_i++)
		{
			Lu_L_Node curr = lu_list__first_node(self->blocks);

			while(curr)
			{
				d1 = lu_data_seq__data_get(self, rec_i, curr);
				lu__assert(d1);

				//lu__debug("\n FILL GAPS (rec_i=%d, block_i=%d)", rec_i, block_i);

				if (d1->values) goto end;
				
				if (curr == lu_list__first_node(self->blocks))
				{
					d2 = lu_seq_first_non_null_data(self, rec_i);
					if (d2 == NULL) break; 	// nema danyh dlia rec_i vzahali
					lu_data__shallow_copy(d1, d2);
				}
				else
				{
					d2 = lu_data_seq__data_get(self, rec_i, lu_l_node__prev(curr));
					lu_data__shallow_copy(d1, d2);
				}

				end:
				curr = lu_l_node__next(curr);
			}
		}

		return self;
	}

///////////////////////////////////////////////////////////////////////////////
// Seq reading

	static Lu_Data_Block lu_data_seq__next_block_get(Lu_Data_Seq self)
	{
		lu__assert(self);
		lu__assert(self->blocks);

		// when first element
		if (self->current_read_pos == NULL) 
		{
			self->current_read_pos = lu_list__first_node(self->blocks);
			if (self->current_read_pos == NULL) return NULL;

			Lu_Data_Block block = (Lu_Data_Block) lu_l_node__value(self->current_read_pos);

			//
			// Because we started new iterator through data seq, mark this block 
			// to reset rec w states
			// 

			block->flags |= LU_DATA_BLOCK_FLAGS__RESET_RECS;

			return block;
		}

		if (self->current_read_pos)
		{
			self->current_read_pos = lu_l_node__next(self->current_read_pos);

			if (self->current_read_pos == NULL) return NULL;

			return (Lu_Data_Block) lu_l_node__value(self->current_read_pos);
		}

		return NULL;
	} 
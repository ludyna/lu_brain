/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/
 
///////////////////////////////////////////////////////////////////////////////
// Lu_Config predefined 

	struct lu_config lu_g_bc_predefined[LU_BRAIN_CONFIG_END] = {
		{
			// LU_BC_DEFAULT

			//
			// Brain level
			//
			.b_mem = NULL,					
			.b_id = 0, 						
			.b_recs_size = 16,				
			.b_max_seq_size_in_blocks = 16,

			//
			// Structure level
			//
			.s_mem = NULL, 
			.s_frames_size = 256, 				
			.s_apexes_size = 256,		

			//
			// Network level
			//
			.n_mem = NULL,		
			.n_names_size = 128,  			
			.n_size_in_cell_0 = 10000,
			.n_size_in_cell_1 = 10000,
			.n_size_in_cell_2 = 10000,
			.n_size_in_cell_3 = 10000,
			.n_size_in_cell_4 = 10000,
			.n_table_mod = 2, 

			//
			// Waves level
			//
			.w_mem = NULL						
		},
	};		

	struct lu_config lu_config__get_by_id(lu_size id)
	{
		lu__assert(id < LU_BRAIN_CONFIG_END);

		return lu_g_bc_predefined[id];
	}

///////////////////////////////////////////////////////////////////////////////
// Lu_Config


	Lu_Config lu_config__validate(Lu_Config config)
	{
		//
		// Brain level
		//

		lu__user_assert(config->b_mem, "b_mem is NULL");
		lu__user_assert(config->b_recs_size > 0, "recs_size should be greater than 0");

		//
		// Structure level
		//

		lu__user_assert(config->s_mem, "s_mem is NULL");

		//
		// Network level
		//

		lu__user_assert(config->n_mem, "n_mem is NULL");

		lu__user_assert(config->n_names_size > 0, "net.names_size should be greater than 0");
		lu__user_assert(config->n_size_in_cell_0 > 0, "net.size_in_cell_0 should be greater than 0");
		lu__user_assert(config->n_size_in_cell_1 > 0, "net.size_in_cell_1 should be greater than 0");
		lu__user_assert(config->n_size_in_cell_2 > 0, "net.size_in_cell_2 should be greater than 0");
		lu__user_assert(config->n_size_in_cell_3 > 0, "net.size_in_cell_3 should be greater than 0");
		lu__user_assert(config->n_size_in_cell_4 > 0, "net.size_in_cell_4 should be greater than 0");
		lu__user_assert(config->n_table_mod > 1, "net.n_table_mod should be greater than 1");

		//
		// Waves level
		//

		lu__user_assert(config->w_mem, "w_mem is NULL");

		return config;
	}
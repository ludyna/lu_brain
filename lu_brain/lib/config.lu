/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/
 
///////////////////////////////////////////////////////////////////////////////
// Lu_Config predefined 

	struct lu_config lu_g_bc_predefined[LU_CONFIG__END] = {
		{
			// LU_CONFIG__DEFAULT

			//
			// Brain level
			//
			.b_mem = NULL,					
			.b_id = 0, 						
			.b_recs_size = 3,				
			.b_max_seq_size_in_blocks = 16,

			//
			// Space level
			//
			.s_mem = NULL, 			
			.s_apexes_size = 256,
			.s_areas_size = 16,		

			//
			// Network level
			//
			.n_mem = NULL,		
			.n_column_w = 5, 
			.n_column_h = 64,
			.n_column_d = 3,
			.n_link_mem_size = 64 * 3 * 2,

			//
			// Waves level
			//
			.w_mem = NULL,	
			.w_save_waves_size = 2,
			.w_match_waves_size = 1,
			.w_restore_waves_size = 1,
			.w_processor_queue_size = 1024,
			.w_result_labels_size = 3,
			.w_match_cells_size_per_wave = 1024,

			//
			// Labels
			//			

			.la_mem = NULL,
			.la_labels_size = 128,		
			.la_link_mem_size = 1024
		},
		{
			// LU_CONFIG__SEMEION

			//
			// Brain level
			//
			.b_mem = NULL,					
			.b_id = 0, 						
			.b_recs_size = 1,				
			.b_max_seq_size_in_blocks = 1,

			//
			// Space level
			//
			.s_mem = NULL, 			
			.s_apexes_size = 256,
			.s_areas_size = 16,		

			//
			// Network level
			//
			.n_mem = NULL,		
			.n_column_w = 5, 
			.n_column_h = 1000,
			.n_column_d = 10,
			.n_link_mem_size = 5000,

			//
			// Waves level
			//
			.w_mem = NULL,	
			.w_save_waves_size = 1,
			.w_match_waves_size = 1,
			.w_restore_waves_size = 1,
			.w_processor_queue_size = 512,
			.w_result_labels_size = 3,
			.w_match_cells_size_per_wave = 10000,

			//
			// Labels
			//			

			.la_mem = NULL,
			.la_labels_size = 11,		
			.la_link_mem_size = 1024
			},
	};		

	struct lu_config lu_config__get_by_id(lu_size id)
	{
		lu__assert(id < LU_CONFIG__END);

		return lu_g_bc_predefined[id];
	}

///////////////////////////////////////////////////////////////////////////////
// Lu_Config


	/*
		If user havent set some values, set them to default values (before validation).
	*/
	static void lu_config__set_defaults(Lu_Config self)
	{
		lu__assert(self);
		lu__assert(lu_g_mem);

		if (self->b_mem == NULL)
		{
			self->b_mem = lu_g_mem;
		}

		if (self->s_mem == NULL)
		{
			self->s_mem = lu_g_mem;
		}

		if (self->n_mem == NULL)
		{
			self->n_mem = lu_g_mem;
		}

		if (self->w_mem == NULL)
		{
			self->w_mem = lu_g_mem;
		}

		if (self->la_mem == NULL)
		{
			self->la_mem = lu_g_mem;
		}
	}

	
	Lu_Config lu_config__validate(Lu_Config self)
	{
		//
		// Brain level
		//

		lu__user_assert(self->b_mem, "b_mem is NULL");
		lu__user_assert(self->b_recs_size > 0, "recs_size should be greater than 0");

		//
		// Structure level
		//

		lu__user_assert(self->s_mem, "s_mem is NULL");
		lu__user_assert(self->s_areas_size > LU_N_AREA__SPECIAL_AREA_SKIP, "s_areas_size should be greater than LU_N_AREA__SPECIAL_AREA_SKIP");

		//
		// Network level
		//

		lu__user_assert(self->n_mem, "n_mem is NULL");
		lu__user_assert(self->n_column_w > 4, "n_column_size should be greater than 4");
		lu__user_assert(self->n_column_h > 9, "n_column_size should be greater than 9");
		lu__user_assert(self->n_column_d > 2, "n_column_size should be greater than 2");
		lu__user_assert(self->n_link_mem_size > 16, "n_column_size should be greater than 16");

		//
		// Waves level
		//

		lu__user_assert(self->w_mem, "w_mem is NULL");
		lu__user_assert(self->w_save_waves_size > 0, "w_save_waves_size should be greater than 0");
		lu__user_assert(self->w_match_waves_size > 0, "w_save_waves_size should be greater than 0");
		lu__user_assert(self->w_restore_waves_size > 0, "w_save_waves_size should be greater than 0");
		lu__user_assert(self->w_match_cells_size_per_wave > 1, "w_match_cells_size_per_wave should be greater than 1");

		//
		// Labels
		//

		lu__user_assert(self->la_labels_size > 0, "la_labels_size should be greater than 0");
		lu__user_assert(self->la_link_mem_size > self->la_labels_size, "la_link_mem_size should be greater than la_labels_size");

		return self;
	}


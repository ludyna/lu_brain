/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// 

	static Lu_S_Map lu_s_map__create_story_fractal_and_map(Lu_Mem mem)
	{
		return NULL;
	}

	static Lu_S_Map lu_s_map__create_frame_fractal_and_map(Lu_Mem mem, Lu_Rec rec)
	{
		return NULL;
	}

	static void lu_s_map__destroy(Lu_S_Map self)
	{

	}

///////////////////////////////////////////////////////////////////////////////
// 

	static Lu_S_Layer_Base lu_s_map__get_base(Lu_S_Map self) 
	{
		lu__assert(self);
		lu__assert(self->bases);

		Lu_Slot_Base slot = lu_arr__get(self->bases, 0);
		lu__assert(slot);
		lu__assert(slot->type == LU_ST_ONE);
		Lu_Slot_One one = (Lu_Slot_One) slot;

		return (Lu_S_Layer_Base) one->item;
	}

	static Lu_S_Layer_Base lu_s_map__get_apex(Lu_S_Map self)
	{
		lu__assert(self);
		lu__assert(self->bases);

		Lu_Slot_Base slot = lu_arr__get(self->bases, 0);
		lu__assert(slot);
		lu__assert(slot->type == LU_ST_ONE);
		Lu_Slot_One one = (Lu_Slot_One) slot;

		return (Lu_S_Layer_Base) one->item;
	}

	static Lu_S_Frame_Layer lu_s_map__get_frame(Lu_S_Map self)
	{
				lu__assert(self);
		lu__assert(self->bases);

		Lu_Slot_Base slot = lu_arr__get(self->bases, 0);
		lu__assert(slot);
		lu__assert(slot->type == LU_ST_ONE);
		Lu_Slot_One one = (Lu_Slot_One) slot;

		return (Lu_S_Frame_Layer) one->item;
	}

///////////////////////////////////////////////////////////////////////////////
// 

	static void lu_s_map__connect(Lu_S_Map p, Lu_S_Map c)
	{

	}
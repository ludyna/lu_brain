/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// Story


	static Lu_S_Map lu_s_map__create_story_map(Lu_Mem mem, lu_size recs_count)
	{
		lu__assert(mem);
		lu__assert(recs_count > 0);

		Lu_S_Map self = (Lu_S_Map) lu_mem__alloc(mem, sizeof(struct lu_s_map));
		lu__assert(self);

		self->mem = mem;

		self->apexes = lu_arr__create(mem, 5, true);
		lu__assert(self->apexes);

		self->bases = lu_arr__create(mem, 5, true);
		lu__assert(self->bases);

		self->p = NULL;

		self->c = (Lu_Slot_Base) lu_slot_arr__create(mem, recs_count, true);
		lu__assert(self->c);

		return self;
	} 

	static void lu_s_map__make_story_fractal(Lu_S_Map self)
	{
		lu__assert(self);

		Lu_Mem mem = self->mem;
		lu__assert(mem);

		Lu_S_Layer story = lu_s_layer__create(mem, 4, 1);
		Lu_S_Layer scene = lu_s_layer__create(mem, 3, 1);
		Lu_S_Layer event = lu_s_layer__create(mem, 2, 1);
		Lu_S_Layer seq = lu_s_layer__create(mem, 1, 1);
		Lu_S_Layer recs = lu_s_layer__create(mem, 0, 1);

		lu__assert(story);
		lu__assert(scene);
		lu__assert(event);
		lu__assert(seq);
		lu__assert(recs);

		lu_s_layer_base__connect((Lu_S_Layer_Base) story, (Lu_S_Layer_Base) scene);
		lu_s_layer_base__connect((Lu_S_Layer_Base) scene, (Lu_S_Layer_Base) event);
		lu_s_layer_base__connect((Lu_S_Layer_Base) event, (Lu_S_Layer_Base) seq);
		lu_s_layer_base__connect((Lu_S_Layer_Base) seq, (Lu_S_Layer_Base) recs);

		lu_arr__set(self->bases, 0, (lu_p_void) lu_slot_one__create(mem, recs) );
		lu_arr__set(self->bases, 1, (lu_p_void) lu_slot_one__create(mem, seq) );
		lu_arr__set(self->bases, 2, (lu_p_void) lu_slot_one__create(mem, event) );
		lu_arr__set(self->bases, 3, (lu_p_void) lu_slot_one__create(mem, scene) );
		lu_arr__set(self->bases, 4, (lu_p_void) lu_slot_one__create(mem, story) );

		lu_arr__set(self->apexes, 0, (lu_p_void) lu_slot_one__create(mem, recs) );
		lu_arr__set(self->apexes, 1, (lu_p_void) lu_slot_one__create(mem, seq) );
		lu_arr__set(self->apexes, 2, (lu_p_void) lu_slot_one__create(mem, event) );
		lu_arr__set(self->apexes, 3, (lu_p_void) lu_slot_one__create(mem, scene) );
		lu_arr__set(self->apexes, 4, (lu_p_void) lu_slot_one__create(mem, story) );
	}

	static void lu_s_map__unmake_story_fractal(Lu_S_Map self)
	{
		lu__assert(self);
		lu__assert(self->apexes);
		lu__assert(self->mem);

		Lu_S_Layer_Base apex = (Lu_S_Layer_Base) lu_arr__last(self->apexes);
		lu__assert(apex);

		apex->destroy(apex, self->mem);
	}

///////////////////////////////////////////////////////////////////////////////
// Frame

	static Lu_S_Map lu_s_map__create_frame_map(Lu_Mem mem, Lu_Rec rec, Lu_S_Map p)
	{
		lu__assert(mem);
		lu__assert(rec);
		lu__assert(p);

		Lu_S_Map self = (Lu_S_Map) lu_mem__alloc(mem, sizeof(struct lu_s_map));
		lu__assert(self);

		self->mem = mem;

		self->apexes = lu_arr__create(mem, 5, true);
		lu__assert(self->apexes);

		self->bases = lu_arr__create(mem, 5, true);
		lu__assert(self->bases);

		self->p = p;
		self->c = NULL;

		return self;
	}

	static void lu_s_map__destroy_frame_map(Lu_S_Map self)
	{

	}

	static void lu_s_map__make_frame_fractal(Lu_S_Map self)
	{

	}

	static void lu_s_map__unmake_frame_fractal(Lu_S_Map self)
	{

	}

///////////////////////////////////////////////////////////////////////////////
// Map
	
	static void lu_s_map__destroy(Lu_S_Map self)
	{
		lu__assert(self);
		lu__assert(self->p == NULL);
		lu__assert(self->c);
		lu__assert(self->mem);

		lu_size i;
		Lu_S_Layer_Base layer_base;

		// destroy bases slots
		for (i = 0; i < lu_arr__count(self->bases); i++)
		{
			layer_base = (Lu_S_Layer_Base) lu_arr__get(self->bases, i);
			lu__assert(layer_base);

			layer_base->destroy(layer_base, self->mem);
		}

		// destroy apexes slots
		for (i = 0; i < lu_arr__count(self->apexes); i++)
		{
			layer_base = (Lu_S_Layer_Base) lu_arr__get(self->apexes, i);
			lu__assert(layer_base);

			layer_base->destroy(layer_base, self->mem);
		}

		self->p = NULL;

		if (self->c)
		{
			lu_slot_arr__destroy((Lu_Slot_Base) self->c, self->mem);
			self->c = NULL;
		}

		lu_arr__destroy(self->bases);
		self->bases = NULL;

		lu_arr__destroy(self->apexes);
		self->apexes = NULL;

		lu_mem__free(self->mem, (lu_p_byte) self);
	}

	static Lu_S_Layer_Base lu_s_map__get_base(Lu_S_Map self) 
	{
		lu__assert(self);
		lu__assert(self->bases);

		Lu_Slot_Base slot = lu_arr__get(self->bases, 0);
		lu__assert(slot);
		lu__assert(slot->type == LU_ST_ONE);
		Lu_Slot_One one = (Lu_Slot_One) slot;

		return (Lu_S_Layer_Base) one->item;
	}

	static Lu_S_Layer_Base lu_s_map__get_apex(Lu_S_Map self)
	{
		lu__assert(self);
		lu__assert(self->bases);

		Lu_Slot_Base slot = lu_arr__get(self->bases, 0);
		lu__assert(slot);
		lu__assert(slot->type == LU_ST_ONE);
		Lu_Slot_One one = (Lu_Slot_One) slot;

		return (Lu_S_Layer_Base) one->item;
	}

	static Lu_S_Frame_Layer lu_s_map__get_frame(Lu_S_Map self)
	{
				lu__assert(self);
		lu__assert(self->bases);

		Lu_Slot_Base slot = lu_arr__get(self->bases, 0);
		lu__assert(slot);
		lu__assert(slot->type == LU_ST_ONE);
		Lu_Slot_One one = (Lu_Slot_One) slot;

		return (Lu_S_Frame_Layer) one->item;
	}

///////////////////////////////////////////////////////////////////////////////
// 

	static void lu_s_map__connect(Lu_S_Map p, Lu_S_Map c)
	{

	}
/**
	Copyright Â© 2021 Oleh Ihorovych Novosad 
*/

	static Lu_S_Cell lu_s_cell_init(Lu_S_Cell self, enum lu_s_cell_type type, Lu_S_Layer layer, lu_size l_ix)
	{
		lu_user_assert(layer, "Lu_S_Layer is NULL");

		self->type 			= type;

		self->layer 		= layer;
		//self->l_ix 			= l_ix;

		self->b 			= NULL;
		self->d 			= NULL;
 
		return self;
	}

	static void lu_s_cell_deinit(Lu_S_Cell self)
	{
		lu_user_assert_void(self, "Lu_S_Cell is NULL");

	}

	static Lu_S_Cell_2 lu_s_cell_2_init(Lu_S_Cell_2 self, enum lu_s_cell_type type, Lu_S_Layer layer, lu_size l_ix, lu_size x, lu_size y)
	{
		lu_s_cell_init((Lu_S_Cell) self, type, layer, l_ix);

		self->x = x;
		self->y = y;

		return self;
	}

	static void lu_s_cell_2_deinit(Lu_S_Cell_2 self)
	{
		lu_user_assert_void(self, "Lu_S_Cell_2 is NULL");
		
	}

	static Lu_S_Cell_3 lu_s_cell_3_init(Lu_S_Cell_3 self, Lu_S_Layer layer, lu_size l_ix, lu_size x, lu_size y, lu_size z)
	{
		lu_user_assert(layer, "Lu_S_Layer is NULL");
		lu_user_assert(layer->rec, "Lu_S_Rec_Layer is NULL");

		lu_s_cell_2_init((Lu_S_Cell_2) self, LU_SCT_CELL_3, layer, l_ix, x, y);

		// zbudzheni neyrony ce v wave
		Lu_S_Rec_Layer rec 			= layer->rec;

		self->z 			= z;
		self->v 			= lu_s_cell_values_create(lu_g_mem, &rec->v_conf);
		self->p 			= lu_s_cell_values_create(lu_g_mem, &rec->p_conf);

		return self;
	}

	static void lu_s_cell_3_deinit(Lu_S_Cell_3 self)
	{
		lu_user_assert_void(self, "S_Cell3 is NULL");

		if (self->v)
			lu_s_cell_values_destroy(self->v, lu_g_mem);
	
		if (self->p)
			lu_s_cell_values_destroy(self->p, lu_g_mem);
	}

	static Lu_S_Cell s_component_links_alloc(Lu_S_Cell self, Lu_S_Rec_Layer rec)
	{
		lu_user_assert(self->type == LU_SCT_CELL_3, "Wrong self type");

		self->d = (Lu_S_Cell*) lu_g_mem_alloc(sizeof(Lu_S_Cell));
		lu_user_assert(self->d, "Cannot allocate self->d");

		return self;
	}


	static Lu_S_Cell s_pixel_links_alloc(Lu_S_Cell self, Lu_S_Rec_Layer rec)
	{
		lu_user_assert(self->type == LU_SCT_CELL_2, "Wrong self type");
		
		self->b = (Lu_S_Cell*) lu_g_mem_alloc(sizeof(Lu_S_Cell) * rec->cells_d);
		lu_user_assert(self->b, "Cannot allocate self->b");

		self->d = (Lu_S_Cell*) lu_g_mem_alloc(sizeof(Lu_S_Cell) * 4);
		lu_user_assert(self->d, "Cannot allocate self->d");

		return self;
	}

	static Lu_S_Cell s_pyra_links_alloc(Lu_S_Cell self, Lu_S_Rec_Layer rec)
	{
		lu_user_assert(self->type == LU_SCT_CELL_2, "Wrong self type");

		self->b = (Lu_S_Cell*) lu_g_mem_alloc(sizeof(Lu_S_Cell) * 4);
		lu_user_assert(self->b, "Cannot allocate self->b");

		self->d = (Lu_S_Cell*) lu_g_mem_alloc(sizeof(Lu_S_Cell) * 4);
		lu_user_assert(self->d, "Cannot allocate self->d");

		return self;
	}

	static Lu_S_Cell s_block_links_alloc(Lu_S_Cell self, Lu_S_Rec_Layer rec)
	{
		lu_user_assert(self->type == LU_SCT_CELL, "Wrong self type");

		self->b = (Lu_S_Cell*) lu_g_mem_alloc(sizeof(Lu_S_Cell));
		lu_user_assert(self->b, "Cannot allocate self->b");

		self->d = (Lu_S_Cell*) lu_g_mem_alloc(sizeof(Lu_S_Cell));
		lu_user_assert(self->d, "Cannot allocate self->d");

		return self;
	}

	static void lu_s_cell_links_free(Lu_S_Cell self)
	{
		lu_user_assert_void(self, "Lu_S_Cell is NULL");

		if (self->b)
		{
			lu_g_mem_free((lu_p_byte) self->b);
			self->b = NULL;
		}

		if (self->d)
		{
			lu_g_mem_free((lu_p_byte) self->d);
			self->d = NULL;
		}
	}
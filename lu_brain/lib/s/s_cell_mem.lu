/**
	Copyright Â© 2021 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// 

	static Lu_S_Cell_Mem lu_s_cell_mem__create(Lu_Mem mem)
	{
		Lu_S_Cell_Mem self = (Lu_S_Cell_Mem) lu_mem__alloc(mem, sizeof(struct lu_s_cell_mem));
		lu__assert(self);

		self->mem = mem;

		//
		// size
		//

		self->component_cells_size 	= 0;
		self->pixel_cells_size 		= 0;
		self->rec_cells_size 		= 0;
		self->seq_nx_cells_size 	= 0;
		self->seq_cells_size 		= 0;
		self->story_nx_cells_size 	= 0;

		//
		// count
		//

		self->component_cells_count = 0;
		self->pixel_cells_count 	= 0;
		self->rec_cells_count 		= 0;
		self->seq_nx_cells_count 	= 0;
		self->seq_cells_count 		= 0;
		self->story_nx_cells_count 	= 0;

		// 
		// arrays
		//

		self->component_cells 	= NULL;
		self->pixel_cells 		= NULL;
		self->rec_cells 		= NULL;
		self->seq_nx_cells 		= NULL;
		self->seq_cells			= NULL;
		self->story_nx_cells 	= NULL;


		return self;
	}

	static void lu_s_cell_mem__destroy(Lu_S_Cell_Mem self)
	{
		lu__assert(self);

		if (self->component_cells)
			lu_mem__free(self->mem, (lu_p_byte) self->component_cells);

		if (self->pixel_cells)
			lu_mem__free(self->mem, (lu_p_byte) self->pixel_cells);

		if (self->rec_cells)
			lu_mem__free(self->mem, (lu_p_byte) self->rec_cells);

		if (self->seq_nx_cells)
			lu_mem__free(self->mem, (lu_p_byte) self->seq_nx_cells);

		if (self->seq_cells)
			lu_mem__free(self->mem, (lu_p_byte) self->seq_cells);

		if (self->story_nx_cells)
			lu_mem__free(self->mem, (lu_p_byte) self->story_nx_cells);

		lu_mem__free(self->mem, (lu_p_byte) self);
	}

///////////////////////////////////////////////////////////////////////////////
// Allocate cells

	static void lu_s_cell_mem__alloc_cells(Lu_S_Cell_Mem self, struct lu_s_cell_mem_config config)
	{
		lu__assert(self); 
		
		// if (self->cells_1_size > 0)
		// {
		// 	self->cells_1 = (struct lu_s_cell_1*) lu_g_mem_alloc(sizeof(struct lu_s_cell_1) * self->cells_1_size);
		// 	lu__assert(self->cells_1); 
		// }
 	
 	// 	if (self->cells_2_size > 0)
 	// 	{
		// 	self->cells_2 = (struct lu_s_cell_2*) lu_g_mem_alloc(sizeof(struct lu_s_cell_2) * self->cells_2_size);
		// 	lu__assert(self->cells_2); 
		// }

		// if (self->cells_3_size > 0)
		// {
		// 	self->cells_3 = (struct lu_s_cell_3*) lu_g_mem_alloc(sizeof(struct lu_s_cell_3) * self->cells_3_size);
		// 	lu__assert(self->cells_3); 
		// }
	}

///////////////////////////////////////////////////////////////////////////////
// Cells Assign And Retract


	// static Lu_S_Cell_3 lu_s_cell_mem_component_cell_assign(
	// 	Lu_S_Cell_Mem self, 
	// 	Lu_S_Layer layer, 
	// 	lu_size x, 
	// 	lu_size y, 
	// 	lu_size z,
	// 	Lu_S_Layer_Conf v_conf, 
	// 	Lu_S_Layer_Conf p_conf
	// )
	// {
	// 	lu_user_assert(self->component_cells_count < self->component_cells_size, "Out of space for Lu_S_Comp_Cell");

	// 	Lu_S_Cell_3 neu = &self->component_cells[self->component_cells_count];
	// 	neu = lu_s_cell_3_init(neu, layer, layer->cells_count, x, y, z, v_conf, p_conf);
	// 	lu_user_assert(neu, "Cannot init Lu_S_Cell_3");

	// 	lu_s_layer_cell_set(layer, x, y, z, (Lu_S_Cell_1) neu);

	// 	// no need for lock, they are created once in one thread
	// 	++layer->cells_count;
	// 	++self->cells_3_count;

	// 	return neu;
	// }


	// static Lu_S_Cell_1 lu_s_cell_mem_cell_1_assign(Lu_S_Cell_Mem self, Lu_S_Layer layer)
	// {
	// 	lu_user_assert(self->cells_1_count < self->cells_1_size, "Out of space for Lu_S_Cell_1");

	// 	Lu_S_Cell_1 neu = &self->cells_1[self->cells_1_count];
	// 	neu = lu_s_cell_1_init(neu, LU_SCT_CELL, layer, layer->cells_count);
	// 	lu_user_assert(neu, "Cannot init Lu_S_Cell_1");

	// 	lu_s_layer_cell_set(layer, 0, 0, 0, neu);

	// 	// no need for lock, they are created once in one thread
	// 	++layer->cells_count;
	// 	++self->cells_1_count;

	// 	return neu;
	// }  

	// static void lu_s_cell_mem_cell_1_retract(Lu_S_Cell_Mem self, Lu_S_Cell_1 cell)
	// {
	// 	lu_s_cell_1_deinit(cell);
	// }

	// static Lu_S_Cell_2 lu_s_cell_mem_cell_2_assign(Lu_S_Cell_Mem self, Lu_S_Layer layer, lu_size x, lu_size y)
	// {
	// 	lu_user_assert(self->cells_2_count < self->cells_2_size, "Out of space for Lu_S_Cell_2");

	// 	Lu_S_Cell_2 neu = &self->cells_2[self->cells_2_count];
	// 	neu = lu_s_cell_2_init(neu, LU_SCT_CELL_2, layer, layer->cells_count, x, y);
	// 	lu_user_assert(neu, "Cannot init Lu_S_Cell_2");

	// 	lu_s_layer_cell_set(layer, x, y, 0, (Lu_S_Cell_1) neu);

	// 	// no need for lock, they are created once in one thread
	// 	++layer->cells_count;
	// 	++self->cells_2_count;

	// 	return neu;
	// }

	// static void lu_s_cell_mem_cell_2_retract(Lu_S_Cell_Mem self, Lu_S_Cell_2 cell)
	// {
	// 	lu_s_cell_2_deinit(cell);
	// }

	// static Lu_S_Cell_3 lu_s_cell_mem_cell_3_assign(
	// 	Lu_S_Cell_Mem self, 
	// 	Lu_S_Layer layer, 
	// 	lu_size x, 
	// 	lu_size y, 
	// 	lu_size z,
	// 	Lu_S_Layer_Conf v_conf, 
	// 	Lu_S_Layer_Conf p_conf
	// )
	// {
	// 	lu_user_assert(self->cells_3_count < self->cells_3_size, "Out of space for Lu_S_Cell_3");

	// 	Lu_S_Cell_3 neu = &self->cells_3[self->cells_3_count];
	// 	neu = lu_s_cell_3_init(neu, layer, layer->cells_count, x, y, z, v_conf, p_conf);
	// 	lu_user_assert(neu, "Cannot init Lu_S_Cell_3");

	// 	lu_s_layer_cell_set(layer, x, y, z, (Lu_S_Cell_1) neu);

	// 	// no need for lock, they are created once in one thread
	// 	++layer->cells_count;
	// 	++self->cells_3_count;

	// 	return neu;
	// }

	// static void lu_s_cell_mem_cell_3_retract(Lu_S_Cell_Mem self, Lu_S_Cell_3 cell)
	// {
	// 	lu_s_cell_3_deinit(cell);
	// }

///////////////////////////////////////////////////////////////////////////////
// Print

	static void lu_s_cell_mem__print_info(Lu_S_Cell_Mem self)
	{
 		// lu__debug("\n 	 	%-19s %lu", "cells_1_size:", self->cells_1_size);
 		// lu__debug("\n 	 	%-19s %lu", "cells_2_size:", self->cells_2_size);
 		// lu__debug("\n 	 	%-19s %lu", "cells_3_size:", self->cells_3_size);
	}


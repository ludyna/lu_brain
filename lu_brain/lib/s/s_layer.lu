/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// 

	static Lu_S_Layer lu_s_layer__init(
		Lu_S_Layer self, 
		Lu_Config config, 
		lu_size level, 
		lu_size children_count,
		lu_size n_w,
		lu_size n_h,
		lu_size n_cell_type
	)
	{
		lu__assert(self);
		lu__assert(config);
		lu__assert(n_w > 0);
		lu__assert(n_h > 0);

		if (children_count == 0)
		{
			lu_s_layer_base__init(
				&self->super, 
				NULL, 
				config, 
				LU_S_LAYER__LAYER, 
				level, 
				lu_s_layer__destroy
			); 
		}
		else if (children_count == 1)
		{
			lu_s_layer_base__init_with_one_c_slot(
				&self->super, 
				NULL, 
				config, 
				LU_S_LAYER__LAYER, 
				level, 
				lu_s_layer__destroy
			);
		}
		else
		{
			lu_s_layer_base__init_with_arr_c_slot(
				&self->super, 
				NULL, 
				children_count, 
				config, 
				LU_S_LAYER__LAYER, 
				level, 
				lu_s_layer__destroy
			);
		}

		self->n_table = lu_n_table__create(config->n_mem, n_w, n_h, n_cell_type, config);
		lu__alloc_assert(self->n_table);

		self->w_tables = lu_arr__create(config->w_mem, config->w_waves_size, false);
		lu__alloc_assert(self->w_tables);

		Lu_W_Table w_table;
		for (lu_size i = 0; i < lu_arr__size(self->w_tables); i++)
		{
			w_table = lu_w_table__create(config, n_w, n_h);
			lu__alloc_assert(w_table);
			
			lu_arr__set(self->w_tables, i, (lu_p_void) w_table);
		}

		return self;
	}

	static void lu_s_layer__deinit(Lu_S_Layer self)
	{
		lu__assert(self);
		
		Lu_W_Table w_table;
		for (lu_size i = 0; i < lu_arr__count(self->w_tables); i++)
		{
			w_table = (Lu_W_Table) lu_arr__get(self->w_tables, i);
			lu_w_table__destroy(w_table);
		}

		if (self->n_table)
			lu_n_table__destroy(self->n_table);

		lu_arr__destroy(self->w_tables);

		lu_s_layer_base__deinit(&self->super);
	}


	static Lu_S_Layer lu_s_layer__create(
		Lu_Config config, 
		lu_size level, 
		lu_size children_count,
		lu_size n_w,
		lu_size n_h,
		lu_size n_cell_type
	)
	{
		lu__assert(config);
		lu__assert(config->s_mem);

		Lu_S_Layer self = (Lu_S_Layer) lu_mem__alloc(config->s_mem, sizeof(struct lu_s_layer));
		lu__alloc_assert(self);

		lu_s_layer__init(self, config, level, children_count, n_w, n_h, n_cell_type);

		return self;
	}

	static void lu_s_layer__destroy(Lu_S_Layer_Base self)
	{
		lu__assert(self);
		lu__assert(self->s_mem);

		lu_s_layer__deinit(self);

		lu_mem__free(self->s_mem, (lu_p_byte) self);
	}

///////////////////////////////////////////////////////////////////////////////
// 

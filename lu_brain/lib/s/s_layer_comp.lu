/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// 

	static Lu_S_Layer_Comp lu_s_layer_comp__create(Lu_Res res, Lu_S_Layer_Frame frame, Lu_Rec_Comp_Config config)
	{
		lu__assert(res);
		lu__assert(res->s_mem);
		lu__assert(frame);
		lu__assert(config);

		Lu_S_Layer_Comp self = (Lu_S_Layer_Comp) lu_mem__alloc(res->s_mem, sizeof(struct lu_s_layer_comp));
		lu__assert(self);

		struct lu_s_layer_base_config c;

		lu_s_layer_base_config__init(&c);

		c.s_mem = res->s_mem;
		c.type = LU_S_LT__COMP;
		c.level = 0;
		c.destroy = lu_s_layer_comp__destroy;

		//
		// n_config
		//

		c.n_config.n_mem = res->n_mem;

		//
		// w_config
		//
		
		c.w_config.w_mem = res->w_mem;


		lu_s_layer_base__init(
			&self->super, 
			&c, 
			(Lu_S_Layer_Base)frame 
		);

		Lu_Rec rec = frame->rec;
		lu__assert(rec);

		lu_s_comp_view__init(
			&self->v_view, 
			res,
			LU_S_CVT__V, 
			rec->width, 
			rec->height, 
			config->v_min, 
			config->v_max, 
			config->v_neu_size
		);

		lu_s_comp_view__init(
			&self->p_view, 
			res, 
			LU_S_CVT__P, 
			rec->width, 
			rec->height, 
			config->v_min, 
			config->v_max, 
			config->p_neu_size
		);

		return self;
	}

	static void lu_s_layer_comp__destroy(Lu_S_Layer_Base self)
	{
		lu__assert(self);
		lu__assert(self->s_mem);
		lu__assert(self->type == LU_S_LT__COMP);

		Lu_S_Layer_Comp layer_comp = (Lu_S_Layer_Comp) self;

		lu_s_comp_view__deinit(&layer_comp->v_view);
		lu_s_comp_view__deinit(&layer_comp->p_view);

		lu_s_layer_base__deinit(self);

		lu_mem__free(self->s_mem, (lu_p_byte) self);
	}

///////////////////////////////////////////////////////////////////////////////
// 
	
	static void lu_s_layer_comp__save_data(
		Lu_S_Layer_Comp self, 
		lu_size wave_id, 
		lu_size z, 
		Lu_Data data, 
		Lu_Process_Config config
	)
	{
		lu__assert(self);
		lu__assert(data);
		lu__assert(config);

		

		
	}
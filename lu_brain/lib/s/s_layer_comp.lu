/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// 

	static Lu_S_Layer_Comp lu_s_layer_comp__create(
		Lu_Config config, 
		Lu_S_Layer_Rec frame, 
		Lu_Rec_Comp_Config rc_config
	)
	{
		lu__assert(config);
		lu__assert(frame);
		lu__assert(rc_config);

		Lu_S_Layer_Comp self = (Lu_S_Layer_Comp) lu_mem__alloc(config->s_mem, sizeof(struct lu_s_layer_comp));
		lu__assert(self);

		lu_s_layer_base__init(
			&self->super, 
			(Lu_S_Layer_Base)frame,
			config,
			LU_S_LT__COMP,
			0,
			lu_s_layer_comp__destroy
		);

		Lu_Rec rec = frame->rec;
		lu__assert(rec);

		lu_s_comp_view__init(
			&self->v_view, 
			config,
			LU_S_CVT__V, 
			rec->width, 
			rec->height, 
			rc_config->v_min, 
			rc_config->v_max, 
			rc_config->v_neu_size
		);

		lu_s_comp_view__init(
			&self->p_view, 
			config, 
			LU_S_CVT__P, 
			rec->width, 
			rec->height, 
			rc_config->v_min, 
			rc_config->v_max, 
			rc_config->p_neu_size
		);

		return self;
	}

	static void lu_s_layer_comp__destroy(Lu_S_Layer_Base self)
	{
		lu__assert(self);
		lu__assert(self->s_mem);
		lu__assert(self->type == LU_S_LT__COMP);

		Lu_S_Layer_Comp layer_comp = (Lu_S_Layer_Comp) self;

		lu_s_comp_view__deinit(&layer_comp->v_view);
		lu_s_comp_view__deinit(&layer_comp->p_view);

		lu_s_layer_base__deinit(self);

		lu_mem__free(self->s_mem, (lu_p_byte) self);
	}

///////////////////////////////////////////////////////////////////////////////
// 
	
	static void lu_s_layer_comp__save_data(
		Lu_S_Layer_Comp self, 
		Lu_Wave wave, 
		lu_size z, 
		Lu_Data data, 
		Lu_Process_Config config
	)
	{
		lu__assert(self);
		lu__assert(data);
		lu__assert(config);

 	// 	// will be empty if no prev data
		// Lu_Data prev_data = lu_s_comp_view__last_data(&self->v_view, wave);

		// // we save first because a) we need to save it somewhere b) we need to "digitalize" data
		// lu_s_comp_view__save_data(&self->v_view, wave, z, data, config);

		// // digitalized
		// Lu_Data curr_data = lu_s_comp_view__last_data(&self->v_view, wave);

		// // self->p_data is preallocated, so we dont allocate memory every time
		// lu_data__calc_p_data(self->p_data, prev_data, curr_data);

		// if (!lu_value_eq_with_signif(config->p_potency, 0.0, config->min_potency))
		// {
		// 	lu_s_comp_view__save_data(&self->p_view, wave, z, self->p_data, config);
		// }
	}
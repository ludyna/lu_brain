/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// 

	static Lu_S_Layer_Comp lu_s_layer_comp__create(
		Lu_Config config, 
		Lu_S_Layer_Rec frame, 
		Lu_Rec_Comp_Config rc_config
	)
	{
		lu__assert(config);
		lu__assert(frame);
		lu__assert(rc_config);

		Lu_S_Layer_Comp self = (Lu_S_Layer_Comp) lu_mem__alloc(config->s_mem, sizeof(struct lu_s_layer_comp));
		lu__assert(self);

		lu_s_layer_base__init(
			&self->super, 
			(Lu_S_Layer_Base)frame,
			config,
			LU_S_LT__COMP,
			0,
			lu_s_layer_comp__destroy
		);

		Lu_Rec rec = frame->rec;
		lu__assert(rec);

		// lu_s_view_p__init(
		// 	&self->v_view, 
		// 	config,
		// 	LU_S_CVT__V, 
		// 	rec->width, 
		// 	rec->height, 
		// 	rc_config->v_min, 
		// 	rc_config->v_max, 
		// 	rc_config->v_neu_size
		// );

		// lu_s_view_p__init(
		// 	&self->p_view, 
		// 	config, 
		// 	LU_S_CVT__P, 
		// 	rec->width, 
		// 	rec->height, 
		// 	rc_config->v_min, 
		// 	rc_config->v_max, 
		// 	rc_config->p_neu_size
		// );

		return self;
	}

	static void lu_s_layer_comp__destroy(Lu_S_Layer_Base self)
	{
		lu__assert(self);
		lu__assert(self->s_mem);
		lu__assert(self->type == LU_S_LT__COMP);

		Lu_S_Layer_Comp layer_comp = (Lu_S_Layer_Comp) self;

		// lu_s_view_p__deinit(&layer_comp->v_view);
		// lu_s_view_p__deinit(&layer_comp->p_view);

		lu_s_layer_base__deinit(self);

		lu_mem__free(self->s_mem, (lu_p_byte) self);
	}

///////////////////////////////////////////////////////////////////////////////
// 
	
	static void lu_s_layer_comp__save_data(
		Lu_S_Layer_Comp self, 
		Lu_Wave wave, 
		lu_size z, 
		Lu_Data data, 
		Lu_Process_Config config
	)
	{
		lu__assert(self);
		lu__assert(wave);
		lu__assert(data);
		lu__assert(config);

		bool process_v = !lu_value_eq_with_signif(config->v_potency, 0.0, config->min_potency);
		bool process_p = !lu_value_eq_with_signif(config->p_potency, 0.0, config->min_potency);

		lu_size wave_id = lu_wave__get_id(wave);

		// tut p zalezhyt vid v, i v zalezhyt vid p
		// A i B sytuaciyi
		// yaksho tilky A - nichoho ne robymo
		// robymo tilky koly A i B
		// same prostishe yaksho my budemo maty cash dlia A, B, C, D i td i operuvaty z nioho
		// save_p ( ce prosto dlia A i B)
		// save_v (B, i vrahovuyemo perepady z save_p)

		// save_p (B i C)
		// save_v (C, i perepady z save_p(A, B))

		// save_p(C, D)
		// save_v(C, save_p(C,D))

		// tobto spysok A, B, C, D ce FIFO spysok (list?)

		// tobto shob save_v nam treba save_p
		// mozhna rozdilyty save_v, save_p i register_v, register_p

		// tobto my robymo register_p(A), registre_p(B)
		// if (register_p_ready)
		//    if (process_p) w_table_p.save

		//    if (process_v) w_table_v.save(B, lu_s_comp_p) 
		// 	  	- lu_s_comp_p tut potribni tilki koordynaty komirok, znachennia ne mayut znachenia
		//	v digitalize and p_digitalize rizni

		// treba vse taky rozdilyty lu_s_view_p na lu_s_comp_p and lu_s_comp_v

		Lu_S_View_P p_view = &self->p_view;
		Lu_S_View_V v_view = &self->v_view;

		lu_s_view_p__register(p_view, z, data, wave_id);

		if (lu_s_view_p__is_ready(p_view))
		{

			if (process_p) lu_s_view_p__save(p_view, wave_id, config);

			if (process_v) 
			{
				lu_s_view_v__register(v_view, z, data, wave_id, p_view);

				lu_s_view_v__save(v_view, wave_id, config);
			}

		}

 
		// Lu_W_Table v_w_table = lu_s_view_p__get_w_table(&self->v_view, wave_id);
		// lu__assert(v_w_table);

		// Lu_W_Table p_w_table = lu_s_view_p__get_w_table(&self->p_view, wave_id);
		// lu__assert(p_w_table);

		// // same digitalized data can be used in p and v (ce nepravda)
		// lu_comp_calc__digitalize_data(v_w_table->comp_calc, data, z);

		// if (process_p)
		// { 
		// 	p_w_table->wave = wave;
		// 	lu_w_table_comp__save_p(p_w_table, z, v_w_table, data, config);
		// }
		
		// if (process_v)
		// {
		// 	v_w_table->wave = wave;
		// 	lu_w_table_comp__save(v_w_table, z, p_w_table, data, config);
		// }


		

	}
/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// 

	static inline Lu_S_View_V lu_s_view_v__init(
		Lu_S_View_V self, 
		Lu_Config config, 
		enum lu_s_view_p_type view_type, 
		lu_size width,
		lu_size height,
		lu_value min, 
		lu_value max, 
		lu_size cells_size,
		lu_size layer_ix,
		lu_size area_ix
	)
	{
		lu__assert(self);
		lu__assert(config);
		lu__assert(config->s_mem);
		lu__assert(config->n_mem);
		lu__assert(config->w_mem);
		lu__assert(width > 0);
		lu__assert(height > 0);

		self->view_type = view_type;

		Lu_Comp_Calc comp_calc = &self->comp_calc;

		lu_comp_calc__init(comp_calc, config->s_mem, min, max, cells_size);
	
		self->n_comp_table = lu_n_table_comp__create(
			config, 
			comp_calc, 
			width, 
			height, 
			cells_size, 
			layer_ix,
			area_ix
		);
		lu__assert(self->n_comp_table);

		self->w_tables = lu_arr__create(config->w_mem, config->w_waves_size, false);
		lu__assert(self->w_tables);

		Lu_W_Table_V w_table;
		for (lu_size i = 0; i < lu_arr__size(self->w_tables); i++)
		{
			w_table = lu_w_table_v__create(config, width, height);
			lu__assert(w_table);
			
			lu_arr__set(self->w_tables, i, (lu_p_void) w_table);
		}

		return self;
	}

	static inline void lu_s_view_v__deinit(Lu_S_View_V self)
	{
		lu__assert(self);

		lu_n_table_comp__destroy(self->n_comp_table);

		Lu_W_Table_V w_table;
		for (lu_size i = 0; i < lu_arr__count(self->w_tables); i++)
		{
			w_table = (Lu_W_Table_V) lu_arr__get(self->w_tables, i);
			lu_w_table_v__destroy(w_table);
		}

		lu_arr__destroy(self->w_tables);

		lu_comp_calc__deinit(&self->comp_calc);
		
		self->n_comp_table = NULL;
		self->w_tables = NULL;
	}

///////////////////////////////////////////////////////////////////////////////
// 

	static Lu_W_Table_V lu_s_view_v__get_w_table(Lu_S_View_V self, lu_size wave_id)
	{
		return (Lu_W_Table_V) lu_arr__get(self->w_tables, wave_id);
	}
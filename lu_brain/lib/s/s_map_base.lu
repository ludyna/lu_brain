/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// 

	static Lu_S_Map_Base lu_s_map_base__init(
		Lu_S_Map_Base self, 
		Lu_Mem mem, 
		lu_size apexes_size,
		lu_size bases_size, 
		Lu_S_Map_Base p
	)
	{
		lu__assert(self);
		lu__assert(mem);

		self->mem = mem;

		self->apexes = lu_arr__create(mem, apexes_size, true);
		lu__assert(self->apexes);

		self->bases = lu_arr__create(mem, bases_size, true);
		lu__assert(self->bases);

		self->p = p;
		self->c = NULL;

		return self;
	}


	static Lu_S_Map_Base lu_s_map_base__init_with_childs(
		Lu_S_Map_Base self,
		Lu_Mem mem, 
		lu_size apexes_size,
		lu_size bases_size, 
		Lu_S_Map_Base p, 
		lu_size childs_size
	)
	{
		self = lu_s_map_base__init(self, mem, apexes_size, bases_size, p);
		lu__assert(self);

		
	}


	static void lu_s_map_base__destroy(Lu_S_Map_Base self)
	{
		lu__assert(self);
		lu__assert(self->p == NULL);
		lu__assert(self->c);
		lu__assert(self->mem);

		lu_size i;
		Lu_S_Layer_Base layer_base;

		// destroy bases slots
		for (i = 0; i < lu_arr__count(self->bases); i++)
		{
			layer_base = (Lu_S_Layer_Base) lu_arr__get(self->bases, i);
			lu__assert(layer_base);

			layer_base->destroy(layer_base, self->mem);
		}

		// destroy apexes slots
		for (i = 0; i < lu_arr__count(self->apexes); i++)
		{
			layer_base = (Lu_S_Layer_Base) lu_arr__get(self->apexes, i);
			lu__assert(layer_base);

			layer_base->destroy(layer_base, self->mem);
		}

		self->p = NULL;

		if (self->c)
		{
			lu__assert(self->c->destroy);
			
			self->c->destroy((Lu_Slot_Base) self->c, self->mem);
			self->c = NULL;
		}

		lu_arr__destroy(self->bases);
		self->bases = NULL;

		lu_arr__destroy(self->apexes);
		self->apexes = NULL;

		lu_mem__free(self->mem, (lu_p_byte) self);
	}

	static Lu_S_Layer_Base lu_s_map_base__get_base(Lu_S_Map_Base self) 
	{
		lu__assert(self);
		lu__assert(self->bases);

		Lu_Slot_Base slot = lu_arr__get(self->bases, 0);
		lu__assert(slot);
		lu__assert(slot->type == LU_ST_ONE);
		Lu_Slot_One one = (Lu_Slot_One) slot;

		return (Lu_S_Layer_Base) one->item;
	}

	static Lu_S_Layer_Base lu_s_map_base__get_apex(Lu_S_Map_Base self)
	{
		lu__assert(self);
		lu__assert(self->bases);

		Lu_Slot_Base slot = lu_arr__get(self->bases, 0);
		lu__assert(slot);
		lu__assert(slot->type == LU_ST_ONE);
		Lu_Slot_One one = (Lu_Slot_One) slot;

		return (Lu_S_Layer_Base) one->item;
	}

	static Lu_S_Layer_Frame lu_s_map_base__get_frame(Lu_S_Map_Base self)
	{
				lu__assert(self);
		lu__assert(self->bases);

		Lu_Slot_Base slot = lu_arr__get(self->bases, 0);
		lu__assert(slot);
		lu__assert(slot->type == LU_ST_ONE);
		Lu_Slot_One one = (Lu_Slot_One) slot;

		return (Lu_S_Layer_Frame) one->item;
	}

///////////////////////////////////////////////////////////////////////////////
// 

	static void lu_s_map_base__connect(Lu_S_Map_Base p, Lu_S_Map_Base c)
	{

	}
/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// 

	static Lu_S_Map_Base lu_s_map_base__init(
		Lu_S_Map_Base self, 
		enum lu_s_map_type type, 
		Lu_Config config,
		Lu_S_Map_Base p, 
		void (*destroy)(Lu_S_Map_Base)
	)
	{
		lu__assert(self);
		lu__assert(config);
		lu__assert(destroy);

		self->type = type;
		self->config = config;

		self->apexes = lu_arr__create(config->s_mem, config->s_apexes_size, true);
		lu__assert(self->apexes);

		// bases size = apexes size
		self->bases = lu_arr__create(config->s_mem, config->s_apexes_size, true);
		lu__assert(self->bases);

		self->p = p;
		self->c = NULL;

		self->destroy = destroy;

		return self;
	}


	static Lu_S_Map_Base lu_s_map_base__init_with_childs(
		Lu_S_Map_Base self,
		enum lu_s_map_type type, 
		Lu_Config config,
		Lu_S_Map_Base p, 
		lu_size childs_size,
		void (*destroy)(Lu_S_Map_Base)
	)
	{
		self = lu_s_map_base__init(self, type, config, p, destroy);
		lu__assert(self);

		self->c = (Lu_Slot_Base) lu_slot_arr__create(config->s_mem, childs_size, true);
		lu__assert(self->c);

		return self;
	}


	static void lu_s_map_base__destroy(Lu_S_Map_Base self)
	{
		lu__assert(self);

		Lu_Mem s_mem = self->config->s_mem;
		lu__assert(s_mem);

		lu_size i;
		Lu_Slot_Base slot;
		Lu_Slot_Base slot_2;

		// destroy bases slots
		for (i = 0; i < lu_arr__count(self->bases); i++)
		{
			slot = (Lu_Slot_Base) lu_arr__get(self->bases, i);
			lu__assert(slot);

			// Because apexes could contain same slot (if level has only one layer, which 
			// is both base and apex), we should set it to NULL in other apexes

			slot_2 = (Lu_Slot_Base) lu_arr__get(self->apexes, i);

			if (slot == slot_2)
				lu_arr__set(self->apexes, i, NULL);

			lu__assert(slot->destroy);
			slot->destroy(slot, s_mem);
		}

		// destroy apexes slots
		for (i = 0; i < lu_arr__count(self->apexes); i++)
		{
			slot = (Lu_Slot_Base) lu_arr__get(self->apexes, i);
			
			if (slot)
			{
				lu__assert(slot->destroy);

				slot->destroy(slot, s_mem);
			}
		}

		if (self->c)
		{
			lu__assert(self->c->destroy);
			
			self->c->destroy((Lu_Slot_Base) self->c, s_mem);
			self->c = NULL;
		}

		lu_arr__destroy(self->bases);
		self->bases = NULL;

		lu_arr__destroy(self->apexes);
		self->apexes = NULL;

		lu_mem__free(s_mem, (lu_p_byte) self);
	}


///////////////////////////////////////////////////////////////////////////////
// Fractals

	static void lu_s_map_base__make_story_fractal(Lu_S_Map_Base self, lu_size recs_count)
	{
		lu__assert(self);
		lu__assert(self->apexes);
		lu__assert(self->bases);
		lu__assert(self->config);

		Lu_Config config = self->config;
		Lu_Mem s_mem = config->s_mem;
		lu__assert(s_mem);

		//
		// Create and connect layers
		//

		Lu_S_Layer story = lu_s_layer__create(config, 4, 1, 1, 1, LU_N_CELL__N);
		Lu_S_Layer scene = lu_s_layer__create(config, 3, 1, 1, 1, LU_N_CELL__N);
		Lu_S_Layer event = lu_s_layer__create(config, 2, 1, 1, 1, LU_N_CELL__N);
		Lu_S_Layer seq = lu_s_layer__create(config, 1, 1, 1, 1, LU_N_CELL__N);

		lu__assert(story);
		lu__assert(scene);
		lu__assert(event);
		lu__assert(seq);

		Lu_S_Layer prev = lu_s_layer__create(config, 0, recs_count, 1, 1, LU_N_CELL__N);
		lu__assert(prev);
		Lu_S_Layer recs_base = prev;
		Lu_S_Layer recs = recs_base;

		lu_size recs_layers_size = lu_s__Y(recs_count, 1);
		for(lu_size i = 1; i < recs_layers_size; i++)
		{
			recs = lu_s_layer__create(config, 0, 1, 1, 1, LU_N_CELL__N);
			lu__assert(recs);

			lu_s_layer_base__connect((Lu_S_Layer_Base) recs, (Lu_S_Layer_Base) prev);
			prev = recs;
		}

		lu_s_layer_base__connect((Lu_S_Layer_Base) story, (Lu_S_Layer_Base) scene);
		lu_s_layer_base__connect((Lu_S_Layer_Base) scene, (Lu_S_Layer_Base) event);
		lu_s_layer_base__connect((Lu_S_Layer_Base) event, (Lu_S_Layer_Base) seq);
		lu_s_layer_base__connect((Lu_S_Layer_Base) seq, (Lu_S_Layer_Base) recs);

		//
		// Fill map
		//

		lu_arr__set(self->bases, 0, (lu_p_void) lu_slot_one__create(s_mem, recs_base));
		lu_arr__set(self->bases, 1, (lu_p_void) lu_slot_one__create(s_mem, seq));
		lu_arr__set(self->bases, 2, (lu_p_void) lu_slot_one__create(s_mem, event));
		lu_arr__set(self->bases, 3, (lu_p_void) lu_slot_one__create(s_mem, scene));
		lu_arr__set(self->bases, 4, (lu_p_void) lu_slot_one__create(s_mem, story));

		lu_arr__set(self->apexes, 0, (lu_p_void) lu_slot_one__create(s_mem, recs));
		lu_arr__set(self->apexes, 1, (lu_p_void) lu_slot_one__create(s_mem, seq));
		lu_arr__set(self->apexes, 2, (lu_p_void) lu_slot_one__create(s_mem, event));
		lu_arr__set(self->apexes, 3, (lu_p_void) lu_slot_one__create(s_mem, scene));
		lu_arr__set(self->apexes, 4, (lu_p_void) lu_slot_one__create(s_mem, story));
	}

	static void lu_s_map_base__make_rec_fractal(Lu_S_Map_Base self, Lu_Rec rec)
	{
		lu__assert(self);
		lu__assert(rec);
		lu__assert(self->bases);
		lu__assert(self->apexes);

		Lu_Config config = self->config;
		lu__assert(config);

		Lu_Mem s_mem = config->s_mem;
		lu__assert(s_mem);

		//
		// Frame
		//

		Lu_S_Layer_Rec rec_base = lu_s_layer_rec__create(config, rec);
		lu__assert(rec_base);
		lu__assert(lu_s_layer_base__get_type((Lu_S_Layer_Base) rec_base) == LU_S_LAYER__REC);

		//
		// Create comp layers
		//

		Lu_Slot_Arr slot_arr = lu_slot_arr__create(s_mem, rec->depth, true);
		lu__assert(slot_arr);

		lu_size i;
		Lu_S_Layer_Comp comp = NULL;
		for (i = 0; i < rec->depth; i++)
		{
			comp = lu_s_layer_comp__create(config, rec_base, lu_rec_config__get_comp_config(&rec->config, i));
			lu__assert(comp);

			lu_s_layer_base__connect((Lu_S_Layer_Base) rec_base, (Lu_S_Layer_Base) comp);

			lu_arr__append(slot_arr->items, (lu_p_void) comp);
		}

		//
		// Create rec layers
		//

		Lu_S_Layer_Base prev = (Lu_S_Layer_Base) rec_base;
		Lu_S_Layer rec_layer;
		lu_size frames_layers_size = lu_s__Y(rec->width, rec->height);
		for (i = 1; i < frames_layers_size; i++)
		{
			rec_layer = lu_s_layer__create(config, 0, 1, 1, 1, LU_N_CELL__N);
			lu__assert(rec_layer);

			lu_s_layer_base__connect((Lu_S_Layer_Base) rec_layer, prev);
			prev = (Lu_S_Layer_Base) rec_layer;
		}

		// 
		// Fill bases
		// 

		lu_arr__set(self->bases, 0, (lu_p_void) slot_arr);

		lu__assert(lu_s_layer_base__get_type((Lu_S_Layer_Base) rec_base) == LU_S_LAYER__REC);
		Lu_Slot_One slot_one = lu_slot_one__create(s_mem, rec_base);
		lu__assert(slot_one);
		
		lu_arr__set(self->bases, 1, (lu_p_void) slot_one);

		// 
		// Fill apexes
		// 

		lu_arr__set(self->apexes, 0, (lu_p_void) slot_arr);

		slot_one = lu_slot_one__create(s_mem, rec_layer);
		lu__assert(slot_one);

		lu_arr__set(self->apexes, 1, (lu_p_void) slot_one);
	}

	static void lu_s_map_base__unmake_fractal(Lu_S_Map_Base self)
	{
		lu__assert(self);
		lu__assert(self->apexes);

		Lu_S_Layer_Base apex = (Lu_S_Layer_Base) lu_arr__last(self->apexes);
		lu__assert(apex);

		apex->destroy(apex);
	}

///////////////////////////////////////////////////////////////////////////////
//  

	static Lu_S_Layer_Base lu_s_map_base__get_base(Lu_S_Map_Base self) 
	{
		lu__assert(self);
		lu__assert(self->bases);

		Lu_Slot_Base slot = (Lu_Slot_Base) lu_arr__get(self->bases, 0);
		lu__assert(slot);
		lu__assert(slot->type == LU_SLOT__ONE);
		Lu_Slot_One one = (Lu_Slot_One) slot;

		return (Lu_S_Layer_Base) one->item;
	}

	static Lu_S_Layer_Base lu_s_map_base__get_apex(Lu_S_Map_Base self)
	{
		lu__assert(self);
		lu__assert(self->apexes);

		Lu_Slot_Base slot = (Lu_Slot_Base) lu_arr__get(self->apexes, lu_arr__count(self->apexes) - 1);
		lu__assert(slot);
		lu__assert(slot->type == LU_SLOT__ONE);
		Lu_Slot_One one = (Lu_Slot_One) slot;

		return (Lu_S_Layer_Base) one->item;
	}

	static Lu_S_Layer_Rec lu_s_map_base__get_frame(Lu_S_Map_Base self)
	{
		lu__assert(self);
		lu__assert(self->bases);

		Lu_Slot_Base slot = (Lu_Slot_Base) lu_arr__get(self->bases, 1);
		lu__assert(slot);
		lu__assert(slot->type == LU_SLOT__ONE);
		Lu_Slot_One one = (Lu_Slot_One) slot;

		Lu_S_Layer_Base layer_base = (Lu_S_Layer_Base) one->item;
		lu__assert(layer_base);
		lu__assert(layer_base->type == LU_S_LAYER__REC);

		return (Lu_S_Layer_Rec) one->item;
	}

///////////////////////////////////////////////////////////////////////////////
// 

	static void lu_s_map_base__connect(Lu_S_Map_Base p, Lu_S_Map_Base c)
	{
		lu__assert(p);
		lu__assert(c);
		lu__assert(p->c->type == LU_SLOT__ARR);

		c->p = p;

		Lu_Slot_Arr slot_arr = (Lu_Slot_Arr) p->c;
		lu__assert(slot_arr->items);

		lu_arr__append(slot_arr->items, (lu_p_void) c);
	}

	static void lu_s_map_base__recursive_destroy(Lu_S_Map_Base self)
	{
		lu__assert(self);
		
		if (self->c)
		{
			if (self->c->type == LU_SLOT__ONE)
			{
				Lu_Slot_One one = (Lu_Slot_One) self->c;

				if (one->item)
				{
					lu_s_map_base__recursive_destroy((Lu_S_Map_Base) one->item);
				}
			}
			else if (self->c->type == LU_SLOT__ARR)
			{
				Lu_Slot_Arr slot_arr = (Lu_Slot_Arr) self->c;

				if (slot_arr->items)
				{

					Lu_Arr arr = slot_arr->items;

					for (lu_size i = 0; i < lu_arr__count(arr); i++)
					{
						Lu_S_Map_Base c_map = (Lu_S_Map_Base) lu_arr__get(arr, i);
						if (c_map)
						{
							lu_s_map_base__recursive_destroy(c_map);
						}
					}
				}
			}
			else
			{
				lu__assert(0);
			}
		}

		lu__assert(self->destroy);
		self->destroy(self);
	}
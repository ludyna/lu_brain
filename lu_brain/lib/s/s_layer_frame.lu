/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// 

	static Lu_S_Layer_Frame lu_s_layer_frame__create(Lu_Res res, Lu_Rec rec)
	{
		lu__assert(res);
		lu__assert(res->s_mem);
		lu__assert(rec);

		Lu_S_Layer_Frame self = (Lu_S_Layer_Frame) lu_mem__alloc(res->s_mem, sizeof(struct lu_s_layer_frame));
		lu__assert(self);

		struct lu_s_layer_base_config c;

		lu_s_layer_base_config__init(&c);

		c.s_mem = res->s_mem;
		c.type = LU_S_LT__FRAME;
		c.level = 1;
		c.destroy = lu_s_layer_frame__destroy;

		//
		// n_config
		//

		c.n_config.n_mem = res->n_mem;

		//
		// w_config
		//
		
		c.w_config.w_mem = res->w_mem;

		lu_s_layer_base__init_with_arr_c_slot(&self->super, &c, NULL, rec->depth);

		self->rec = rec;
		
		return self;
	}

	static void lu_s_layer_frame__destroy(Lu_S_Layer_Base self)
	{
		lu__assert(self);
		lu__assert(self->s_mem);
		lu__assert(self->type == LU_S_LT__FRAME);

		Lu_S_Layer_Frame frame = (Lu_S_Layer_Frame) self;

		lu__assert(frame->rec);
		lu_s_layer_base__deinit(self);

		lu_mem__free(self->s_mem, (lu_p_byte) self);
	}

///////////////////////////////////////////////////////////////////////////////
// 

	static void lu_s_layer_frame__save_data(Lu_S_Layer_Frame self, lu_size wave_id, lu_size rec_id, Lu_Data data)
	{
		lu__assert(self);
		lu__assert(self->rec);

		Lu_S_Layer_Base base = &self->super;

		Lu_Slot_Base slot_base = base->c;
		lu__assert(slot_base);
		lu__assert(slot_base->type == LU_ST__ARR);

		Lu_Slot_Arr slot_arr = (Lu_Slot_Arr) slot_base;

		lu__assert(self->rec->depth == lu_arr__count(slot_arr->items));

		for (lu_size z = 0; z < lu_arr__count(slot_arr->items); z++)
		{
			Lu_S_Layer_Comp comp = (Lu_S_Layer_Comp) lu_arr__get(slot_arr->items, z);
			lu__assert(comp->super.type == LU_S_LT__COMP);

			lu_s_layer_comp__save_data(comp, wave_id, z, data);
		}

		// continue saving to higher levels recursively (wave)
	}
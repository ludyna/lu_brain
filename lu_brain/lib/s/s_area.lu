/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// 

	static Lu_S_Area lu_s_area__create(Lu_Config config, lu_size area_ix, lu_size layers_size, enum lu_area_tag tag)
	{
		lu__assert(config);
		lu__assert(layers_size > 0);  
		lu__assert(tag < LU_AREA_TAG__END);

		Lu_Mem mem = config->s_mem;
		lu__assert(mem);

		Lu_S_Area self = (Lu_S_Area) lu_mem__alloc(mem, sizeof(struct lu_s_area));
		lu__alloc_assert(self);

		self->area_ix = area_ix;
		self->tag = tag;
		self->config = config;
		self->layers_size = layers_size;
		self->layers_count = 0;

		self->layers = (Lu_S_Layer_Base*) lu_mem__alloc(mem, sizeof(Lu_S_Layer_Base) * layers_size);
		lu__alloc_assert(self->layers);

		return self;
	}

	static void lu_s_area__destroy(Lu_S_Area self)
	{
		lu__assert(self);
		lu__assert(self->config);

		Lu_Mem mem = self->config->s_mem;
		lu__assert(mem);

		lu_mem__free(mem, (lu_p_byte) self->layers);

		self->layers = NULL;

		lu_mem__free(mem, (lu_p_byte) self);
	}

///////////////////////////////////////////////////////////////////////////////
// 

	static Lu_S_Layer_Comp lu_s_area__create_layer_comp(
		Lu_S_Area self, 
		Lu_S_Layer_Rec frame, 
		Lu_Rec_Comp_Config rc_config
	)
	{
		lu__assert(self);
		lu__assert(frame);
		lu__assert(rc_config);
		lu__assert(self->layers_count < LU_S__LAYERS_SIZE);

		Lu_S_Layer_Comp layer = lu_s_layer_comp__create(
			self->config, 
			frame, 
			rc_config, 
			self->layers_count, 
			self->area_ix
		);

		lu_s_area__register_layer(self, (Lu_S_Layer_Base) layer);

		return layer;
	}

	static Lu_S_Layer lu_s_area__create_layer(
		Lu_S_Area self,
		lu_size children_count,
		lu_size n_w,
		lu_size n_h,
		lu_size n_h_max
	)
	{
		lu__assert(self);
		lu__assert(self->layers_count < LU_S__LAYERS_SIZE);
		lu__assert(n_w > 0);
		lu__assert(n_h > 0);
		lu__assert(n_h_max >= n_h);

		Lu_S_Layer layer = lu_s_layer__create(
			self->config, 
			self->layers_count, 
			self->area_ix,
			children_count, 
			n_w, 
			n_h, 
			n_h_max,
			self->tag
		);
	
		lu_s_area__register_layer(self, (Lu_S_Layer_Base) layer);

		return layer;
	}
	
	static Lu_S_Layer_Rec lu_s_area__create_layer_rec(
		Lu_S_Area self,
		Lu_Rec rec
	)
	{
		lu__assert(self);
		lu__assert(self->layers_count < LU_S__LAYERS_SIZE);
		lu__assert(rec);

		Lu_S_Layer_Rec layer = lu_s_layer_rec__create(self->config, rec, self->layers_count, self->area_ix);
		
		lu_s_area__register_layer(self, (Lu_S_Layer_Base) layer); 

		return layer;
	}

	static lu_bool lu_s_area__expand(Lu_S_Area self)
	{
		Lu_S_Layer_Base layer_base;
		Lu_S_Layer layer;
		lu_bool res;

		if (self->layers_count + 1 >= self->layers_size) return false;

		for (lu_size i = 0; i < self->layers_count; i++)
		{
			layer_base = self->layers[i];

			lu__assert(layer_base->type == LU_S_LAYER__LAYER);

			layer = (Lu_S_Layer) layer_base;

			res = lu_s_layer__expand(layer);

			if (!res) return false;
		}

		layer = (Lu_S_Layer) lu_s_area__get_last_layer(self);

		Lu_S_Layer new_last = lu_s_area__create_layer(self, 1, 1, 1, 1);

		lu_s_layer_base__connect((Lu_S_Layer_Base) new_last, (Lu_S_Layer_Base) layer);

		return true;
	}

///////////////////////////////////////////////////////////////////////////////
// Save methods

	static Lu_W_Table lu_s_area__save_rec(
		Lu_S_Area self, 
		Lu_Save_Wave save_wave,
		lu_size rec_id, 
		Lu_Data data, 
		Lu_Save_Config config
	)
	{
		Lu_S_Layer_Base layer_base = lu_s_area__get_layer_by_ix(self, 0);
		lu__assert(layer_base);
		lu__assert(layer_base->type == LU_S_LAYER__REC);

		Lu_S_Layer_Rec layer_rec = (Lu_S_Layer_Rec) layer_base;

		Lu_W_Table curr_w_table = lu_s_layer_rec__save(layer_rec, save_wave, rec_id, data, config);

		if (!lu_w_table__any_fired(curr_w_table, data->block_id)) return NULL;

		//
		// Continue saving until first frames layer
		// passing rec_layer w_table as previous w info
		//

		Lu_S_Layer_Base parent_layer = lu_s_layer_rec__get_parent(layer_rec);

		while (parent_layer->tag != LU_AREA_TAG__FRAME)
		{
			lu__assert(parent_layer->type == LU_S_LAYER__LAYER);

			#ifdef LU__DEEP_DEBUG
			lu__debug("\nPROCESSING ");
			lu_s_layer_base__print_basic_info(parent_layer);
			#endif

			curr_w_table = lu_s_layer__save((Lu_S_Layer) parent_layer, save_wave, data->block_id, curr_w_table, config);

			if (!lu_w_table__any_fired(curr_w_table, data->block_id)) return NULL;

			parent_layer = parent_layer->p;
		}

		// We should be at FRAME_BASE now
		lu__assert(parent_layer->tag == LU_AREA_TAG__FRAME); 

		return curr_w_table;
	}


	static Lu_W_Table lu_s_area__save_frame(
		Lu_S_Area self, 
		Lu_Save_Wave save_wave, 
		struct lu_block_id block_id,
		Lu_W_Table curr_w_table, 
		Lu_Save_Config config
	)
	{
		Lu_S_Layer_Base parent_layer = lu_s_layer__get_parent_layer(curr_w_table->s_layer);

		while (parent_layer->tag != LU_AREA_TAG__SEQ)
		{
			lu__assert(parent_layer->type == LU_S_LAYER__LAYER);

			#ifdef LU__DEEP_DEBUG
			lu__debug("\nPROCESSING ");
			lu_s_layer_base__print_basic_info(parent_layer);
			#endif

			curr_w_table = lu_s_layer__save((Lu_S_Layer) parent_layer, save_wave, block_id, curr_w_table, config);

			if (!lu_w_table__any_fired(curr_w_table, block_id)) return NULL;

			parent_layer = parent_layer->p;
		}

		// We should be at FRAME_BASE now
		lu__assert(parent_layer->tag == LU_AREA_TAG__SEQ);

		return curr_w_table; 
	}

	static Lu_W_Table lu_s_area__save_seq(
		Lu_S_Area self, 
		Lu_Save_Wave save_wave,
		struct lu_block_id block_id, 
		Lu_W_Table curr_w_table, 
		Lu_Save_Config config
	)
	{
		lu__assert(self);
		lu__assert(curr_w_table);
		lu__assert(config);
		lu__assert(curr_w_table->s_layer);

		Lu_S_Layer_Base parent_layer = lu_s_layer__get_parent_layer(curr_w_table->s_layer);

		lu__assert(parent_layer->type == LU_S_LAYER__LAYER);

		#ifdef LU__DEEP_DEBUG
		lu__debug("\nPROCESSING ");
		lu_s_layer_base__print_basic_info(parent_layer);
		#endif

		curr_w_table = lu_s_layer__save((Lu_S_Layer) parent_layer, save_wave, block_id, curr_w_table, config);

		return curr_w_table;
	}


///////////////////////////////////////////////////////////////////////////////
// Match methods

	static void lu_s_area__match_rec(
		Lu_S_Area self, 
		Lu_Match_Wave match_wave,
		lu_size rec_id, 
		Lu_Data data, 
		Lu_Match_Config config,
		Lu_W_Match_Processor processor
	)
	{
		Lu_S_Layer_Base layer_base = self->layers[0];
		lu__assert(layer_base);
		lu__assert(layer_base->type == LU_S_LAYER__REC);

		Lu_S_Layer_Rec layer_rec = (Lu_S_Layer_Rec) layer_base;

		//
		// Rec collect and finish
		//

		enum lu_w_rec_state state = lu_s_layer_rec__match(layer_rec, match_wave, rec_id, data, config, processor);

		//
		// Processor
		//

		if (state == LU_W_REC_STATE__COLLECT)
		{
			lu_w_match_processor__reset_results(processor);
		}
		else if (state == LU_W_REC_STATE__COLLECT_AND_FINISH)
		{
			while (lu_w_match_processor__has_items_to_process(processor))
			{
				#ifdef LU__DEEP_DEBUG
				lu__debug("\nPROCESSOR BATCH:");
				lu_w_match_processor__print_symbols(processor);
				#endif 

				lu_w_match_processor__process(processor);
			}

			lu_w_match_processor__prepare_results(processor);
		}
		else 
		{
			lu__assert(false);
		}
	}
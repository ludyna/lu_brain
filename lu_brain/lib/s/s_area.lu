/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// 

	static Lu_S_Area lu_s_area__create(Lu_Config config, lu_size size, enum lu_s_tag tag)
	{
		lu__assert(config);
		lu__assert(size > 0);  
		lu__assert(tag < LU_S_TAG__END);

		size += LU_N_CELL__SPEIAL_CELLS_SKIP;

		Lu_Mem mem = config->s_mem;
		lu__assert(mem);

		Lu_S_Area self = (Lu_S_Area) lu_mem__alloc(mem, sizeof(struct lu_s_area));
		lu__alloc_assert(self);

		self->tag = tag;
		self->config = config;
		self->layers_size = size;
		self->layers_count = 0;

		self->layers = (Lu_S_Layer_Base*) lu_mem__alloc(mem, sizeof(Lu_S_Layer_Base) * size);
		lu__alloc_assert(self->layers);

		return self;
	}

	static void lu_s_area__destroy(Lu_S_Area self)
	{
		lu__assert(self);
		lu__assert(self->config);

		Lu_Mem mem = self->config->s_mem;
		lu__assert(mem);

		lu_mem__free(mem, (lu_p_byte) self->layers);

		self->layers = NULL;

		lu_mem__free(mem, (lu_p_byte) self);

	}

///////////////////////////////////////////////////////////////////////////////
// 

	static Lu_S_Layer_Comp lu_s_area__create_layer_comp(
		Lu_S_Area self, 
		Lu_Config config, 
		Lu_S_Layer_Rec frame, 
		Lu_Rec_Comp_Config rc_config
	)
	{
		lu__assert(self);
		lu__assert(config);
		lu__assert(frame);
		lu__assert(rc_config);
		lu__assert(self->layers_count < LU_S__LAYERS_SIZE);

		Lu_S_Layer_Comp layer = lu_s_layer_comp__create(config, frame, rc_config, self->layers_count);

		lu_s_area__register_layer(self, (Lu_S_Layer_Base) layer);

		return layer;
	}

	static Lu_S_Layer lu_s_area__create_layer(
		Lu_S_Area self,
		Lu_Config config, 
		lu_size children_count,
		lu_size n_w,
		lu_size n_h,
		lu_size n_h_max,
		enum lu_s_tag tag
	)
	{
		lu__assert(self);
		lu__assert(config);
		lu__assert(self->layers_count < LU_S__LAYERS_SIZE);
		lu__assert(n_w > 0);
		lu__assert(n_h > 0);
		lu__assert(n_h_max >= n_h);

		Lu_S_Layer layer = lu_s_layer__create(
			config, 
			self->layers_count, 
			children_count, 
			n_w, 
			n_h, 
			n_h_max,
			tag
		);
	
		lu_s_area__register_layer(self, (Lu_S_Layer_Base) layer);

		return layer;
	}
	
	static Lu_S_Layer_Rec lu_s_area__create_layer_rec(
		Lu_S_Area self,
		Lu_Config config, 
		Lu_Rec rec
	)
	{
		lu__assert(self);
		lu__assert(self->layers_count < LU_S__LAYERS_SIZE);
		lu__assert(config);
		lu__assert(rec);

		Lu_S_Layer_Rec layer = lu_s_layer_rec__create(config, rec, self->layers_count);
		
		lu_s_area__register_layer(self, (Lu_S_Layer_Base) layer); 

		return layer;
	}
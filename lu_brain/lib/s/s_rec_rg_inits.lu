/**
	Copyright Â© 2021 Oleh Ihorovych Novosad 
*/  

	static void lu_s_rec_rg_layers_init(Lu_S_Rec_Rg self)
	{
		lu_user_assert_void(self, "Lu_S_Rec_Rg is NULL");
		lu_user_assert_void(self->layers, "self->layers is NULL");
		lu_assert(self->cell_mem);

		lu_size w = self->cells_w;
		lu_size h = self->cells_h;
		lu_size d = self->cells_d;
		lu_size ix = 0;

		Lu_S_Layer layer 	= &self->layers[ix];

		// Components
		layer = lu_s_layer_base_init(layer, LU_SLT_COMPONENTS, ix, w, h, d);
		lu_user_assert_void(layer, "Cannot init component layer");
		lu_s_cell_mem_cell_3_size_inc(self->cell_mem, lu_s_layer_cells_size(layer));

		++ix;
		d = 1;

		// Pixels 
		layer 	= &self->layers[ix];

		layer = lu_s_layer_base_init(layer, LU_SLT_PIXELS, ix, w, h, d);
		lu_user_assert_void(layer, "Cannot init cell layer");
		lu_s_cell_mem_cell_2_size_inc(self->cell_mem, lu_s_layer_cells_size(layer));

		// Pyras
		--w;
		--h;
		++ix;

		while (w > 0 && h > 0)
		{
			lu_user_assert_void(ix < self->layers_size, "Index error");

			layer = &self->layers[ix];

			layer = lu_s_layer_base_init(layer, LU_SLT_PYRAS, ix, w, h, d);
			lu_user_assert_void(layer, "Cannot init pyra layer");
			lu_s_cell_mem_cell_2_size_inc(self->cell_mem, lu_s_layer_cells_size(layer));

			if (w > 0) --w;
			if (h > 0) --h;
			++ix; 
		}
	}

	static void lu_s_rec_rg_layers_deinit(Lu_S_Rec_Rg self)
	{
		lu_user_assert_void(self, "Lu_S_Rec_Rg is NULL");

		Lu_S_Layer layer;
		for (lu_size i = 0; i < self->layers_size; i++)
		{
			layer 	= &self->layers[i];
			lu_s_layer_base_deinit(layer);
		}
	}

	static void lu_s_rec_rg_components_init(Lu_S_Rec_Rg self)
	{
		lu_user_assert_void(self, "Lu_S_Rec_Rg is NULL");
		lu_user_assert_void(self->layers, "self->layers is NULL");

		if (self->layers_size > 0)
			lu_s_layer_component_cells_init(&self->layers[0], self->cell_mem, &self->v_conf, &self->p_conf);
	}

	static void lu_s_rec_rg_components_deinit(Lu_S_Rec_Rg self)
	{
		lu_user_assert_void(self, "Lu_S_Rec_Rg is NULL");

		lu_s_layer_component_cells_deinit(&self->layers[0], self->cell_mem);
	}

	static void lu_s_rec_rg_pixels_init(Lu_S_Rec_Rg self)
	{
		lu_user_assert_void(self, "Lu_S_Rec_Rg is NULL");
		lu_user_assert_void(self->layers, "self->layers is NULL");

		Lu_S_Layer layer 	= &self->layers[1];
		Lu_S_Layer b_layer 	= &self->layers[0];

		lu_s_layer_pixel_cells_init(layer, b_layer, self->cell_mem, self->cells_d);
	}

	static void lu_s_rec_rg_pixels_deinit(Lu_S_Rec_Rg self)
	{
		lu_user_assert_void(self, "Lu_S_Rec_Rg is NULL");
	
		if (self->layers_size > 1)
			lu_s_layer_pixel_cells_deinit(&self->layers[1], self->cell_mem);
	}

	static void lu_s_rec_rg_pyras_init(Lu_S_Rec_Rg self)
	{
		lu_user_assert_void(self, "Lu_S_Rec_Rg is NULL");

		Lu_S_Layer layer;
		Lu_S_Layer b_layer = NULL;

		for(lu_size ix = 2; ix < self->layers_size; ix++)
		{
			layer 		= &self->layers[ix];
			b_layer 	= &self->layers[ix - 1];

			lu_s_layer_pyra_cells_init(layer, b_layer, self->cell_mem);
		}
	}

	static void lu_s_rec_rg_pyras_deinit(Lu_S_Rec_Rg self)
	{
		lu_user_assert_void(self, "Lu_S_Rec_Rg is NULL");

		for(lu_size i = 0; i < self->layers_size; i++)
		{
			lu_s_layer_pyra_cells_deinit(&self->layers[i], self->cell_mem);
		}
	}
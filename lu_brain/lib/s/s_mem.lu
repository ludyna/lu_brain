/**
	Copyright Â© 2021 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// S_Mem

	static S_Mem s_mem_create(Lu_Brain brain)
	{
		lu_user_assert(brain, "Lu_Brain is NULL");
		lu_user_assert(brain->recs, "Lu_Brain recs is NULL");

		S_Mem self 			= (S_Mem) lu_g_mem_alloc(sizeof(struct s_mem));
		lu_user_assert(self, "Cannot allocate S_Mem");

		self->brain 		= brain;
		self->recs 			= arr_temp_create(arr_size(brain->recs), false);

		return self;
	}

	static void s_mem_destroy(S_Mem self)
	{
		lu_user_assert_void(self, "S_Mem is NULL");

		S_Rec s_rec;
		for(lu_size i = 0; i < arr_count(self->recs); i++)
		{
			s_rec = (S_Rec) arr_get(self->recs, i);

			if (s_rec) 
				s_rec_destroy(s_rec);
		}

		arr_temp_destroy(self->recs);
		lu_g_mem_free((lu_p_byte) self);
	}

	static void s_mem_print_info(S_Mem self)
	{
		lu_user_assert_void(self, "S_Mem is NULL");
		lu_user_assert_void(self->recs, "S_Mem recs is NULL");

 		lu_debug("\n\n-- S_Mem info: ");
 		lu_debug("\n 	S_Rec count: %lu", arr_count(self->recs));

 		S_Rec rec;
 		lu_size i;
 		for(i = 0; i < arr_count(self->recs); i++)
 		{
 			rec = (S_Rec) arr_get(self->recs, i);
 			if (rec) 
 				s_rec_print_info(rec);
 		}
	}

	static void s_mem_rec_create(S_Mem self, Lu_Rec rec)
	{
		lu_size i;
		for (i = 0; i < arr_count(self->recs); i++)
		{
			if (arr_get(self->recs, i) == NULL) return;
		}

		S_Rec s_rec = s_rec_create(self, rec);
		arr_set(self->recs, i, s_rec);
	}

	static void s_mem_rec_destroy(S_Mem self, Lu_Rec rec)
	{
		lu_size i;
		S_Rec s_rec;
		for (i = 0; i < arr_count(self->recs); i++)
		{
			s_rec = (S_Rec) arr_get(self->recs, i);
	
			if (s_rec && s_rec->rec && s_rec->rec->id == rec->id)
			{
				s_rec_destroy(s_rec);
				arr_set(self->recs, i, NULL);
				break;
			}
		}
	}

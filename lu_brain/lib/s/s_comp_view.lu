/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// 

	static inline Lu_S_Comp_View lu_s_comp_view__init(
		Lu_S_Comp_View self, 
		Lu_Res res, 
		enum lu_s_comp_view_type view_type, 
		lu_size width,
		lu_size height,
		lu_value min, 
		lu_value max, 
		lu_size cells_size
	)
	{
		lu__assert(self);
		lu__assert(res);
		lu__assert(res->s_mem);


		self->res 				= res;
		self->view_type 		= view_type;
		self->cells_size  		= cells_size; // value depth in indexes
		self->orig_min 			= min;
		self->orig_max 			= max;
		self->max 				= self->orig_max - self->orig_min;
		self->step 				= self->max / (lu_value) self->cells_size;

		// my robymo tochni znachennia, tomu ce zakomentano
		//self->nsc 				= nsc; //(lu_size) lu_value_round(self->max_val * rec->val_nsc / self->step); // nsc in indexes

	 	// Kroky preobchysleni (vertical)
		self->steps 		= (lu_value*) lu_mem__alloc(self->res->s_mem, sizeof(lu_value) * self->cells_size);
		lu__assert(self->steps);
	
		lu_size i;
		for (i = 0; i < self->cells_size; i++)
			self->steps[i] = (lu_value)i * self->step;

		// w x h x cells_size, empty by default
		// self->cells = (struct n_cell_value***) lu_mem__alloc(
		// 	self->n_mem, 
		// 	sizeof(struct n_cell_value) * width * height * self->cells_size
		// );

		return self;
	}

	static inline void lu_s_comp_view__deinit(Lu_S_Comp_View self)
	{
		lu__assert(self);
		lu__assert(self->res);

		// lu_mem__free(self->n_mem, (lu_p_byte) self->cells);
		lu_mem__free(self->res->s_mem, (lu_p_byte) self->steps);
		
		self->steps = NULL;
	}

	static inline lu_value lu_s_comp_view__norm(Lu_S_Comp_View self, lu_value request)
	{
		lu_value val = request - self->orig_min;
		if (val < 0) val = 0;
		if (val > self->max) val = self->max;

		return val;
	}

	static inline lu_size lu_s_comp_view__ix(Lu_S_Comp_View self, lu_value val)
	{
		return (lu_size) lu_value_round(val / self->step);
	}

	static inline struct lu_size_range lu_s_comp_view__ix_range(Lu_S_Comp_View self, lu_value val, lu_size nsc)
	{
		lu_size orig_i = lu_s_comp_view__ix(self, val);

		long begin, end;

		begin = orig_i - nsc;
		if (begin < 0) begin = 0;

		end = orig_i + nsc;
		if (end > (self->cells_size - 1)) end = self->cells_size - 1; 

		struct lu_size_range r;
		r.begin = (lu_size) begin;
		r.end = (lu_size) end;
		return r;
	}

	static inline lu_value lu_s_comp_view__calc_sig(Lu_S_Comp_View self, lu_size val_step_i, lu_value val)
	{ 
		return 1.0 - lu_value_abs(self->steps[val_step_i] - val) / self->max;
	}

	static inline lu_value lu_s_comp_view__step_norm_dist(Lu_S_Comp_View self)
	{
		return 1.0 / self->cells_size;
	}

///////////////////////////////////////////////////////////////////////////////
// 

	static void lu_s_comp_view__save_data(
		Lu_S_Comp_View self, 
		lu_size wave_id, 
		lu_size z, 
		Lu_Data data, 
		Lu_Process_Config config
	)
	{
		
	}
/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// 

	static inline Lu_S_Comp_View lu_s_comp_view__init(
		Lu_S_Comp_View self, 
		Lu_Res res, 
		enum lu_s_comp_view_type view_type, 
		lu_size width,
		lu_size height,
		lu_value min, 
		lu_value max, 
		lu_size cells_size
	)
	{
		lu__assert(self);
		lu__assert(res);
		lu__assert(res->s_mem);
		lu__assert(res->n_mem);

		self->res 				= res;
		self->view_type 		= view_type;

		lu_comp_calc__init(&self->comp_calc, res->s_mem, min, max, cells_size);
	
		self->n_comp_table = lu_n_comp_table__create(self->res->n_mem, &self->comp_calc, width, height);
		lu__assert(self->n_comp_table);

		return self;
	}

	static inline void lu_s_comp_view__deinit(Lu_S_Comp_View self)
	{
		lu__assert(self);

		lu_n_comp_table__destroy(self->n_comp_table);

		lu_comp_calc__deinit(&self->comp_calc);
		
		self->res = NULL; 
		self->n_comp_table = NULL;
		self->w_space = NULL;
	}

///////////////////////////////////////////////////////////////////////////////
// 

	static void lu_s_comp_view__save_data(
		Lu_S_Comp_View self, 
		Lu_Wave wave, 
		lu_size z, 
		Lu_Data data, 
		Lu_Process_Config config
	)
	{
		lu__assert(self);
		lu__assert( data);
		lu__assert(config);

		lu__assert(self->w_space);
		lu__assert(self->n_comp_table);

		Lu_W_Table w_table = lu_w_space__get_table(self->w_space, wave);

		lu_w_table__save_data(w_table, z, data, config);

		lu_n_comp_table__update(self->n_comp_table, w_table, config);
	}
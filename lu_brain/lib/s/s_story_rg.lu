/**
	Copyright Â© 2021 Oleh Ihorovych Novosad 
*/  

///////////////////////////////////////////////////////////////////////////////
// 


	static Lu_S_Story_Rg lu_s_story_rg_create(Lu_S_Cell_Mem cell_mem, lu_size max_blocks_size, lu_size recs_size)
	{
		lu_assert(cell_mem);

		Lu_S_Story_Rg self = (Lu_S_Story_Rg) lu_g_mem_alloc(sizeof(struct lu_s_story_rg));
		lu_assert(self);
		
		//
		// Allocate Block Layers
		//

		self->cell_mem 			= cell_mem;
		self->max_blocks_size 	= max_blocks_size;
		self->recs_size 		= recs_size;
		self->layers_size 		= max_blocks_size > recs_size ? max_blocks_size : recs_size;	

		self->layers = (struct lu_s_layer*) lu_g_mem_alloc(sizeof(struct lu_s_layer) * self->layers_size);
		lu_assert(self->layers);

		lu_size w = recs_size;
		lu_size h = max_blocks_size;
		lu_size d = 1;
		lu_size ix = 0;
		Lu_S_Layer layer;
		
		//
		// First layer 
		//

		layer 	= &self->layers[ix];

		layer = lu_s_layer_base_init(layer, LU_SLT_STORY, ix, w, h, d);
		lu_assert(layer);
		lu_s_cell_mem_cell_2_size_inc(self->cell_mem, lu_s_layer_cells_size(layer));

		//
		// Create other story layers
		//

		--w;
		--h;
		++ix;

		while (w > 0 && h > 0)
		{
			lu_assert(ix < self->layers_size);

			layer = &self->layers[ix];

			layer = lu_s_layer_base_init(layer, LU_SLT_STORY, ix, w, h, d);
			lu_assert(layer);
			lu_s_cell_mem_cell_2_size_inc(self->cell_mem, lu_s_layer_cells_size(layer));

			if (w > 0) --w;
			if (h > 0) --h;
			++ix; 
		}

		return self;
	}

	static void lu_s_story_rg_destroy(Lu_S_Story_Rg self)
	{
		lu_assert(self);

		// 
		// Layers disconnect 
		//

		lu_s_story_rg_layers_disconnect(self);

		// 
		// Destroy all story layers 
		// 

		for (lu_size i = 0; i < self->layers_size; i++)
			lu_s_layer_base_deinit(&self->layers[i]);

		lu_g_mem_free((lu_p_byte) self->layers);
		lu_g_mem_free((lu_p_byte) self);
	}


///////////////////////////////////////////////////////////////////////////////
// 

	static void lu_s_story_rg_layers_connect(Lu_S_Story_Rg self, Lu_S_Layer last_data_layer)
	{
		lu_assert(self);
		lu_assert(last_data_layer);

		Lu_S_Layer layer;
		Lu_S_Layer b_layer = NULL;
		lu_size ix;

		for(ix = 0; ix < self->layers_size; ix++)
		{
			layer = &self->layers[ix];

			if (ix > 0)
			{
				b_layer = &self->layers[ix - 1];
			}
			else
			{
				// last layer from data layers
				b_layer = last_data_layer;
			}

			lu_s_layer_story_cells_init(layer, b_layer, self->cell_mem);
		}
	}

	static void lu_s_story_rg_layers_disconnect(Lu_S_Story_Rg self)
	{
		lu_assert(self);

		for(lu_size i = 0; i < self->layers_size; i++)
		{
			lu_s_layer_story_cells_deinit(&self->layers[i], self->cell_mem);
		}
	}


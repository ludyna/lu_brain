/**
	Copyright Â© 2021 Oleh Ihorovych Novosad 
*/  

///////////////////////////////////////////////////////////////////////////////
// 


	static Lu_S_Story_Rg lu_s_story_rg_create(lu_size max_blocks_size, lu_size recs_count)
	{
		Lu_S_Story_Rg self = (Lu_S_Story_Rg) lu_g_mem_alloc(sizeof(struct lu_s_story_rg));
		lu_assert(self);

		
		///////////////////////////////////////
		// Allocate Block Layers

		self->max_blocks_size 		= max_blocks_size;
		self->layers_size 	= self->max_blocks_size + 1;	

		self->layers = (struct lu_s_layer*) lu_g_mem_alloc(sizeof(struct lu_s_layer) * self->layers_size);
		lu_user_assert(self->layers, "Cannot allocate story layers");


		// Blocks
		// ix = 0;
		// w = self->layers_size;
		// h = 1;
		// d = 1;

		// while(w > 0)
		// {
		// 	lu_user_assert_void(ix < self->layers_size, "Wrong layer index");

		// 	layer = &self->layers[ix];

		// 	layer = lu_s_layer_base_init(layer, self, LU_SLT_BLOCKS, ix, 1, h, d);
		// 	lu_user_assert_void(layer, "Cannot init layer");
		// 	lu_s_cell_mem_cell_1_size_inc(self->cell_mem, lu_s_layer_cells_size(layer));

		// 	++ix;
		// 	--w;
		// }

		return self;
	}

	static void lu_s_story_rg_destroy(Lu_S_Story_Rg self)
	{
		lu_assert(self);

		lu_s_story_rg_blocks_deinit(self);
		lu_g_mem_free((lu_p_byte) self->layers);
		lu_g_mem_free((lu_p_byte) self);
	}


///////////////////////////////////////////////////////////////////////////////
// 

	static void lu_s_story_rg_blocks_init(Lu_S_Story_Rg self)
	{
		lu_assert(self);

		Lu_S_Layer layer;
		Lu_S_Layer b_layer = NULL;
		lu_size ix;

		for(ix = 0; ix < self->layers_size; ix++)
		{
			layer = &self->layers[ix];

			if (ix > 0)
			{
				b_layer = &self->layers[ix - 1];
			}
			else
			{
				// last layer from data layers
				//b_layer = &self->data_layers[self->data_layers_size - 1];
			}

			lu_s_layer_block_cells_init(layer, b_layer);
		}
	}

	static void lu_s_story_rg_blocks_deinit(Lu_S_Story_Rg self)
	{
		lu_user_assert_void(self, "Lu_S_Rec_Rg is NULL");

		for(lu_size i = 0; i < self->layers_size; i++)
		{
			lu_s_layer_block_cells_deinit(&self->layers[i]);
		}
	}


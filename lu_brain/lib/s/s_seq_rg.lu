/**
	Copyright Â© 2021 Oleh Ihorovych Novosad 
*/  

///////////////////////////////////////////////////////////////////////////////
// 

	static Lu_S_Seq_Rg lu_s_seq_rg_create(Lu_Mem mem, Lu_S_Cell_Mem cell_mem, lu_size recs_size)
	{
		lu_assert(mem);
		lu_assert(cell_mem);

		Lu_S_Seq_Rg self = (Lu_S_Seq_Rg) lu_mem_alloc(mem, sizeof(struct lu_s_seq_rg));
		lu_assert(self);
		
		lu_s_base_rg_init(&self->super, mem, cell_mem);


		


		return self;
	}

	static void lu_s_seq_rg_destroy(Lu_S_Seq_Rg self)
	{
		lu_assert(self);

		// 
		// Destroy all seq layers 
		// 

		for (lu_size i = 0; i < self->seq_layers_size; i++)
			lu_s_seq_layer_deinit(&self->seq_layers[i]);

		lu_mem_free((lu_p_byte) self->layers);
		lu_mem_free((lu_p_byte) self);
	}


///////////////////////////////////////////////////////////////////////////////
// 

	static void lu_s_seq_rg_layers_connect(Lu_S_Seq_Rg self)
	{
		lu_assert(self);

		Lu_S_Layer layer;
		Lu_S_Layer b_layer = NULL;
		lu_size ix;

		for(ix = 1; ix < self->layers_size; ix++)
		{
			layer = &self->layers[ix];
			b_layer = &self->layers[ix - 1];
		
			lu_s_layer_seq_cells_init(layer, b_layer, self->cell_mem);
		}
	}

	static void lu_s_seq_rg_layers_disconnect(Lu_S_Seq_Rg self)
	{
		lu_assert(self);

		for(lu_size i = 0; i < self->layers_size; i++)
		{
			lu_s_layer_seq_cells_deinit(&self->layers[i], self->cell_mem);
		}
	}


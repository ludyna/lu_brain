/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// 

	static inline Lu_S_Layer_Base lu_s_layer_base__init(
		Lu_S_Layer_Base self, 
		Lu_S_Layer_Base_Config config, 
		Lu_S_Layer_Base p
	)
	{
		config = lu_s_layer_base_config__validate(config);
		lu__assert(config);

		self->s_mem = config->s_mem;

		self->type = config->type;
		self->level = config->level;
		self->p = p;
		self->c = NULL;
		self->destroy = config->destroy;

		self->n_table = NULL;
		self->w_table = NULL;

		return self;
	}

	static inline Lu_S_Layer_Base lu_s_layer_base__init_with_one_c_slot(
		Lu_S_Layer_Base self, 
		Lu_S_Layer_Base_Config config, 
		Lu_S_Layer_Base p
	)
	{
		self = lu_s_layer_base__init(self, config, p);
		lu__assert(self);
		
		self->c = (Lu_Slot_Base) lu_slot_one__create(self->s_mem, NULL);
		lu__assert(self->c);

		return self;
	}
	
	static inline Lu_S_Layer_Base lu_s_layer_base__init_with_arr_c_slot(
		Lu_S_Layer_Base self, 
		Lu_S_Layer_Base_Config config, 
		Lu_S_Layer_Base p,
		lu_size children_count
	)
	{
		self = lu_s_layer_base__init(self, config, p);
		lu__assert(self);
 
		self->c = (Lu_Slot_Base) lu_slot_arr__create(self->s_mem, children_count, true);
		lu__assert(self->c);

		return self;
	}

	static inline void lu_s_layer_base__deinit(Lu_S_Layer_Base self)
	{
		lu__assert(self);
		lu__assert(self->s_mem);

		if (self->c)
		{
			self->c->destroy(self->c, self->s_mem);
			self->c = NULL;
		}

		self->p = NULL;
	}

///////////////////////////////////////////////////////////////////////////////
// 

	static void lu_s_layer_base__connect(Lu_S_Layer_Base p, Lu_S_Layer_Base c)
	{
		lu__assert(p);
		lu__assert(c);

		c->p = p;
		
		lu__assert(p->c);

		Lu_Slot_One one;
		Lu_Slot_Arr arr;

		switch(p->c->type)
		{
			case LU_ST__ONE :
				one = (Lu_Slot_One) p->c;
				lu__assert(one->item == NULL);
				one->item = (lu_p_void) c;
				break;
			case LU_ST__ARR :
				arr = (Lu_Slot_Arr) p->c;
				Lu_Arr items = arr->items;

				lu__assert(items);
				lu_arr__append(items, (lu_p_void) c);
				break;
			default:
				lu__assert(0);
		}
	}


	static void lu_s_layer_base__recursive_destroy(Lu_S_Layer_Base self)
	{
		lu__assert(self);
		lu__assert(self->s_mem);
		
		if (self->c)
		{
			if (self->c->type == LU_ST__ONE)
			{
				Lu_Slot_One one = (Lu_Slot_One) self->c;

				if (one->item)
				{
					lu_s_layer_base__recursive_destroy((Lu_S_Layer_Base) one->item);
				}
			}
			else if (self->c->type == LU_ST__ARR)
			{
				Lu_Slot_Arr slot_arr = (Lu_Slot_Arr) self->c;

				if (slot_arr->items)
				{

					Lu_Arr arr = slot_arr->items;

					for (lu_size i = 0; i < lu_arr__count(arr); i++)
					{
						Lu_S_Layer_Base c_layer = (Lu_S_Layer_Base) lu_arr__get(arr, i);
						if (c_layer)
						{
							lu_s_layer_base__recursive_destroy(c_layer);
						}
					}
				}
			}
			else
			{
				lu__assert(0);
			}
		}

		lu__assert(self->destroy);
		self->destroy(self);
	}


///////////////////////////////////////////////////////////////////////////////
// n_table

	static void lu_s_layer_base__create_n_table(
		Lu_S_Layer_Base self, 
		Lu_Mem n_mem, 
		lu_size size_in_cells, 
		lu_byte cell_type
	);

	static void lu_s_layer_base__destroy_n_table(Lu_S_Layer_Base self);

///////////////////////////////////////////////////////////////////////////////
// w_tables

	static void lu_s_layer_base__create_w_tables(
		Lu_S_Layer_Base self, 
		Lu_Mem w_mem
	);

	static void lu_s_layer_base__destroy_w_tables(Lu_S_Layer_Base self);
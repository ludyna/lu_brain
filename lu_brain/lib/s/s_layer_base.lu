/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// 

	static inline Lu_S_Layer_Base lu_s_layer_base__init(
		Lu_S_Layer_Base self, 
		Lu_S_Layer_Base p,
		Lu_Config config,
		enum lu_s_layer_type type,
		lu_size level,
		void (*destroy)(Lu_S_Layer_Base),
		lu_size n_w,
		lu_size n_h,
		lu_byte cell_type
	)
	{
		lu__assert(config);
		lu__assert(config->s_mem);
		lu__assert(config->n_mem);

		self->s_mem = config->s_mem;

		self->type = type;
		self->level = level;
		self->p = p;
		self->c = NULL;
		self->destroy = destroy;

		if (n_w > 0 && n_h > 0)
		{
			self->n_table = NULL; //lu_n_table__create(config->n_mem, n_width, n_height, cell_type, Lu_Config);
		}
		else
		{
			self->n_table = NULL; 
		}

		self->w_tables = lu_arr__create(config->w_mem, config->w_waves_size, false);
		lu__assert(self->w_tables);

		Lu_W_Table w_table;
		for (lu_size i = 0; i < lu_arr__size(self->w_tables); i++)
		{
			w_table = lu_w_table__create(config, 1, 1);
			lu__assert(w_table);
			
			lu_arr__set(self->w_tables, i, (lu_p_void) w_table);
		}

		return self;
	}

	static inline Lu_S_Layer_Base lu_s_layer_base__init_with_one_c_slot(
		Lu_S_Layer_Base self, 
		Lu_S_Layer_Base p,
		Lu_Config config,
		enum lu_s_layer_type type,
		lu_size level,
		void (*destroy)(Lu_S_Layer_Base),
		lu_size n_w,
		lu_size n_h,
		lu_byte cell_type
	)
	{
		self = lu_s_layer_base__init(self, p, config, type, level, destroy, n_w, n_h, cell_type);
		lu__assert(self);
		
		self->c = (Lu_Slot_Base) lu_slot_one__create(self->s_mem, NULL);
		lu__assert(self->c);

		return self;
	}
	
	static inline Lu_S_Layer_Base lu_s_layer_base__init_with_arr_c_slot(
		Lu_S_Layer_Base self, 
		Lu_S_Layer_Base p,
		lu_size children_count,
		Lu_Config config,
		enum lu_s_layer_type type,
		lu_size level,
		void (*destroy)(Lu_S_Layer_Base),
		lu_size n_w,
		lu_size n_h,
		lu_byte cell_type
	)
	{
		self = lu_s_layer_base__init(self, p, config, type, level, destroy, n_w, n_h, cell_type);
		lu__assert(self);
 
		self->c = (Lu_Slot_Base) lu_slot_arr__create(self->s_mem, children_count, true);
		lu__assert(self->c);

		return self;
	}

	static inline void lu_s_layer_base__deinit(Lu_S_Layer_Base self)
	{
		lu__assert(self);
		lu__assert(self->s_mem);

		if (self->c)
		{
			self->c->destroy(self->c, self->s_mem);
			self->c = NULL;
		}

		Lu_W_Table w_table;
		for (lu_size i = 0; i < lu_arr__count(self->w_tables); i++)
		{
			w_table = (Lu_W_Table) lu_arr__get(self->w_tables, i);
			lu_w_table__destroy(w_table);
		}

		if (self->n_table)
			lu_n_table__destroy(self->n_table);

		lu_arr__destroy(self->w_tables);

		self->p = NULL;
	}

///////////////////////////////////////////////////////////////////////////////
// 

	static void lu_s_layer_base__connect(Lu_S_Layer_Base p, Lu_S_Layer_Base c)
	{
		lu__assert(p);
		lu__assert(c);

		c->p = p;
		
		lu__assert(p->c);

		Lu_Slot_One one;
		Lu_Slot_Arr arr;

		switch(p->c->type)
		{
			case LU_SLOT__ONE :
				one = (Lu_Slot_One) p->c;
				lu__assert(one->item == NULL);
				one->item = (lu_p_void) c;
				break;
			case LU_SLOT__ARR :
				arr = (Lu_Slot_Arr) p->c;
				Lu_Arr items = arr->items;

				lu__assert(items);
				lu_arr__append(items, (lu_p_void) c);
				break;
			default:
				lu__assert(0);
		}
	}


	static void lu_s_layer_base__recursive_destroy(Lu_S_Layer_Base self)
	{
		lu__assert(self);
		lu__assert(self->s_mem);
		
		if (self->c)
		{
			if (self->c->type == LU_SLOT__ONE)
			{
				Lu_Slot_One one = (Lu_Slot_One) self->c;

				if (one->item)
				{
					lu_s_layer_base__recursive_destroy((Lu_S_Layer_Base) one->item);
				}
			}
			else if (self->c->type == LU_SLOT__ARR)
			{
				Lu_Slot_Arr slot_arr = (Lu_Slot_Arr) self->c;

				if (slot_arr->items)
				{

					Lu_Arr arr = slot_arr->items;

					for (lu_size i = 0; i < lu_arr__count(arr); i++)
					{
						Lu_S_Layer_Base c_layer = (Lu_S_Layer_Base) lu_arr__get(arr, i);
						if (c_layer)
						{
							lu_s_layer_base__recursive_destroy(c_layer);
						}
					}
				}
			}
			else
			{
				lu__assert(0);
			}
		}

		lu__assert(self->destroy);
		self->destroy(self);
	}


///////////////////////////////////////////////////////////////////////////////
// n_table

	static void lu_s_layer_base__create_n_table(
		Lu_S_Layer_Base self, 
		Lu_Mem n_mem, 
		lu_size size_in_cells, 
		lu_byte cell_type
	);

	static void lu_s_layer_base__destroy_n_table(Lu_S_Layer_Base self);


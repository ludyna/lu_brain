/**
	Copyright Â© 2021 Oleh Ihorovych Novosad 
*/


///////////////////////////////////////////////////////////////////////////////
// Lu_S Create & Destroy

	static Lu_S lu_s_create(Lu_Brain brain)
	{
		lu_assert(brain);
		lu_assert(brain->recs);

		Lu_S self = (Lu_S) lu_g_mem_alloc(sizeof(struct lu_s));
		lu_assert(self);

		self->brain = brain;

		// 
		// Cell_Mem
		//

		self->cell_mem = lu_s_cell_mem_create(lu_g_mem);
		lu_assert(self->cell_mem);

		//
		// Create Rec_Rgs
		//

		self->recs = lu_arr_temp_create(lu_arr_count(brain->recs), false);
		lu_assert(self->recs);

		lu_size i; 
		Lu_Rec rec;
		Lu_S_Rec_Rg rec_rg;
		for (i = 0; i < lu_arr_count(brain->recs); i++)
		{
			rec = (Lu_Rec) lu_arr_get(brain->recs, i);
			lu_assert(rec);

			rec_rg = lu_s_rec_rg_create(rec, self->cell_mem);
			lu_assert(rec_rg);

			lu_arr_set(self->recs, i, rec_rg);
		}

		//
		// Create Seq_Rg
		//

		self->seq = lu_s_seq_rg_create(
			self->cell_mem, 
			lu_arr_count(brain->recs)
		);
		lu_assert(self->seq);

		//
		// Create Story_Rg
		//

		self->story = lu_s_story_rg_create(
			self->cell_mem,
		);
		lu_assert(self->story);

		//
		// Lu_S_Cell_Mem cells allocation
		//

		lu_s_cell_mem_alloc_cells(self->cell_mem);

		//
		// Assign cells and connect rec_rg layers 
		//

		Lu_S_Layer b_layer;
		for (i = 0; i < lu_arr_count(self->recs); i++)
		{
			rec_rg = (Lu_S_Rec_Rg) lu_arr_get(self->recs, i);
			lu_assert(rec_rg);

			b_layer = lu_s_rec_rg_connect_layers(rec_rg);

			lu_s_connect_rec_rg_to_seq_rg(self, b_layer, i);
		}

		//
		// Assign cells and connect seq_rg layers
		// 

		lu_s_seq_rg_layers_connect(self->seq);

		//
		// Assign cells and connect seq_rgs to story_rg
		//

		lu_s_connect_seq_rg_to_story_rg(self);

		return self;
	}

	static void lu_s_destroy(Lu_S self)
	{
		lu_user_assert_void(self, "Lu_S is NULL");

		lu_s_seq_rg_destroy(self->seq);

		Lu_S_Rec_Rg rec_rg;
		for(lu_size i = 0; i < lu_arr_count(self->recs); i++)
		{
			rec_rg = (Lu_S_Rec_Rg) lu_arr_get(self->recs, i);

			if (rec_rg) 
				lu_s_rec_rg_destroy(rec_rg);
		}

		lu_arr_temp_destroy(self->recs);

		lu_s_cell_mem_destroy(self->cell_mem);

		lu_g_mem_free((lu_p_byte) self);
	}

///////////////////////////////////////////////////////////////////////////////
// Lu_S Methods

	static void lu_s_print_info(Lu_S self)
	{
		lu_user_assert_void(self, "Lu_S is NULL");
		lu_user_assert_void(self->recs, "Lu_S recs is NULL");

 		lu_debug("\n\n-- Lu_S info: ");
 		lu_debug("\n 	Lu_S_Rec_Rg count: %lu", lu_arr_count(self->recs));

 		Lu_S_Rec_Rg rec;
 		lu_size i;
 		for(i = 0; i < lu_arr_count(self->recs); i++)
 		{
 			rec = (Lu_S_Rec_Rg) lu_arr_get(self->recs, i);
 			if (rec) 
 				lu_s_rec_rg_print_info(rec);
 		}
	}

/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/


///////////////////////////////////////////////////////////////////////////////
// Lu_S Create & Destroy

	static Lu_S lu_s__create_intersected_squares_cortex(
		Lu_Config config, 
		Lu_Arr recs
	)
	{
		lu__assert(config);
		lu__assert(recs);
		lu__assert(lu_arr__count(recs) > 0);

		Lu_S self = (Lu_S) lu_mem__alloc(config->s_mem, sizeof(struct lu_s));
		lu__assert(self);

		Lu_Config v_config = lu_config__validate(config);
		lu__assert(v_config);

		self->config = v_config;

		lu_size i;

		// (!!) This is important. We start areas ixs from LU_N_AREA__SPECIAL_AREA_SKIP, 
		// so union lu_n_addr.value = 0 will be reserved as "NULL" cell. 
		// This way will not need "special cells", instead we can refer to non existent special layers.
		// It will save memory and will make code more straightforward.
		// To form addr of special cell we can use area_ix from < LU_N_AREA__SPECIAL_AREA_SKIP, 
		// and appropriate x and y to form column_ix. cell_x can be 0.
		self->areas_size = self->config->s_areas_size;
		self->areas = (Lu_S_Area*) lu_mem__alloc(v_config->s_mem, sizeof(Lu_S_Area) * self->areas_size);
		lu__alloc_assert(self->areas);

		self->areas_count = LU_N_AREA__SPECIAL_AREA_SKIP;

		for (i = 0; i < LU_N_AREA__SPECIAL_AREA_SKIP; i++)
		{
			self->areas[i] = NULL;
		}

		self->tag_to_area = (Lu_S_Area*) lu_mem__alloc(v_config->s_mem, sizeof(Lu_S_Area) * LU_S_TAG__END);
		lu__alloc_assert(self->tag_to_area);

		for (i = 0; i < LU_S_TAG__END; i++)
		{
			self->tag_to_area[i] = NULL;
		}

		self->v_recs = lu_arr__create(config->s_mem, lu_arr__count(recs), true);
		lu__assert(self->v_recs);

		Lu_Rec rec;
		Lu_S_Map_Frame frame_map;
		Lu_S_Map_Story story_map;
		Lu_S_Layer_Rec frame;

		story_map = lu_s_map_story__create(lu_arr__count(recs), config); 
		lu__assert(story_map);

		lu_s_map_base__make_story_fractal((Lu_S_Map_Base) story_map, story_map->recs_count, self);

		Lu_S_Layer_Base recs_base = lu_s_map_base__get_base((Lu_S_Map_Base) story_map);
		lu__assert(recs_base);

		Lu_S_Layer_Base frame_apex;
		for (i = 0; i < lu_arr__count(recs); i++)
		{
			rec = (Lu_Rec) lu_arr__get(recs, i);
			lu__assert(rec);

			frame_map = lu_s_map_frame__create(rec, (Lu_S_Map_Base) story_map, config);
			lu__assert(frame_map->super.type == LU_S_MAP__FRAME);
			lu__assert(frame_map);

			lu_s_map_base__make_rec_fractal((Lu_S_Map_Base) frame_map, frame_map->rec, self);

			frame = lu_s_map_base__get_frame((Lu_S_Map_Base) frame_map);
			lu__assert(frame);

			// save pointer to frame
			lu_arr__set(self->v_recs, i, (lu_p_void) frame);

			// connect layers
			frame_apex = lu_s_map_base__get_apex((Lu_S_Map_Base) frame_map);
			lu__assert(frame_apex);

			lu_s_layer_base__connect(recs_base, frame_apex);

			// connect maps
			lu_s_map_base__connect((Lu_S_Map_Base) story_map, (Lu_S_Map_Base) frame_map);
		}

		self->fractal = (Lu_S_Map_Base) story_map;

		return self;
	}

	static void lu_s__destroy(Lu_S self)
	{
		lu__assert(self);
		lu__assert(self->config);

		//
		// fractals
		//

		if (self->fractal)
		{
			Lu_S_Layer_Base layer_base = lu_s_map_base__get_apex(self->fractal);

			if (layer_base)
			{
				lu__assert(layer_base->destroy);

				lu_s_layer_base__recursive_destroy(layer_base);
			}

			lu_s_map_base__recursive_destroy(self->fractal);
		} 

		//
		// tag_to_area
		// 
		lu__assert(self->tag_to_area);
		lu_mem__free(self->config->s_mem, (lu_p_byte) self->tag_to_area);
		self->tag_to_area = NULL;

		//
		// areas
		// 
		lu__assert(self->areas);
		Lu_S_Area area;
		for (lu_size i = LU_N_AREA__SPECIAL_AREA_SKIP; i < self->areas_count; i++)
		{
			area = lu_s__get_area(self, i);
			lu__assert(area);

			lu_s_area__destroy(area);
		}

		lu_mem__free(self->config->s_mem, (lu_p_byte) self->areas);
		self->areas = NULL;

		//
		// v_recs
		// 
		if (self->v_recs)
			lu_arr__destroy(self->v_recs);


		lu_mem__free(self->config->s_mem, (lu_p_byte) self);
	}

///////////////////////////////////////////////////////////////////////////////
// 

	static inline Lu_S_Area lu_s__create_area(Lu_S self, Lu_Config config, lu_size size, enum lu_s_tag tag)
	{
		lu__assert(self);
		lu__assert(config);

		Lu_S_Area area = lu_s_area__create(config, self->areas_count, size, tag);

		return lu_s__register_area(self, area);
	}

///////////////////////////////////////////////////////////////////////////////
// 

	static void lu_s__print_info(Lu_S self)
	{
		lu__assert(self);

		Lu_S_Area area;
		lu__debug("\nLu_S Areas: ");
		for (lu_size i = LU_N_AREA__SPECIAL_AREA_SKIP; i < self->areas_count; i++)
		{
			area = self->areas[i];

			if (area == NULL) break;

			lu_s_area__print(area);
		}

	}
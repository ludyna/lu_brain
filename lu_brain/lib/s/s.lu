/**
	Copyright Â© 2021 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// Lu_S

	static Lu_S s_mem_create(Lu_Brain brain)
	{
		lu_user_assert(brain, "Lu_Brain is NULL");
		lu_user_assert(brain->recs, "Lu_Brain recs is NULL");

		Lu_S self 			= (Lu_S) lu_g_mem_alloc(sizeof(struct lu_s));
		lu_user_assert(self, "Cannot allocate Lu_S");

		self->brain 		= brain;
		self->recs 			= lu_arr_temp_create(lu_arr_size(brain->recs), false);

		return self;
	}

	static void s_mem_destroy(Lu_S self)
	{
		lu_user_assert_void(self, "Lu_S is NULL");

		Lu_S_Rec_Layer lu_s_rec_layer;
		for(lu_size i = 0; i < lu_arr_count(self->recs); i++)
		{
			lu_s_rec_layer = (Lu_S_Rec_Layer) lu_arr_get(self->recs, i);

			if (lu_s_rec_layer) 
				lu_s_rec_layer_destroy(lu_s_rec_layer);
		}

		lu_arr_temp_destroy(self->recs);
		lu_g_mem_free((lu_p_byte) self);
	}

	static void s_mem_print_info(Lu_S self)
	{
		lu_user_assert_void(self, "Lu_S is NULL");
		lu_user_assert_void(self->recs, "Lu_S recs is NULL");

 		lu_debug("\n\n-- Lu_S info: ");
 		lu_debug("\n 	Lu_S_Rec_Layer count: %lu", lu_arr_count(self->recs));

 		Lu_S_Rec_Layer rec;
 		lu_size i;
 		for(i = 0; i < lu_arr_count(self->recs); i++)
 		{
 			rec = (Lu_S_Rec_Layer) lu_arr_get(self->recs, i);
 			if (rec) 
 				lu_s_rec_layer_print_info(rec);
 		}
	}

	static void s_mem_rec_create(Lu_S self, Lu_Rec rec)
	{
		lu_size i;
		for (i = 0; i < lu_arr_count(self->recs); i++)
		{
			if (lu_arr_get(self->recs, i) == NULL) return;
		}

		Lu_S_Rec_Layer lu_s_rec_layer = lu_s_rec_layer_create(self, rec);
		lu_arr_set(self->recs, i, lu_s_rec_layer);
	}

	static void s_mem_rec_destroy(Lu_S self, Lu_Rec rec)
	{
		lu_size i;
		Lu_S_Rec_Layer lu_s_rec_layer;
		for (i = 0; i < lu_arr_count(self->recs); i++)
		{
			lu_s_rec_layer = (Lu_S_Rec_Layer) lu_arr_get(self->recs, i);
	
			if (lu_s_rec_layer && lu_s_rec_layer->rec && lu_s_rec_layer->rec->id == rec->id)
			{
				lu_s_rec_layer_destroy(lu_s_rec_layer);
				lu_arr_set(self->recs, i, NULL);
				break;
			}
		}
	}

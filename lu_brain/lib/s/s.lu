/**
	Copyright Â© 2021 Oleh Ihorovych Novosad 
*/


///////////////////////////////////////////////////////////////////////////////
// Lu_S Create & Destroy

	static Lu_S lu_s__create(Lu_Mem mem, struct lu_space_config config, Lu_Arr recs)
	{
		lu__assert(mem);
		lu__assert(recs);
		lu__assert(lu_arr__count(recs) > 0);

		Lu_S self = (Lu_S) lu_mem__alloc(mem, sizeof(struct lu_s));
		lu__assert(self);

		Lu_Space_Config v_config = lu_space_config__validate(&config);
		lu__assert(v_config);

		self->config = *v_config;
		self->mem = mem;

		//
		// Cell_Mem_Config
		//

		// struct lu_s_layer_mem_config cell_mem_config;

		// lu_s_cell_mem_config__init(&cell_mem_config);

		//
		// 
		//

		lu__assert(self->config.frames_size >= lu_arr__count(recs));

		self->frames = lu_arr__create(mem, self->config.frames_size, true);
		lu__assert(self->frames);

		self->apexes = lu_arr__create(mem, self->config.apexes_size, true);
		lu__assert(self->apexes);


		lu_s__create_story_fractal(self->mem, NULL, self->apexes, self->frames, recs);
	
		// we start apexes from frame, since 

		return self;
	}

	static void lu_s__destroy(Lu_S self)
	{
		lu__assert(self);
		lu__assert(self->mem);

		if (self->apexes) 
		{

			lu_size apexes_count = lu_arr__count(self->apexes);

			Lu_Slot_Base apex_base;

			if (apexes_count)
			{
				//
				// Destroy s fractal
				//

				apex_base = (Lu_Slot_Base) lu_arr__last(self->apexes);
				lu__assert(apex_base);

				// Last one should be always SINGLE apex
				lu__assert(apex_base->type == LU_ST_ONE);

				Lu_Slot_One apex = (Lu_Slot_One) apex_base;
				lu__assert(apex->item);

				Lu_S_Layer_Base layer_base = (Lu_S_Layer_Base) apex->item;

				// Last layer should be always LU_S_LT_LAYER
				lu__assert(layer_base->type == LU_S_LT_LAYER);

				Lu_S_Layer layer = (Lu_S_Layer) layer_base;

				lu_s__destroy_fractal(self->mem, layer);
			}

			//
			// Destroy apexes
			//

			for (lu_size i = 0; i < apexes_count; i++)
			{
				apex_base = (Lu_Slot_Base) lu_arr__get(self->apexes, i); 
				lu__assert(apex_base);
				lu__assert(apex_base->destroy);

				apex_base->destroy(apex_base, self->mem);
			}

			//
			// Destroy array
			//

			lu_arr__destroy(self->apexes);
		}

		if (self->frames)
			lu_arr__destroy(self->frames);

		lu_mem__free(self->mem, (lu_p_byte) self);
	}

///////////////////////////////////////////////////////////////////////////////
// Lu_S Apexes

	static inline void lu_s__axpexes_append(Lu_Arr apexes, Lu_Mem mem, Lu_S_Layer_Base layer)
	{
		//Lu_S_Apex_Single apex = lu_s_apex_single__create(mem, 
	}

///////////////////////////////////////////////////////////////////////////////
// Lu_S Fractals
//
// User actions must be done to increase layers in levels
// For example, we do not allow to increase layer frames
// To increase recs we need to add rec
// To increase seq we need to add time frame
// To increase event we need to add event
// To increase scene we need to add scene
// To increase story we need to add story, etc.
//
// "Minimal" start:
//
// 		level3, story(vertically 1-n4)
// 		level2, scene(vertically 1-n3)
// 		level1, event (vertically 1-n2)
// 		layer seq (vertically 1-n1)
// 		layer recs (vertically rec_count)
// 		layer frames (vertically w Y h)
// 		frame(1)
// 		comp1 comp2 comp3 (horizontally comp_count or d)
//
// 
//
// 		layer seq (sv: seq_count, sh: 1, nh: n)
// 		layer recs (sv: rec_count)
// 		layer frames/pixels (sv: (w Y h), sh: 1, nh: n)
// 		omp1 comp2 comp3 (sv: 1, sh: comp_count or d, n: w x h)
//
//
//		|  
//		| layer seq: sv: seq_count (for min fractal seq_count = 1)
//		|
//		- (we could do //// sh: seq_count but we want seqs be independent of seq position
//		|
//		| layer recs: recs_count
//		|
//		-
//	  / / / / frame (sh: recs_count, here n data is totally independent of each other, thats why sh: recs_count)
//	  | | | |
//	  | | | | (w Y h)i, where i is rec id
//	  | | | |
//	  / . . \
//	 /       \
//	/         \
// / / /      \ \ \ (sv 1, sh: comp_count, n independent of each other)

	static void lu_s__create_story_fractal(Lu_Mem mem, Lu_S_Layer p, Lu_Arr apexes, Lu_Arr frames, Lu_Arr recs)
	{  
		lu__assert(mem);
		lu__assert(apexes);
		lu__assert(frames);
		lu__assert(recs);

		Lu_S_Layer layer = lu_s_layer__create(mem, 7);
		lu__assert(layer);

		Lu_Slot_One slot = lu_slot_one__create(mem, (lu_p_void) layer);
		lu__assert(slot);

		lu_arr__append(apexes, (lu_p_void) slot);

		if (p)
			lu_s_layer__connect(p, layer);

		//lu_s__create_scene_fractal(mem, layer, apexes, frames, recs);
	}


	static void lu_s__create_scene_fractal(Lu_Mem mem, Lu_S_Layer p, Lu_Arr apexes, Lu_Arr frames, Lu_Arr recs)
	{
		lu__assert(mem);
		lu__assert(apexes);
		lu__assert(frames);
		lu__assert(recs);

		Lu_S_Layer layer = lu_s_layer__create(mem, 6);

		if (p)
			lu_s_layer__connect(p, layer);

		lu_arr__append(apexes, (lu_p_void) layer);

		lu_s__create_event_fractal(mem, layer, apexes, frames, recs);
	}

	static void lu_s__create_event_fractal(Lu_Mem mem, Lu_S_Layer p, Lu_Arr apexes, Lu_Arr frames, Lu_Arr recs)
	{
		lu__assert(mem);
		lu__assert(apexes);
		lu__assert(frames);
		lu__assert(recs);

		Lu_S_Layer layer = lu_s_layer__create(mem, 5);
		lu__assert(layer);

		if (p)
			lu_s_layer__connect(p, layer);

		lu_arr__append(apexes, (lu_p_void) layer);

		lu_s__create_seq_fractal(mem, layer, apexes, frames, recs);
	}

	static void lu_s__create_seq_fractal(Lu_Mem mem, Lu_S_Layer p, Lu_Arr apexes, Lu_Arr frames, Lu_Arr recs)
	{
		lu__assert(mem);
		lu__assert(apexes);
		lu__assert(frames);
		lu__assert(recs);

		Lu_S_Layer layer = lu_s_layer__create(mem, 4);
		lu__assert(layer);

		if (p)
			lu_s_layer__connect(p, layer);

		lu_arr__append(apexes, (lu_p_void) layer);

		lu_s__create_rec_fractal(mem, layer, apexes, frames, recs);
	}

	static void lu_s__create_rec_fractal(Lu_Mem mem, Lu_S_Layer p, Lu_Arr apexes, Lu_Arr frames, Lu_Arr recs)
	{
		lu__assert(mem);
		lu__assert(apexes);
		lu__assert(frames);
		lu__assert(recs);
 
		// lu_size i;
		// lu_size count = lu_arr__count(recs);
		// Lu_S_Layer layer = NULL;
		// Lu_S_Layer prev = p;

		// for(i = 0; i < count; i++)
		// {
 	// 		layer = lu_s_layer__create(mem, 3);
 	// 		lu__assert(layer);

		// 	if (prev)
		// 		lu_s_layer__connect(prev, layer);

		// 	// Only first one is apex
		// 	if (i == 0)
		// 		lu_arr__append(apexes, (lu_p_void) layer);

		// 	prev = layer;
		// }

		// lu_s__create_frame_fractal(mem, layer, apexes, frames, recs);
	}  

	static void lu_s__create_frame_fractal(Lu_Mem mem, Lu_S_Layer p, Lu_Arr apexes, Lu_Arr frames, Lu_Rec rec)
	{

	}

	static void lu_s__create_component_fractal(Lu_Mem mem, Lu_S_Frame_Layer p, Lu_Arr apexes, Lu_Rec rec)
	{

	}

	static void lu_s__destroy_fractal(Lu_Mem mem, Lu_S_Layer layer)
	{
		
	}

	static Lu_S_Layer_Base lu_s__create_vert_layers(
		Lu_S self, 
		enum lu_s_layer_type layer_type, 
		lu_size level, 
		lu_size count
	)
	{

	}


///////////////////////////////////////////////////////////////////////////////
// 


	static void lu_s__print_info(Lu_S self)
	{
		// lu__user_assert_void(self, "Lu_S is NULL");
		// lu__user_assert_void(self->recs, "Lu_S recs is NULL");

 	// 	lu__debug("\n\n-- Lu_S info: ");
 	// 	lu__debug("\n 	Lu_S_Rec_Rg count: %lu", lu_arr__count(self->recs));

 	// 	Lu_S_Rec_Rg rec;
 	// 	lu_size i;
 	// 	for(i = 0; i < lu_arr__count(self->recs); i++)
 	// 	{
 	// 		rec = (Lu_S_Rec_Rg) lu_arr__get(self->recs, i);
 	// 		if (rec) 
 	// 			lu_s_rec_rg__print_info(rec);
 	// 	}
	}

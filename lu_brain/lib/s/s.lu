/**
	Copyright Â© 2021 Oleh Ihorovych Novosad 
*/


///////////////////////////////////////////////////////////////////////////////
// Lu_S Create & Destroy

	static Lu_S lu_s__create(Lu_Mem mem, struct lu_space_config config, Lu_Arr recs)
	{
		lu__assert(mem);
		lu__assert(recs);
		lu__assert(lu_arr__count(recs) > 0);

		Lu_S self = (Lu_S) lu_mem__alloc(mem, sizeof(struct lu_s));
		lu__assert(self);

		Lu_Space_Config v_config = lu_space_config__validate(&config);
		lu__assert(v_config);

		self->config = *v_config;
		self->mem = mem;

		//
		// Cell_Mem_Config
		//

		// struct lu_s_layer_mem_config cell_mem_config;

		// lu_s_cell_mem_config__init(&cell_mem_config);

		//
		// 
		//

		lu__assert(self->config.frames_size >= lu_arr__count(recs));

		self->frames = lu_arr__create(mem, self->config.frames_size, true);
		lu__assert(self->frames);

		lu_size i;
		Lu_S_Frame_Layer frame;
		for (i = 0; i < lu_arr__count(recs); i++)
		{
			Lu_Rec lu_rec = (Lu_Rec) lu_arr__get(recs, i);
			lu__assert(lu_rec);

			frame = lu_s_frame_layer__create(mem, lu_rec);
			lu_arr__append(self->frames, frame);
		}

		// "Minimal" start:

		// level3, story(vertically 1-n4)
		// level2, scene(vertically 1-n3)
		// level1, event (vertically 1-n2)
		// layer seq/time (vertically 1-n1)
		// layer recs (vertically rec_count)
		// layer frames (vertically w Y h)
		// frame(vert 1)
		// comp1 comp2 comp3 (vert 1, horizontally comp_count or d)

		// User actions must be done to increase layers in levels
		// For example, we do not allow to increase layer frames
		// To increase recs we need to add rec
		// To increase seq we need to add time frame
		// To increase event we need to add event
		// To increase scene we need to add scene
		// To increase story we need to add story, etc.

		self->apexes = lu_arr__create(mem, self->config.apexes_size, true);
		lu__assert(self->apexes);

		return self;
	}

	static void lu_s__destroy(Lu_S self)
	{
		lu__assert(self);
		lu__assert(self->mem);

		if (self->apexes) 
		{
			Lu_S_Layer apex = lu_arr__last(self->apexes);

			if (apex)
			{
				lu_s_layer__destroy(apex, self->mem);
			}

			lu_arr__destroy(self->apexes);
		}

		if (self->frames)
			lu_arr__destroy(self->frames);

		lu_mem__free(self->mem, (lu_p_byte) self);
	}

///////////////////////////////////////////////////////////////////////////////
// Lu_S Methods


	static void lu_s__print_info(Lu_S self)
	{
		// lu__user_assert_void(self, "Lu_S is NULL");
		// lu__user_assert_void(self->recs, "Lu_S recs is NULL");

 	// 	lu__debug("\n\n-- Lu_S info: ");
 	// 	lu__debug("\n 	Lu_S_Rec_Rg count: %lu", lu_arr__count(self->recs));

 	// 	Lu_S_Rec_Rg rec;
 	// 	lu_size i;
 	// 	for(i = 0; i < lu_arr__count(self->recs); i++)
 	// 	{
 	// 		rec = (Lu_S_Rec_Rg) lu_arr__get(self->recs, i);
 	// 		if (rec) 
 	// 			lu_s_rec_rg__print_info(rec);
 	// 	}
	}

/**
	Copyright Â© 2021 Oleh Ihorovych Novosad 
*/


///////////////////////////////////////////////////////////////////////////////
// Lu_S Create & Destroy

	static Lu_S lu_s__create(Lu_Mem mem, Lu_S_Cell_Mem cell_mem, Lu_Arr recs)
	{
		lu__assert(mem);
		lu__assert(cell_mem);
		lu__assert(recs);
		lu__assert(lu_arr__count(recs) > 0);

		Lu_S self = (Lu_S) lu_mem__alloc(mem, sizeof(struct lu_s));
		lu__assert(self);

		self->mem = mem;
		self->cell_mem = cell_mem;

		//
		// Cell_Mem_Config
		//

		struct lu_s_cell_mem_config cell_mem_config;

		lu_s_cell_mem_config__init(&cell_mem_config);

		//
		// Create Rec_Rgs
		//

		self->recs = lu_arr__create(self->mem, lu_arr__count(recs), false);
		lu__assert(self->recs);

		lu_size i;
		Lu_Rec rec;
		Lu_S_Rec_Rg rec_rg;
		for (i = 0; i < lu_arr__count(recs); i++)
		{
			rec = (Lu_Rec) lu_arr__get(recs, i);
			lu__assert(rec);

			rec_rg = lu_s_rec_rg__create(mem, rec, &cell_mem_config);
			lu__assert(rec_rg);

			lu_arr__set(self->recs, i, rec_rg);
		}

		//
		// Create Seq_Rg
		//

		self->seq = lu_s_seq_rg__create(mem, &cell_mem_config, lu_arr__count(recs));
		lu__assert(self->seq);

		//
		// Create Story_Rg
		//

		self->story = lu_s_story_rg__create(mem, &cell_mem_config, 1);
		lu__assert(self->story);

		// 
		// Cell_Mem
		//

		self->cell_mem = lu_s_cell_mem__create(mem, cell_mem_config);
		lu__assert(self->cell_mem);

		//
		// Assign cells from Cell_Mem to rgs
		// 
		for (i = 0; i < lu_arr__count(self->recs); i++)
		{
			rec_rg = (Lu_S_Rec_Rg) lu_arr__get(self->recs, i);
			lu__assert(rec_rg);

			lu_s_rec_rg__cells_assign(rec_rg, self->cell_mem);
		}

		lu_s_seq__cells_assign(self->seq, self->cell_mem);
		lu_s_story__cells_assign(self->story, self->cell_mem);

		//
		// Inner region cells connect
		//

		for (i = 0; i < lu_arr__count(self->recs); i++)
		{
			rec_rg = (Lu_S_Rec_Rg) lu_arr__get(self->recs, i);
			lu__assert(rec_rg);

			lu_s_rec_rg__inner_connect(rec_rg);
		}

		lu_s_seq__inner_connect(self->seq);
		lu_s_story__inner_connect(self->story);

		//
		// Inter region cells connect
		//

		Lu_S_Layer b_layer;
		for (i = 0; i < lu_arr__count(self->recs); i++)
		{
			rec_rg = (Lu_S_Rec_Rg) lu_arr__get(self->recs, i);
			lu__assert(rec_rg);

			//
			// Lu_S_Rec_Rg AND Lu_S_Seq_Rg connect
			//
			lu_s_rec_and_seq__inter_connect(rec_rg, self->seq);
		}

		//
		// Lu_S_Seq_Rg AND Lu_S_Story_Rg connect
		//
		lu_s_seq_and_story__inter_connect(self);

		return self;
	}

	static void lu_s__destroy(Lu_S self)
	{
		lu__assert(self);

		lu_s_seq_rg__destroy(self->seq);

		Lu_S_Rec_Rg rec_rg;
		for(lu_size i = 0; i < lu_arr__count(self->recs); i++)
		{
			rec_rg = (Lu_S_Rec_Rg) lu_arr__get(self->recs, i);

			if (rec_rg) 
				lu_s_rec_rg__destroy(rec_rg);
		}

		lu_arr__destroy(self->mem, self->recs);

		lu_s_cell_mem__destroy(self->cell_mem);

		lu_mem__free(self->mem, (lu_p_byte) self);
	}

///////////////////////////////////////////////////////////////////////////////
// Lu_S Methods

	static void lu_s__print_info(Lu_S self)
	{
		lu__user_assert_void(self, "Lu_S is NULL");
		lu__user_assert_void(self->recs, "Lu_S recs is NULL");

 		lu__debug("\n\n-- Lu_S info: ");
 		lu__debug("\n 	Lu_S_Rec_Rg count: %lu", lu_arr__count(self->recs));

 		Lu_S_Rec_Rg rec;
 		lu_size i;
 		for(i = 0; i < lu_arr__count(self->recs); i++)
 		{
 			rec = (Lu_S_Rec_Rg) lu_arr__get(self->recs, i);
 			if (rec) 
 				lu_s_rec_rg__print_info(rec);
 		}
	}

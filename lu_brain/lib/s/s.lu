/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/


///////////////////////////////////////////////////////////////////////////////
// Lu_S Create & Destroy

	static Lu_S lu_s__create_intersected_squares_cortex(
		Lu_Res res, 
		struct lu_space_config config, 
		Lu_Arr recs
	)
	{
		lu__assert(res);
		lu__assert(recs);
		lu__assert(lu_arr__count(recs) > 0);

		Lu_S self = (Lu_S) lu_mem__alloc(res->s_mem, sizeof(struct lu_s));
		lu__assert(self);

		Lu_Space_Config v_config = lu_space_config__validate(&config);
		lu__assert(v_config);

		self->config = *v_config;
		self->res = res;

		lu__assert(self->config.frames_size >= lu_arr__count(recs));

		self->frames = lu_arr__create(res->s_mem, self->config.frames_size, true);
		lu__assert(self->frames);

		Lu_Rec rec;
		lu_size i;
		lu_size j;
		Lu_S_Map_Frame frame_map;
		Lu_S_Map_Story story_map;
		Lu_S_Layer_Frame frame;

		story_map = lu_s_map_story__create(res, lu_arr__count(recs)); 
		lu__assert(story_map);

		lu_s_map_base__make_story_fractal((Lu_S_Map_Base) story_map, story_map->recs_count);

		Lu_S_Layer_Base recs_base = lu_s_map_base__get_base((Lu_S_Map_Base) story_map);
		lu__assert(recs_base);


		Lu_S_Layer_Base frame_apex;
		for (i = 0; i < lu_arr__count(recs); i++)
		{
			rec = (Lu_Rec) lu_arr__get(recs, i);
			lu__assert(rec);

			frame_map = lu_s_map_frame__create(res, rec, (Lu_S_Map_Base) story_map);
			lu__assert(frame_map->super.type == LU_S_MT__FRAME);
			lu__assert(frame_map);

			lu_s_map_base__make_frame_fractal((Lu_S_Map_Base) frame_map, frame_map->rec);

			frame = lu_s_map_base__get_frame((Lu_S_Map_Base) frame_map);
			lu__assert(frame);

			// save pointer to frame
			lu_arr__set(self->frames, i, (lu_p_void) frame);

			// connect layers
			frame_apex = lu_s_map_base__get_apex((Lu_S_Map_Base) frame_map);
			lu__assert(frame_apex);

			lu_s_layer_base__connect(recs_base, frame_apex);

			// connect maps
			lu_s_map_base__connect((Lu_S_Map_Base) story_map, (Lu_S_Map_Base) frame_map);
		}

		self->fractal = (Lu_S_Map_Base) story_map;

		return self;
	}

	static void lu_s__destroy(Lu_S self)
	{
		lu__assert(self);
		lu__assert(self->res);
		lu__assert(self->res->s_mem);

		if (self->fractal)
		{
			Lu_S_Layer_Base layer_base = lu_s_map_base__get_apex(self->fractal);

			if (layer_base)
			{
				lu__assert(layer_base->destroy);

				lu_s_layer_base__recursive_destroy(layer_base);
			}

			lu_s_map_base__recursive_destroy(self->fractal);

			// lu__assert(self->fractal->destroy);
			// self->fractal->destroy(self->fractal);
		}

		if (self->frames)
			lu_arr__destroy(self->frames);

		lu_mem__free(self->res->s_mem, (lu_p_byte) self);
	}

///////////////////////////////////////////////////////////////////////////////
// Lu_S Fractals
//
// User actions must be done to increase layers in levels
// For example, we do not allow to increase layer frames
// To increase recs we need to add rec
// To increase seq we need to add time frame
// To increase event we need to add event
// To increase scene we need to add scene
// To increase story we need to add story, etc.
//
// "Minimal" start:
//
// 		6 level3, story(vertically 1-n4)
// 		5 level2, scene(vertically 1-n3)
// 		4 level1, event (vertically 1-n2)
// 		3 layer seq (vertically 1-n1)
// 		2 layer recs (vertically rec_count)
// 		1 layer rixel (vertically w Y h)
// 		0 frame(vertically 1) 
// 		- comp1 comp2 comp3 (horizontally comp_count or d)
//
// 
//
// 		layer seq (sv: seq_count, sh: 1, nh: n)
// 		layer recs (sv: rec_count)
// 		layer frames/pixels (sv: (w Y h), sh: 1, nh: n)
// 		omp1 comp2 comp3 (sv: 1, sh: comp_count or d, n: w x h)
//
//
//		|  
//		| layer seq: sv: seq_count (for min frame_map seq_count = 1)
//		|
//		- (we could do //// sh: seq_count but we want seqs be independent of seq position
//		|
//		| layer recs: recs_count
//		|
//		-
//	  / / / / frame (sh: recs_count, here n data is totally independent of each other, thats why sh: recs_count)
//	  | | | |
//	  | | | | (w Y h)i, where i is rec id
//	  | | | |
//	  / . . \
//	 /       \
//	/         \
// / / /      \ \ \ (sv 1, sh: comp_count, n independent of each other)


	static void lu_s__add_v_layer(Lu_S self, lu_size level)
	{

	}

	static void lu_s__add_h_layer(Lu_S self, lu_size level)
	{

	}

	static void lu_s__add_frame(Lu_S self, Lu_Rec rec)
	{

	}

///////////////////////////////////////////////////////////////////////////////
// 

	static void lu_s__print_info(Lu_S self)
	{
		// lu__user_assert_void(self, "Lu_S is NULL");
		// lu__user_assert_void(self->recs, "Lu_S recs is NULL");

 	// 	lu__debug("\n\n-- Lu_S info: ");
 	// 	lu__debug("\n 	Lu_S_Rec_Rg count: %lu", lu_arr__count(self->recs));

 	// 	Lu_S_Rec_Rg rec;
 	// 	lu_size i;
 	// 	for(i = 0; i < lu_arr__count(self->recs); i++)
 	// 	{
 	// 		rec = (Lu_S_Rec_Rg) lu_arr__get(self->recs, i);
 	// 		if (rec) 
 	// 			lu_s_rec_rg__print_info(rec);
 	// 	}
	}

///////////////////////////////////////////////////////////////////////////////
// 

	static void lu_s__save_data(Lu_S self, lu_size wave_id, lu_size rec_id, Lu_Data data, Lu_Process_Config config)
	{
		lu__assert(self);
		Lu_S_Layer_Frame frame = lu_s__get_frame(self, rec_id);
		lu__assert(frame);

		lu_s_layer_frame__save_data(frame, wave_id, rec_id, data, config);
	}
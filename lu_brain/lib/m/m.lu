/**
	Copyright Â© 2021 Oleh Ihorovych Novosad 
*/


///////////////////////////////////////////////////////////////////////////////
// Lu_M Create & Destroy

	static Lu_M lu_m__create(Lu_Mem mem, Lu_Arr recs)
	{
		lu__assert(mem);
		lu__assert(recs);
		lu__assert(lu_arr__count(recs) > 0);

		Lu_M self = (Lu_M) lu_mem__alloc(mem, sizeof(struct lu_m));
		lu__assert(self);

		self->mem = mem;

		//
		// Cell_Mem_Config
		//

		struct lu_m_cell_mem_config cell_mem_config;

		lu_m_cell_mem_config__init(&cell_mem_config);

		// //
		// // Create Rec_Rgs
		// //

		// self->recs = lu_arr__create(self->mem, lu_arr__count(recs), false);
		// lu__assert(self->recs);

		// lu_size i;
		// Lu_Rec rec;
		// Lu_S_Rec_Rg rec_rg;
		// for (i = 0; i < lu_arr__count(recs); i++)
		// {
		// 	rec = (Lu_Rec) lu_arr__get(recs, i);
		// 	lu__assert(rec);

		// 	rec_rg = lu_m_rec_rg__create(mem, rec, &cell_mem_config);
		// 	lu__assert(rec_rg);

		// 	lu_arr__set(self->recs, i, rec_rg);
		// }

		// //
		// // Create Seq_Rg
		// //

		// self->seq = lu_m_seq_rg__create(mem, &cell_mem_config, lu_arr__count(recs));
		// lu__assert(self->seq);

		// //
		// // Create Story_Rg
		// //

		// self->story = lu_m_story_rg__create(mem, &cell_mem_config, 1);
		// lu__assert(self->story);

		// // 
		// // Cell_Mem
		// //

		// self->cell_mem = lu_m_cell_mem__create(mem, cell_mem_config);
		// lu__assert(self->cell_mem);

		// //
		// // Assign cells from Cell_Mem to rgs
		// // 
		// for (i = 0; i < lu_arr__count(self->recs); i++)
		// {
		// 	rec_rg = (Lu_S_Rec_Rg) lu_arr__get(self->recs, i);
		// 	lu__assert(rec_rg);

		// 	lu_m_rec_rg__cells_assign(rec_rg, self->cell_mem);
		// }

		// lu_m_seq_rg__cells_assign(self->seq, self->cell_mem);
		// lu_m_story_rg__cells_assign(self->story, self->cell_mem);

		// //
		// // Inner region cells connect
		// //

		// for (i = 0; i < lu_arr__count(self->recs); i++)
		// {
		// 	rec_rg = (Lu_S_Rec_Rg) lu_arr__get(self->recs, i);
		// 	lu__assert(rec_rg);

		// 	lu_m_rec_rg__inner_connect(rec_rg);
		// }

		// lu_m_seq_rg__inner_connect(self->seq);
		// lu_m_story_rg__inner_connect(self->story);

		// //
		// // Inter region cells connect
		// //

		// for (i = 0; i < lu_arr__count(self->recs); i++)
		// {
		// 	rec_rg = (Lu_S_Rec_Rg) lu_arr__get(self->recs, i);
		// 	lu__assert(rec_rg);

		// 	//
		// 	// Lu_S_Rec_Rg AND Lu_S_Seq_Rg connect
		// 	//
		// 	lu_m__rec_and_seq_inter_connect(rec_rg, self->seq);
		// }

		// //
		// // Lu_S_Seq_Rg AND Lu_S_Story_Rg connect
		// //
		// lu_m__seq_and_story_inter_connect(self->seq, self->story);

		return self;
	}

	static void lu_m__destroy(Lu_M self)
	{
		lu__assert(self);

		// lu_m_story_rg__destroy(self->story);

		// lu_m_seq_rg__destroy(self->seq);

		// Lu_S_Rec_Rg rec_rg;
		// for(lu_size i = 0; i < lu_arr__count(self->recs); i++)
		// {
		// 	rec_rg = (Lu_S_Rec_Rg) lu_arr__get(self->recs, i);

		// 	if (rec_rg) 
		// 		lu_m_rec_rg__destroy(rec_rg);
		// }

		// lu_arr__destroy(self->recs);

		// lu_m_cell_mem__destroy(self->cell_mem);

		lu_mem__free(self->mem, (lu_p_byte) self);
	}

///////////////////////////////////////////////////////////////////////////////
// Lu_M Methods


	static void lu_m__print_info(Lu_M self)
	{
		// lu__user_assert_void(self, "Lu_M is NULL");
		// lu__user_assert_void(self->recs, "Lu_M recs is NULL");

 	// 	lu__debug("\n\n-- Lu_M info: ");
 	// 	lu__debug("\n 	Lu_S_Rec_Rg count: %lu", lu_arr__count(self->recs));

 	// 	Lu_S_Rec_Rg rec;
 	// 	lu_size i;
 	// 	for(i = 0; i < lu_arr__count(self->recs); i++)
 	// 	{
 	// 		rec = (Lu_S_Rec_Rg) lu_arr__get(self->recs, i);
 	// 		if (rec) 
 	// 			lu_m_rec_rg__print_info(rec);
 	// 	}
	}

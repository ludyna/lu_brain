/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
//  

	static void lu_w_restore_processor__init(
		Lu_W_Restore_Processor self, 
		Lu_Wave wave,  
		Lu_Mem mem,
		Lu_S s, 
		Lu_Restore_Config config
	)
	{
		lu__assert(self);
		lu__assert(s); 
		lu__assert(mem);
		lu__assert(config); 

		self->mem = mem;
		lu_block_id__init(&self->block_id, wave->wave_id, 0);
		self->wave_ix = wave->wave_ix;

		self->s = s;
		self->data = NULL;

		self->curr_list = lu_w_restore_list__create(self->mem, config->processor_list_size);
		lu__assert(self->curr_list);

		self->next_list = lu_w_restore_list__create(self->mem, config->processor_list_size);
		lu__assert(self->next_list);
	}

	static void lu_w_restore_processor__deinit(Lu_W_Restore_Processor self)
	{
		lu__assert(self);
		lu__assert(self->mem);
		lu__assert(self->next_list);
		lu__assert(self->curr_list);

		lu_w_restore_list__destroy(self->curr_list);
		lu_w_restore_list__destroy(self->next_list);
	} 


///////////////////////////////////////////////////////////////////////////////
//  Methods


	static inline lu_size lu_w_restore_processor__run_iteration(Lu_W_Restore_Processor self)
	{
		lu__assert(self);
		lu__assert(lu_w_restore_list__is_blank(self->curr_list));
		lu__assert(lu_w_restore_list__is_present(self->next_list));

		Lu_W_Restore_List t;
		t = self->curr_list;
		self->curr_list = self->next_list;
		self->next_list = t;

		Lu_W_Restore_Item w_restore_item;
		lu_size cells_processed = 0;

		Lu_N_Cell n_cell;
		Lu_S_Column s_column;

		union lu_n_link_addr child_link_addr;
		Lu_N_Link child_link;
		Lu_N_Cell child_n_cell;
		Lu_S_Column child_s_column;

		Lu_Data data = NULL;

		for (lu_size i = 0; i < self->curr_list->items_count; i++)
		{
			w_restore_item = &self->curr_list->items[i];

			n_cell = w_restore_item->n_cell;
			lu__assert(n_cell);

			s_column = w_restore_item->s_column;
			lu__assert(s_column);


			child_link_addr = n_cell->children;
			
			struct lu_n_located_cell located_cell;

			lu_size column_ix;
			lu_value value;

			Lu_W_Restore_Cell w_restore_cell;

			while (lu_n_link_addr__is_present(&child_link_addr))
			{
				child_link = lu_n_link_mem__get_link(&s_column->link_mem, child_link_addr);
				lu__assert(child_link);

				lu__assert(lu_n_addr__is_present(&child_link->n_cell_addr)); 

				child_n_cell = NULL;
				child_s_column = NULL;

				lu_n_located_cell__reset(&located_cell);

				lu_s__find_n_cell_and_s_column(
					self->s, 
					child_link->n_cell_addr, 
					&located_cell
				);

				
				if (located_cell.n_cell_type == LU_N_CELL__N) 
				{
					child_n_cell = located_cell.n_cell;
					child_s_column = located_cell.s_column;

					lu__assert(child_n_cell);
					lu__assert(child_s_column);

					w_restore_cell = lu_n_cell__get_w_restore_cell(child_n_cell, self->wave_ix);
					lu__assert(w_restore_cell);

					if (lu_block_id__is_eq(&self->block_id, &w_restore_cell->block_id))
					{
						child_link_addr = child_link->next;
						continue;
					}

					// Mark this child_n_cell as one that was queued, so we dont q it again
					w_restore_cell->block_id = self->block_id;

					// Queue child
					lu_w_restore_list__add(self->next_list, child_n_cell, child_s_column);
				}
				else if (located_cell.n_cell_type == LU_N_CELL__VP) 
				{
					lu__assert(located_cell.s_layer_comp);
					lu__assert(located_cell.s_column_comp);
					lu__assert(located_cell.n_cell_vp);

					data = lu_s_layer_comp__get_p_restore_data(located_cell.s_layer_comp, self->wave_ix);
					lu__assert(data);
					lu__assert(data->values);

					// temporary solution
					if (self->data == NULL)
					{
						memset(data->values, 0, sizeof(lu_p_value) * data->w * data->h * data->d);
						self->data = data;
					}

					// Restore data.  
					column_ix = located_cell.s_column_comp->column_ix;
					value = located_cell.n_cell_vp->value;

					// lu__debug("\n column_ix = %ld, value=%.1f", column_ix, value);

					// Average
					data->values[column_ix] = (data->values[column_ix] + value) / 2;
				}

				child_link_addr = child_link->next;
			}

			++cells_processed;
		}

		lu_w_restore_list__reset(self->curr_list);

		return cells_processed;
	}

	static inline void lu_w_restore_processor__run(Lu_W_Restore_Processor self)
	{
		lu__assert(self);

		while (lu_w_restore_processor__has_items_to_process(self))
		{
			#ifdef LU__DEEP_DEBUG
			lu__debug("\nDEL PROCESSOR BATCH:");
			lu_w_restore_processor__print_symbols(self);
			#endif

			lu_w_restore_processor__run_iteration(self);
		}
	}
/**
	Copyright Â© 2021 Oleh Ihorovych Novosad 
*/
 
///////////////////////////////////////////////////////////////////////////////
// Init, create and destroy

	Lu_Wave lu_wave_create(Lu_Brain brain)
	{
		lu_user_assert(brain, "Lu_Brain is NULL");
		lu_user_assert(brain->s, "Lu_S is NULL");
		lu_user_assert(brain->n, "Lu_N is NULL");

		Lu_Wave self 		= (Lu_Wave) lu_g_mem_alloc(sizeof(struct lu_wave));
		lu_user_assert(self, "Cannot allocate Lu_Wave");

		lu_w_init((Lu_W) self, brain);

		return self;
	}

	void lu_wave_destroy(Lu_Wave self)
	{
		lu_user_assert_void(self, "Lu_Wave is NULL");
		lu_w_deinit(&self->super);
		lu_g_mem_free((lu_p_byte) self);
	}

///////////////////////////////////////////////////////////////////////////////
// Other

 	Lu_Wave lu_wave_config_set(Lu_Wave self, struct lu_wave_config config)
 	{
 		lu_user_assert(self, "Lu_Wave is NULL");

 		Lu_Wave_Config p_config = lu_wave_config_validate(&config);
 		lu_user_assert(p_config, "Lu_Wave_Config validation failed");

 		self->super.config = *p_config;

 		return self;
 	}

 	struct lu_wave_config lu_wave_config_get(Lu_Wave self)
 	{
 		lu_assert(self);

 		return self->super.config;
 	}

	Lu_Wave lu_wave_config_predefined_set(Lu_Wave self, lu_size id)
	{
		lu_user_assert(self, "Lu_Wave is NULL");

		Lu_Wave_Config p_config = lu_wave_config_predefined_get(id);
		lu_user_assert(p_config, "Cannot get Lu_Wave_Config");

		lu_wave_config_set(self, *p_config);

		return self;
	}

///////////////////////////////////////////////////////////////////////////////
// Other

	Lu_Wave lu_wave_join(Lu_Wave self)
	{
		return NULL;
	}

	Lu_Neu lu_wave_name_find_or_create(Lu_Wave self, lu_size name)
	{
		return NULL;
	}

	Lu_Wave lu_wave_reset(Lu_Wave self)
	{
		lu_user_assert(self, "Lu_Wave is NULL");
		
		lu_w_reset(&self->super);

		return self;
	}


/**
	Copyright Â© 2021 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// 

	Lu_Wave lu_wave_save(Lu_Wave self, Lu_Story story) 
	{
		lu_user_assert(self, "Lu_Wave is NULL"); 

		story = lu_story_validate(story);
		lu_user_assert(story, "Lu_Story is invalid");

		story = lu_story_prepare(story);
		lu_user_assert(story, "Lu_Story preparation failed");

		self = lu_wave_reset(self);
		lu_user_assert(self, "Lu_Wave preparation failed");

		lu_w_save_async((Lu_W) self, story);
		lu_wave_join(self);

		return self;
	}

	Lu_Wave lu_wave_save_with_name(Lu_Wave self, Lu_Story story, lu_size name)
	{
		Lu_Wave wave_mem = lu_wave_save(self, story);
		lu_user_assert(wave_mem, "Cannot save story");

		Lu_Neu neu = lu_wave_top_neu_get(wave_mem);

		Lu_Neu name_neu = lu_wave_name_find_or_create(wave_mem, name);

		lu_neu_connect(neu, name_neu);

		return self;
	}

	void lu_wave_save_async(Lu_Wave self, Lu_Story story)
	{
		lu_user_assert_void(self, "Lu_Wave is NULL");

		story = lu_story_validate(story);
		lu_user_assert_void(story, "Lu_Story is invalid");

		story = lu_story_prepare(story); 
		lu_user_assert_void(story, "Lu_Story preparation failed");

		self = lu_wave_reset(self);
		lu_user_assert_void(self, "Lu_Wave preparation failed");

		lu_w_save_async((Lu_W) self, story);
	}
	

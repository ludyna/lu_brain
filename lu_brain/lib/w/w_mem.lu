/**
	Copyright Â© 2021 Oleh Ihorovych Novosad 
*/
 
///////////////////////////////////////////////////////////////////////////////
//

	static W_Mem w_mem_init(W_Mem self, Lu_Brain brain)
	{
		lu_user_assert(self, "W_Mem is NULL");
		lu_user_assert(brain, "Lu_Brain is NULL");
 
 		self->brain 		= brain;
 		
 		Lu_S s = brain->s;
 		lu_user_assert(s, "Lu_S is NULL");

 		lu_user_assert(arr_count(s->recs) > 0, "No S_Recs?");

 		// here we use arr_size (not arr_count) and this is correct
 		// because recs could be potentionaly removed from brain
		self->recs = arr_temp_create(arr_size(s->recs), false);
 
 		S_Rec s_rec;
 		W_Rec w_rec;
 		lu_size i;

		for(i = 0; i < arr_size(self->recs); i++)
		{
			s_rec = (S_Rec) arr_get(s->recs, i);
			if (!s_rec) continue;  // this is correct

			// s_rec maye takozh vkazivnyk na lu_rec
			w_rec = w_rec_create(self, s_rec);
			lu_user_assert(w_rec, "Cannot create W_Rec");
			
			arr_set(self->recs, i, (lu_p_void) w_rec);
		}

		return self;
	}

	static void w_mem_deinit(W_Mem self)
	{
		lu_size i;
		W_Rec w_rec;

		if (self->recs)
		{
			for(i = 0; i < arr_count(self->recs); i++)
			{
				w_rec = (W_Rec) arr_get(self->recs, i);
				w_rec_destroy(w_rec);
			}

			arr_temp_destroy(self->recs);
		}
	}

	static void w_mem_reset(W_Mem self)
	{

	}

	static W_Rec w_mem_rec_get(W_Mem self, lu_size rec_id)
	{
		return (W_Rec) arr_get(self->recs, rec_id);
	}

	static void w_mem_save_async(W_Mem self, Lu_Story story)
	{
		lu_assert(self);
		lu_assert(story);
		lu_assert(self->brain);
	
		lu_size rec_i;
		Lu_Data data;
		W_Rec w_rec;
		
		w_mem_reset(self);

		Lu_L_Node curr = lu_list_node_first(story->blocks);

		lu_size recs_count = lu_story_recs_count(story);

		// TBD: paralelize here
		while(curr)
		{
			for(rec_i = 0; rec_i < recs_count; rec_i++)
			{
				w_rec 	= w_mem_rec_get(self, rec_i);
				if (w_rec == NULL) continue;

				data 	= lu_story_data_get(story, rec_i, curr);

				// lu_debug("\n[block=%lu, rec=%lu, (0,0)=", block_i, rec_i);
				// data->values ? lu_debug("%.0f", data->values[0]) : lu_debug("NULL");
				// lu_debug("] SAVING ...");

				// if (!lu_data_is_empty(data)) 
				// 	w_rec_data_save(w_rec, data, 0);
			}

			curr = lu_l_node_next(curr);
		}
	}

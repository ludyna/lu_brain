/**
	Copyright Â© 2021 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// Save

	static void lu_save_wave_destroy_internal(Lu_Wave wave)
	{
		lu_assert(wave);
		Lu_Save_Wave self = (Lu_Save_Wave) wave;

		lu_story_destroy(self->story);
	}

	Lu_Wave lu_save_wave_create(Lu_Mem mem, Lu_Brain brain, struct lu_wave_config config) 
	{
		lu_user_assert(mem, "Lu_Mem is NULL");
		lu_user_assert(brain, "Lu_Brain is NULL");

		Lu_Wave_Config p_config = lu_wave_config_validate(&config);
		lu_user_assert(p_config, "struct lu_wave_config is invalid");

		Lu_Save_Wave self = (Lu_Save_Wave) lu_mem_alloc(mem, sizeof(struct lu_save_wave));

		lu_wave_init(
			&self->super, 
			LU_WAVE_TYPE_SAVE, 
			0,
			mem,
			brain, 
			config,
			lu_save_wave_destroy_internal
		); 

		self->story = lu_story_create(brain, mem);

		return (Lu_Wave) self;
	}
	
///////////////////////////////////////////////////////////////////////////////
// Find 

	Lu_Wave lu_find_wave_create(Lu_Mem mem, Lu_Brain brain, struct lu_wave_config config)
	{
		return NULL;
	}


///////////////////////////////////////////////////////////////////////////////
// Restore

	Lu_Wave lu_restore_wave_create(Lu_Mem mem, Lu_Brain brain, struct lu_wave_config config)
	{
		return NULL;
	}

///////////////////////////////////////////////////////////////////////////////
// Destroy

	void lu_wave_destroy(Lu_Wave self)
	{
		lu_user_assert_void(self, "Lu_Wave is NULL");
		lu_assert(self);

		self->destroy(self);

		lu_mem_free(self->mem, (lu_p_byte) self);
	} 

///////////////////////////////////////////////////////////////////////////////
// Wave Story

	void lu_wave_block_start(Lu_Wave self)
	{

	}

	void lu_wave_block_end(Lu_Wave self)
	{

	}

	lu_size lu_wave_block_count(Lu_Wave self)
	{

	}

	Lu_Data lu_wave_last_data(Lu_Wave self, Lu_Rec rec)
	{

	}

	Lu_Data lu_wave_push(Lu_Wave self, Lu_Rec rec, lu_value* data)
	{

	}

	Lu_Neu lu_wave_neu_push(Lu_Wave self, Lu_Neu neu)
	{

	}

	void lu_wave_reset(Lu_Wave self)
	{

	}

///////////////////////////////////////////////////////////////////////////////
// Process

	void lu_wave_process(Lu_Wave self)
	{

	}

	void lu_wave_step(Lu_Wave self)
	{

	}


///////////////////////////////////////////////////////////////////////////////
// Properties

	struct lu_wave_config lu_wave_config_get(Lu_Wave self)
	{

	}
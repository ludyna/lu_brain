/**
	Copyright Â© 2021 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// Virtual Destroy

	static void lu_save_wave_destroy_virtual(Lu_Wave wave)
	{
		lu_assert(wave);
		lu_assert(lu_wave_is_save(wave));

		Lu_Save_Wave self = (Lu_Save_Wave) wave;

		lu_story_destroy(self->story);
	}

	static void lu_find_wave_destroy_virtual(Lu_Wave wave)
	{
		lu_assert(wave);
		Lu_Find_Wave self = (Lu_Find_Wave) wave;

		lu_story_destroy(self->story);
	}

	static void lu_restore_wave_destroy_virtual(Lu_Wave wave)
	{
		lu_assert(wave);
		Lu_Restore_Wave self = (Lu_Restore_Wave) wave;

		//lu_list_destroy(self->story);
	}

///////////////////////////////////////////////////////////////////////////////
// Virtual Block Begin

	static void lu_save_wave_block_begin_virtual(Lu_Wave self)
	{
		lu_assert(self);
		lu_assert(lu_wave_is_save(self));

		Lu_Save_Wave save_wave = (Lu_Save_Wave) self;
		lu_story_block_begin(save_wave->story);
	} 

	static void lu_find_wave_block_begin_virtual(Lu_Wave self)
	{

	} 

	static void lu_restore_wave_block_begin_virtual(Lu_Wave self)
	{

	}  

///////////////////////////////////////////////////////////////////////////////
// Virtual Block End

	static void lu_save_wave_block_end_virtual(Lu_Wave self)
	{
		lu_assert(self);
		lu_assert(lu_wave_is_save(self));

		Lu_Save_Wave save_wave = (Lu_Save_Wave) self;
		lu_story_block_end(save_wave->story);
	} 

	static void lu_find_wave_block_end_virtual(Lu_Wave self)
	{

	} 

	static void lu_restore_wave_block_end_virtual(Lu_Wave self)
	{

	}  

///////////////////////////////////////////////////////////////////////////////
// Virtual Push

	static void lu_save_wave_push_virtual(Lu_Wave self, Lu_Rec rec, lu_value *data)
	{
		lu_assert(self);
		lu_assert(lu_wave_is_save(self));

		Lu_Save_Wave save_wave = (Lu_Save_Wave) self;
		lu_story_push(save_wave->story, rec, data);
	}

	static void lu_find_wave_push_virtual(Lu_Wave self, Lu_Rec rec, lu_value *data)
	{

	}

///////////////////////////////////////////////////////////////////////////////
// Virtual Push Neu

	static void lu_restore_wave_push_neu_virtual(Lu_Wave self, Lu_Neu neu)
	{

	}

///////////////////////////////////////////////////////////////////////////////
// Virtual Step

	static void lu_save_wave_process_block(Lu_Save_Wave self, Lu_Block block)
	{
		lu_debug("\nOH HELLO\n");
	}

	static void lu_save_wave_step_virtual(Lu_Wave self)
	{
		lu_assert(self);
		lu_assert(lu_wave_is_save(self));

		Lu_Save_Wave save_wave = (Lu_Save_Wave) self;

		Lu_Block block = lu_story_next_block_get(save_wave->story);
		if (block)
			lu_save_wave_process_block(save_wave, block);
	}

	static void lu_find_wave_step_virtual(Lu_Wave self)
	{
		lu_assert(self);
		lu_assert(lu_wave_is_find(self));
	}

	static void lu_restore_wave_step_virtual(Lu_Wave self)
	{
		lu_assert(self);
		lu_assert(lu_wave_is_restore(self));
	}


///////////////////////////////////////////////////////////////////////////////
// Virtual Process

	static void lu_save_wave_process_virtual(Lu_Wave self)
	{
		lu_assert(self);
		lu_assert(lu_wave_is_save(self));

		Lu_Save_Wave save_wave = (Lu_Save_Wave) self;

		Lu_Block block = NULL;

		while(block = lu_story_next_block_get(save_wave->story))
			lu_save_wave_process_block(save_wave, block);
	}

	static void lu_find_wave_process_virtual(Lu_Wave self)
	{
		lu_assert(self);
		lu_assert(lu_wave_is_find(self));
	}

	static void lu_restore_wave_process_virtual(Lu_Wave self)
	{
		lu_assert(self);
		lu_assert(lu_wave_is_restore(self));
	}

///////////////////////////////////////////////////////////////////////////////
// Create

	Lu_Wave lu_save_wave_create(Lu_Mem mem, Lu_Brain brain, struct lu_wave_config config) 
	{
		lu_user_assert(mem, "Lu_Mem is NULL");
		lu_user_assert(brain, "Lu_Brain is NULL");

		Lu_Wave_Config p_config = lu_wave_config_validate(&config);
		lu_user_assert(p_config, "struct lu_wave_config is invalid");

		Lu_Save_Wave self = (Lu_Save_Wave) lu_mem_alloc(mem, sizeof(struct lu_save_wave));

		lu_wave_init(
			&self->super, 
			LU_WAVE_TYPE_SAVE, 
			0,
			mem,
			brain, 
			config
		); 

		self->super.destroy = lu_save_wave_destroy_virtual;
		
		self->super.block_begin = lu_save_wave_block_begin_virtual;
		self->super.block_end = lu_save_wave_block_end_virtual;

		self->super.push = lu_save_wave_push_virtual;

		self->super.step = lu_save_wave_step_virtual;
		self->super.process = lu_save_wave_process_virtual;

		self->story = lu_story_create(mem, lu_brain_recs_size(brain));

		return (Lu_Wave) self;
	}
	
	Lu_Wave lu_find_wave_create(Lu_Mem mem, Lu_Brain brain, struct lu_wave_config config)
	{
		return NULL;
	}


	Lu_Wave lu_restore_wave_create(Lu_Mem mem, Lu_Brain brain, struct lu_wave_config config)
	{
		return NULL;
	}



///////////////////////////////////////////////////////////////////////////////
// Destroy

	void lu_wave_destroy(Lu_Wave self)
	{
		lu_user_assert_void(self, "Lu_Wave is NULL");
		lu_assert(self);

		self->destroy(self);

		lu_mem_free(self->mem, (lu_p_byte) self);
	} 

///////////////////////////////////////////////////////////////////////////////
// Wave Story

	void lu_wave_block_begin(Lu_Wave self)
	{
		lu_user_assert_void(self, "Lu_Wave is NULL");

		if (self->block_begin)
			self->block_begin(self);
		else lu_user_assert_void(false, "Method is not supported by this wave implementation");
	}

	void lu_wave_block_end(Lu_Wave self)
	{
		lu_user_assert_void(self, "Lu_Wave is NULL");

		if (self->block_end)
			self->block_end(self);
		else lu_user_assert_void(false, "Method is not supported by this wave implementation");
	}

	// lu_size lu_wave_block_count(Lu_Wave self)
	// {
	// 	lu_assert(self);
	// }

	// Lu_Data lu_wave_last_data(Lu_Wave self, Lu_Rec rec)
	// {
	// 	lu_user_assert(self, "Lu_Wave is NULL");
	// 	lu_user_assert(rec, "Lu_Rec is NULL");
	// }

	void lu_wave_push(Lu_Wave self, Lu_Rec rec, lu_value* data)
	{
		lu_user_assert_void(self, "Lu_Wave is NULL");
		lu_user_assert_void(rec, "Lu_Rec is NULL");
		lu_user_assert_void(data, "data is NULL");

		if (self->push)
			self->push(self, rec, data);
		else lu_user_assert_void(false, "Method is not supported by this wave implementation");
	}

	void lu_wave_push_neu(Lu_Wave self, Lu_Neu neu)
	{
		lu_user_assert_void(self, "Lu_Wave is NULL");
		lu_user_assert_void(neu, "Lu_Neu is NULL");

		if (self->push_neu)
			self->push_neu(self, neu);
		else lu_user_assert_void(false, "Method is not supported by this wave implementation");
	}

	void lu_wave_reset(Lu_Wave self)
	{
		lu_user_assert_void(self, "Lu_Wave is NULL");

		if (self->reset)
			self->reset(self);
		else lu_user_assert_void(false, "Method is not supported by this wave implementation");
	}

///////////////////////////////////////////////////////////////////////////////
// Process

	void lu_wave_step(Lu_Wave self)
	{
		lu_user_assert_void(self, "Lu_Wave is NULL");

		if (self->step)
			self->step(self);
		else lu_user_assert_void(false, "Method is not supported by this wave implementation");
	}

	void lu_wave_process(Lu_Wave self)
	{
		lu_user_assert_void(self, "Lu_Wave is NULL");

		if (self->process)
			self->process(self);
		else lu_user_assert_void(false, "Method is not supported by this wave implementation");
	}


///////////////////////////////////////////////////////////////////////////////
// Properties

	struct lu_wave_config lu_wave_config_get(Lu_Wave self)
	{

	}
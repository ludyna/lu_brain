/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/


///////////////////////////////////////////////////////////////////////////////
// Process block

	static void lu_save_wave_process_block(Lu_Save_Wave self, Lu_Block block)
	{
		lu__assert(self);
		lu__assert(block);

		Lu_Seq_Rg shot = lu_seq_rg_create(self->super.mem, self->super.brain->s);

		lu_lim_list__append(self->block_layers, shot);
		


	}

///////////////////////////////////////////////////////////////////////////////
// Step

	void lu_wave__step(Lu_Wave self)
	{
		lu__user_assert_void(self, "Lu_Wave is NULL");

		if (self->step)
			self->step(self);
		else lu__user_assert_void(false, "Method is not supported by this wave implementation");
	}


	static void lu_save_wave_step_virtual(Lu_Wave self)
	{
		lu__assert(self);
		lu__assert(lu_wave_is_save(self));

		Lu_Save_Wave save_wave = (Lu_Save_Wave) self;

		Lu_Block block = lu_seq_next_block_get(save_wave->seq);
		if (!block) return; // nothing to process

		lu_save_wave_process_block(save_wave, block);
	}

	static void lu_find_wave_step_virtual(Lu_Wave self)
	{
		lu__assert(self);
		lu__assert(lu_wave_is_find(self));
	}

	static void lu_restore_wave_step_virtual(Lu_Wave self)
	{
		lu__assert(self);
		lu__assert(lu_wave_is_restore(self));
	}


///////////////////////////////////////////////////////////////////////////////
// Process

	void lu_wave__process(Lu_Wave self)
	{
		lu__user_assert_void(self, "Lu_Wave is NULL");

		if (self->process)
			self->process(self);
		else lu__user_assert_void(false, "Method is not supported by this wave implementation");
	}

	static void lu_save_wave_process_virtual(Lu_Wave self)
	{
		lu__assert(self);
		lu__assert(lu_wave_is_save(self));

		Lu_Save_Wave save_wave = (Lu_Save_Wave) self;

		Lu_Block block = NULL;

		while(block = lu_seq_next_block_get(save_wave->seq))
			lu_save_wave_process_block(save_wave, block);
	}

	static void lu_find_wave_process_virtual(Lu_Wave self)
	{
		lu__assert(self);
		lu__assert(lu_wave_is_find(self));
	}

	static void lu_restore_wave_process_virtual(Lu_Wave self)
	{
		lu__assert(self);
		lu__assert(lu_wave_is_restore(self));
	}

///////////////////////////////////////////////////////////////////////////////
// Reset

	void lu_wave__reset(Lu_Wave self)
	{
		lu__user_assert_void(self, "Lu_Wave is NULL");

		if (self->reset)
			self->reset(self);
		else lu__user_assert_void(false, "Method is not supported by this wave implementation");
	}

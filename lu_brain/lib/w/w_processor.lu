/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
//  

	static void lu_w_processor__init(
		Lu_W_Processor self, 
		Lu_S s, 
		Lu_Config config, 
		Lu_W_Match_Cell_Mem match_cell_mem,
		Lu_La_Column la_column
	)
	{
		lu__assert(self);
		lu__assert(s);
		lu__assert(config); 
		lu__assert(config->w_mem);
		lu__assert(config->w_result_labels_size>0);
		lu__assert(match_cell_mem);
		lu__assert(la_column);

		self->mem = config->w_mem;
		self->w_result_labels_size = config->w_result_labels_size;

		lu_block_id__reset(&self->block_id);

		self->wave_ix = LU_WAVE_IX__NOT_SET;

		self->s = s;
		self->match_cell_mem = match_cell_mem;

		self->curr_list = lu_w_proc_list__create(self->mem, config->w_processor_queue_size);
		lu__assert(self->curr_list);

		self->next_list = lu_w_proc_list__create(self->mem, config->w_processor_queue_size);
		lu__assert(self->next_list);

		// For lu_labels
		self->la_mem_table = lu_mem_table__create(
			self->mem, 
			sizeof(struct lu_label),
			config->la_labels_size, 
			0,
			LU_MEM_TABLE__DEFAULT
		);
		lu__alloc_assert(self->la_mem_table);;

		self->la_column = la_column;
		self->s_list = NULL;

		self->sorted_results = (Lu_Label*) lu_mem__alloc(self->mem, sizeof(Lu_Label) * self->w_result_labels_size);
		lu__alloc_assert(self->sorted_results);
	}

	static void lu_w_processor__deinit(Lu_W_Processor self)
	{
		lu__assert(self);
		lu__assert(self->mem);
		lu__assert(self->next_list);
		lu__assert(self->curr_list);
		lu__assert(self->la_mem_table);

		if (self->sorted_results)
			lu_mem__free(self->mem, (lu_p_byte) self->sorted_results);

		if (self->s_list)
			lu_s_list__destroy(self->s_list);

		lu_w_proc_list__destroy(self->curr_list);
		lu_w_proc_list__destroy(self->next_list);

		lu_mem_table__destroy(self->la_mem_table);
	} 

///////////////////////////////////////////////////////////////////////////////
//  

	static void lu_w_processor__prepare_results(Lu_W_Processor self)
	{
		lu__assert(self);
		lu__assert(self->la_column);
		lu__assert(self->w_result_labels_size > 0);
		lu__assert(self->mem);

		lu_size i;
		Lu_La_Cell la_cell;
		union lu_w_match_addr addr;
		Lu_La_Column la_column = self->la_column;
		Lu_W_Match_Cell match_cell;

		//
		// Collect new results in s_list
		//
		Lu_Label label;
		for (i = 0; i < la_column->cells_size; i++)
		{
			la_cell = lu_la_column__get_la_cell(la_column, i);
			lu__assert(la_cell);

			if (la_cell->children_count == 0) continue;

			lu__deep_debug("\nPREPARING (wave_ix=%ld)", self->wave_ix);
			#ifdef LU__DEEP_DEBUG
			lu_la_cell__print(la_cell);
			#endif

			addr = lu_la_cell__get_w_match_cell_addr(la_cell, self->wave_ix);

			if (lu_w_match_addr__is_blank(&addr)) continue;

			match_cell = lu_w_match_cell_mem__get_cell(self->match_cell_mem, addr);
			if (match_cell == NULL) continue;

			if (lu_w_match_cell__no_sig(match_cell)) continue;

			if (lu_block_id__is_not_eq(&self->block_id, &match_cell->block_id)) continue;

			lu__deep_debug("\nALLOCATING Lu_Label, initing and addingg to s_list, la_ix=%ld \n", la_cell->addr.la_ix);

			label = (Lu_Label) lu_mem_record__alloc(self->la_mem_table);
			lu__alloc_assert(label);

			lu_label__init(label, la_cell, match_cell);

			lu_s_list__add(self->s_list, (lu_p_void) label);
		}

		//
		// Copy sorted results from s_list to sorted_results
		//

		i = 0;
		Lu_S_Node curr = lu_s_list__get_first_node(self->s_list);
		while (curr)
		{
			lu__assert(i < self->w_result_labels_size);

			self->sorted_results[i] = (Lu_Label) lu_s_node__get_value(curr);
			++i;	

			curr = lu_s_node__get_next_node(curr);
		}

	}


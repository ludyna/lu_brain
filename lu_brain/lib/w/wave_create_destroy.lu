/**
	Copyright Â© 2021 Oleh Ihorovych Novosad 
*/

	static void lu_save_wave_block_layer_node_before_destroy(Lu_Lim_List, Lu_L_Node);
	static void lu_save_wave_destroy_virtual(Lu_Wave wave);
	static void lu_find_wave_destroy_virtual(Lu_Wave wave);
	static void lu_restore_wave_destroy_virtual(Lu_Wave wave);

///////////////////////////////////////////////////////////////////////////////
// Create

	Lu_Wave lu_save_wave_create(Lu_Mem mem, Lu_Brain brain, struct lu_wave_config config) 
	{
		lu_user_assert(mem, "Lu_Mem is NULL");
		lu_user_assert(brain, "Lu_Brain is NULL");

		Lu_Wave_Config p_config = lu_wave_config_validate(&config);
		lu_user_assert(p_config, "struct lu_wave_config is invalid");

		Lu_Save_Wave self = (Lu_Save_Wave) lu_mem_alloc(mem, sizeof(struct lu_save_wave));

		lu_wave_init(
			&self->super, 
			LU_WAVE_TYPE_SAVE, 
			0,
			mem,
			brain, 
			config
		); 

		self->super.destroy = lu_save_wave_destroy_virtual;
		
		self->super.block_begin = lu_save_wave_block_begin_virtual;
		self->super.block_end = lu_save_wave_block_end_virtual;

		self->super.push = lu_save_wave_push_virtual;

		self->super.step = lu_save_wave_step_virtual;
		self->super.process = lu_save_wave_process_virtual;

		self->story = lu_story_create(mem, lu_brain_recs_size(brain)); 
		lu_assert(self->story);

		self->block_layers = lu_lim_list_create(mem, self->super.config.block_layers_size);
		lu_assert(self->block_layers);

		self->block_layers->node_before_destroy = lu_save_wave_block_layer_node_before_destroy;

		return (Lu_Wave) self;
	}
	
	Lu_Wave lu_find_wave_create(Lu_Mem mem, Lu_Brain brain, struct lu_wave_config config)
	{
		return NULL;
	}


	Lu_Wave lu_restore_wave_create(Lu_Mem mem, Lu_Brain brain, struct lu_wave_config config)
	{
		return NULL;
	}

///////////////////////////////////////////////////////////////////////////////
// Destroy

	void lu_wave_destroy(Lu_Wave self)
	{
		lu_user_assert_void(self, "Lu_Wave is NULL");
		lu_assert(self);

		self->destroy(self);

		lu_mem_free(self->mem, (lu_p_byte) self);
	} 

	// Save

	static void lu_save_wave_block_layer_node_before_destroy(Lu_Lim_List list, Lu_L_Node node)
	{
		lu_assert(list);
		lu_assert(node);

		lu_p_void value = lu_l_node_value(node);
		lu_assert(value);

		lu_block_layer_destroy((Lu_Block_Layer) value);
	}

	static void lu_save_wave_destroy_virtual(Lu_Wave wave)
	{
		lu_assert(wave);
		lu_assert(lu_wave_is_save(wave));

		Lu_Save_Wave self = (Lu_Save_Wave) wave;

		lu_lim_list_clear(self->block_layers);

		lu_lim_list_destroy(self->block_layers);
		lu_story_destroy(self->story);
	}

	// Find

	static void lu_find_wave_destroy_virtual(Lu_Wave wave)
	{
		lu_assert(wave);
		Lu_Find_Wave self = (Lu_Find_Wave) wave;

		lu_story_destroy(self->story);
	}

	// Restore

	static void lu_restore_wave_destroy_virtual(Lu_Wave wave)
	{
		lu_assert(wave);
		Lu_Restore_Wave self = (Lu_Restore_Wave) wave;

		//lu_list_destroy(self->story);
	}

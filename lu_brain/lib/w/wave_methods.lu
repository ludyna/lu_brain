/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/


///////////////////////////////////////////////////////////////////////////////
// Properties

	struct lu_wave_config lu_wave_config__get(Lu_Wave self)
	{

	}

	// lu_size lu_wave_block_count(Lu_Wave self)
	// {
	// 	lu__assert(self);
	// }

	// Lu_Data lu_wave_last_data(Lu_Wave self, Lu_Rec rec)
	// {
	// 	lu__user_assert(self, "Lu_Wave is NULL");
	// 	lu__user_assert(rec, "Lu_Rec is NULL");
	// }


///////////////////////////////////////////////////////////////////////////////
// Block Begin

	void lu_wave__block_begin(Lu_Wave self)
	{
		lu__user_assert_void(self, "Lu_Wave is NULL");

		if (self->block_begin)
			self->block_begin(self);
		else lu__user_assert_void(false, "Method is not supported by this wave implementation");
	}

	static void lu_save_wave_block_begin_virtual(Lu_Wave self)
	{
		lu__assert(self);
		lu__assert(lu_wave__is_save(self));

		Lu_Save_Wave save_wave = (Lu_Save_Wave) self;
		lu_seq__block_begin(save_wave->seq);
	} 

	static void lu_find_wave_block_begin_virtual(Lu_Wave self)
	{

	} 

	static void lu_restore_wave_block_begin_virtual(Lu_Wave self)
	{

	}  

///////////////////////////////////////////////////////////////////////////////
// Block End

	void lu_wave__block_end(Lu_Wave self)
	{
		lu__user_assert_void(self, "Lu_Wave is NULL");

		if (self->block_end)
			self->block_end(self);
		else lu__user_assert_void(false, "Method is not supported by this wave implementation");
	}

	static void lu_save_wave_block_end_virtual(Lu_Wave self)
	{
		lu__assert(self);
		lu__assert(lu_wave__is_save(self));

		Lu_Save_Wave save_wave = (Lu_Save_Wave) self;
		lu_seq__block_end(save_wave->seq);
	} 

	static void lu_find_wave_block_end_virtual(Lu_Wave self)
	{

	} 

	static void lu_restore_wave_block_end_virtual(Lu_Wave self)
	{

	}  

///////////////////////////////////////////////////////////////////////////////
// Push

	void lu_wave__push(Lu_Wave self, Lu_Rec rec, lu_value* data)
	{
		lu__user_assert_void(self, "Lu_Wave is NULL");
		lu__user_assert_void(rec, "Lu_Rec is NULL");
		lu__user_assert_void(data, "data is NULL");

		if (self->push)
			self->push(self, rec, data);
		else lu__user_assert_void(false, "Method is not supported by this wave implementation");
	}

	static void lu_save_wave_push_virtual(Lu_Wave self, Lu_Rec rec, lu_value *data)
	{
		lu__assert(self);
		lu__assert(lu_wave__is_save(self));

		Lu_Save_Wave save_wave = (Lu_Save_Wave) self;
		lu_seq__push(save_wave->seq, rec, data);
	}

	static void lu_find_wave_push_virtual(Lu_Wave self, Lu_Rec rec, lu_value *data)
	{

	}

///////////////////////////////////////////////////////////////////////////////
// Push Neu

	void lu_wave__push_neu(Lu_Wave self, Lu_Neu neu)
	{
		lu__user_assert_void(self, "Lu_Wave is NULL");
		lu__user_assert_void(neu, "Lu_Neu is NULL");

		if (self->push_neu)
			self->push_neu(self, neu);
		else lu__user_assert_void(false, "Method is not supported by this wave implementation");
	}

	static void lu_restore_wave_push_neu_virtual(Lu_Wave self, Lu_Neu neu)
	{

	}



/**
	Copyright Â© 2021 Oleh Ihorovych Novosad 
*/
 
///////////////////////////////////////////////////////////////////////////////
// Create & destroy

	static void w_rec_datum_node_before_destroy_block(Lu_Lim_List lim_list, Lu_L_Node node)
	{
		lu_assert(node);

		Lu_Data data = (Lu_Data) lu_l_node_value(node);
		lu_assert(data);

		lu_data_destroy(data, lu_g_mem);

		lu_l_node_value_set(node, NULL);
	}

	static W_Rec w_rec_create(W_Mem w_mem, S_Rec s_rec)
	{
		lu_user_assert(w_mem, "W_Mem is NULL");
		lu_user_assert(s_rec, "S_Rec is NULL");
		lu_user_assert(s_rec->rec, "Lu_Rec is NULL");
		lu_user_assert(s_rec->data_layers, "S_Rec data_layers is NULL");

		W_Rec self 		= (W_Rec) mem_temp_alloc(sizeof(struct w_rec));
		lu_user_assert(self, "Cannot allocate W_Rec");
		 
		self->w_mem 		= w_mem;
		self->s_rec 		= s_rec;
		self->config 		= s_rec->rec->config;		// pochatkovi znachennia

		// Datum
		self->datum 						= lu_lim_list_create(lu_g_mem, self->config.hold_blocks_size); 
		lu_user_assert(self->datum, "Cannot allocate Lu_Lim_List");

		self->datum->node_before_destroy 	= w_rec_datum_node_before_destroy_block;
		self->datum_lost_count				= 0;

		// w_layer_2_init(&self->layer_0, self);
		// w_layer_init(&self->layer_1, self);
		// w_layer_init(&self->layer_2, self);

		return self;
	}

	static void w_rec_datum_destroy_values_block(Lu_List self, lu_p_void value, lu_p_void p1)
 	{
 		if (value == NULL) return;

 		Lu_Data data = (Lu_Data) value;

 		lu_data_destroy(data, lu_g_mem);
 	}

	static void w_rec_destroy(W_Rec self)
	{
		lu_assert(self);

		if (!lu_list_is_empty((Lu_List) self->datum))
			lu_list_each_1p((Lu_List) self->datum, w_rec_datum_destroy_values_block, NULL);

		lu_lim_list_destroy(self->datum);

		// w_layer_deinit(&self->layer_2);
		// w_layer_deinit(&self->layer_1);
		// w_layer_2_deinit(&self->layer_0);

		mem_temp_free((lu_p_byte) self);
	}

///////////////////////////////////////////////////////////////////////////////
// 

	static void w_rec_hold(W_Rec self, Lu_Data data)
	{
		lu_assert(self);
		lu_assert(data);

		// if we cannot hold anymore we dispose oldest data (FIFO)
		if (lu_lim_list_count(self->datum) >= lu_lim_list_size(self->datum))
			++self->datum_lost_count;

		lu_lim_list_append(self->datum, (lu_p_void) data);
	}

	static void w_rec_save(W_Rec self)
	{

	}

	static void w_rec_reset(W_Rec self)
	{

	}

///////////////////////////////////////////////////////////////////////////////
// 

	static void w_rec_data_save(W_Rec self, Lu_Data data, lu_size block_i)
	{
		lu_user_assert_void(self, "W_Rec is NULL");
		lu_user_assert_void(data, "Lu_Data is NULL");

		switch (self->config.transf_algorithm)
		{
			case LU_TA_NONE:
				w_rec_ta_none(self, data);
				break;
			case LU_TA_STATIC_IMAGE:
				w_rec_ta_static_image(self, data);
				break;
			default:
				lu_user_assert_void(self, "Unknown transformation algorithm (transf_algorithm)! ");
				break;
		}

		if (w_rec_is_full(self))
		{
			w_rec_save(self);

			w_rec_reset(self);
		}
	}
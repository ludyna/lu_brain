/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// Lu_W_Space

	static Lu_W_Space lu_w_space__create(Lu_Config config, Lu_Comp_Calc comp_calc, lu_size width, lu_size height)
	{
		lu__assert(config);
		lu__assert(config->w_mem);
		lu__assert(comp_calc);

		Lu_W_Space self = (Lu_W_Space) lu_mem__alloc(config->w_mem, sizeof(struct lu_w_space));
		lu__assert(self);

		self->mem = config->w_mem;
		self->tables = lu_arr__create(self->mem, config->w_waves_size, false);
		lu__assert(self->tables);

		Lu_W_Table w_table;
		for (lu_size i = 0; i < config->w_waves_size; i++)
		{
			w_table = lu_w_table_comp__create(config, comp_calc, width, height);
			lu__assert(w_table);
			
			lu_arr__set(self->tables, i, (lu_p_void) w_table);
		}

		return self;
	}

	static void lu_w_space__destroy(Lu_W_Space self)
	{
		lu__assert(self);
		lu__assert(self->tables);

		Lu_W_Table w_table;
		for (lu_size i = 0; i < lu_arr__count(self->tables); i++)
		{
			w_table = (Lu_W_Table) lu_arr__get(self->tables, i);
			lu_w_table_comp__destroy(w_table);
		}

		lu_arr__destroy(self->tables);
		lu_mem__free(self->mem, (lu_p_byte) self);
	}

///////////////////////////////////////////////////////////////////////////////
//  

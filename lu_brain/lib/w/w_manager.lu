/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// 

	static Lu_W_Manager lu_w_manager__create(Lu_Mem mem, lu_size w_waves_size)
	{
		lu__assert(mem);
		lu__assert(w_waves_size > 0);

		Lu_W_Manager self = (Lu_W_Manager) lu_mem__alloc(mem, sizeof(struct lu_w_manager));
		lu__assert(self);

		self->mem = mem;
		self->waves = lu_mem_table__create(mem, sizeof(Lu_Wave), w_waves_size, 0, LU_MFT__FREEABLE);
		lu__assert(self->waves);

		return self;
	}

	static void lu_w_manager__destroy(Lu_W_Manager self)
	{
		lu__assert(self);
		lu__assert(self->waves);
		lu__assert(self->mem);

		lu_mem_table__destroy(self->waves);
		lu_mem__free(self->mem, (lu_p_byte) self);
	}

///////////////////////////////////////////////////////////////////////////////
// 

	static bool lu_w_manager__register_wave(Lu_W_Manager self, Lu_Wave wave)
	{
		lu__assert(self);
		lu__assert(wave);
		lu__assert(self->waves);

		wave->manager_addr = lu_mem_record__alloc(self->waves);
		
		if (!wave->manager_addr)
		{
			return false;
		}

		Lu_Wave* wave_addr = (Lu_Wave*) wave->manager_addr;

		*wave_addr = wave;

		lu__assert(*wave_addr == wave);

		wave->id = lu_mem_table__record_ix(self->waves, wave->manager_addr);

		// to double check
		lu__assert(lu_w_manager__get_wave_by_id(self, wave->id) == wave);

		return true;
	}

	static void lu_w_manager__unregister_wave(Lu_W_Manager self, Lu_Wave wave)
	{
		lu__assert(self);
		lu__assert(wave);
		lu__assert(self->waves);

		lu_mem_record__free(self->waves, lu_mem_table__get(self->waves, wave->id));

	}

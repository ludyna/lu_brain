/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
//  

	static void lu_w_match_processor__init(
		Lu_W_Match_Processor self, 
		Lu_S s, 
		Lu_Config config, 
		Lu_W_Match_Cell_Mem match_cell_mem,
		Lu_La_Column la_column
	)
	{
		lu__assert(self);
		lu__assert(s);
		lu__assert(config); 
		lu__assert(config->w_mem);
		lu__assert(config->w_match_results_size>0);
		lu__assert(match_cell_mem);
		lu__assert(la_column);

		self->mem = config->w_mem;

		self->w_match_results_size = config->w_match_results_size;
		self->w_match_sig_breakpoint = config->w_match_sig_breakpoint;

		lu_block_id__reset(&self->block_id);
		self->wave_ix = LU_WAVE_IX__NOT_SET;

		self->s = s;
		self->match_cell_mem = match_cell_mem;

		self->curr_list = lu_w_match_list__create(self->mem, config->w_match_processor_queue_size);
		lu__assert(self->curr_list);

		self->next_list = lu_w_match_list__create(self->mem, config->w_match_processor_queue_size);
		lu__assert(self->next_list);

		// For lu_labels
		self->la_mem_table = lu_mem_table__create(
			self->mem, 
			sizeof(struct lu_label),
			config->la_labels_size, 
			0,
			LU_MEM_TABLE__DEFAULT
		);
		lu__alloc_assert(self->la_mem_table);;

		self->la_column = la_column;
		self->s_list = NULL;

		self->sorted_results = (Lu_Label*) lu_mem__alloc(self->mem, sizeof(Lu_Label) * self->w_match_results_size);
		lu__alloc_assert(self->sorted_results);


	}

	static void lu_w_match_processor__deinit(Lu_W_Match_Processor self)
	{
		lu__assert(self);
		lu__assert(self->mem);
		lu__assert(self->next_list);
		lu__assert(self->curr_list);
		lu__assert(self->la_mem_table);

		if (self->sorted_results)
			lu_mem__free(self->mem, (lu_p_byte) self->sorted_results);

		if (self->s_list)
			lu_s_list__destroy(self->s_list);

		lu_w_match_list__destroy(self->curr_list);
		lu_w_match_list__destroy(self->next_list);

		lu_mem_table__destroy(self->la_mem_table);
	} 

///////////////////////////////////////////////////////////////////////////////
//  

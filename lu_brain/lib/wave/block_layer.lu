/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// 

	static Lu_Seq_Rg lu_seq_rg__create(Lu_Mem mem, Lu_S s)
	{
		lu__assert(mem);
		// lu__assert(s);
		// lu__assert(s->recs);

		Lu_Seq_Rg self = (Lu_Seq_Rg) lu_mem__alloc(mem, sizeof(struct lu_seq_rg));
		lu__assert(self);


		self->mem = mem;
		self->s = s;
		// self->recs = lu_arr__create(mem, lu_arr__count(s->recs), false);

		// Lu_S_Rec_Rg lu_m_rec_rg;
		// Lu_Rec_Rg rec;
		// for(lu_size i = 0; i < lu_arr__count(s->recs); i++)
		// {
		// 	lu_m_rec_rg = (Lu_S_Rec_Rg) lu_arr__get(s->recs, i);
		// 	lu__assert(lu_m_rec_rg);

		// 	rec = lu_rec_rg__create(mem, lu_m_rec_rg);
		// 	lu_arr__append(self->recs, rec);
		// }

		return self;
	}

	static void lu_seq_rg__destroy(Lu_Seq_Rg self)
	{
		lu__assert(self);
		lu__assert(self->mem);
		// lu__assert(self->recs);

		// Lu_Rec_Rg rec;
		// if (self->recs)
		// 	for(lu_size i = 0; i < lu_arr__count(self->recs); i++)
		// 	{
		// 		rec = (Lu_Rec_Rg) lu_arr__get(self->recs, i);
		// 		if (rec)
		// 			lu_rec_rg__destroy(rec, self->mem);
		// 	}

		// lu_arr__destroy(self->recs);

		lu_mem__free(self->mem, (lu_p_byte) self);
	}

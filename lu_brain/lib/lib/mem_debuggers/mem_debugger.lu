/**
	Copyright Â© 2021 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// Mem_Debugger 

	Mem_Debugger mem_debugger_create(Lu_Mem mem)
	{
		lu__assert(mem);
		lu__assert(!mem->debugger); // mem already has debugger

		Mem_Debugger self = (Mem_Debugger) calloc(1, sizeof(struct lu_mem_debugger));
		lu__assert(self);

		self->super.register_alloc 		= mem_debugger_register_alloc;
		self->super.register_realloc 	= mem_debugger_register_realloc;
		self->super.register_free 		= mem_debugger_register_free;
		self->mem 						= mem;
		self->mem->debugger 			= (Lu_I_Mem_Debugger) self;  // attach

		self->items 					= calloc(LU_MD_HASH_SIZE, sizeof(Lu_Md_Item));
		self->items_size 				= LU_MD_HASH_SIZE;

		self->alloc_size				= 0;
		self->alloc_count				= 0;
		self->freed_size				= 0;
		self->freed_count				= 0;
		self->realloc_count 			= 0;

		return self;
	}

	void mem_debugger_destroy(Mem_Debugger self, lu_bool deallocate_leaks)
	{
		lu__assert(self);
		lu__assert(self->mem); // not attached?

		if (self->mem->debugger) self->mem->debugger = NULL; // detach

		Lu_Md_Item item;
		Lu_Md_Item current;
		for (lu_size i = 0; i < self->items_size; i++)
		{
			item = self->items[i];

			while((current = item))
			{
				item = item->prev;

				lu_md_item_destroy(current, deallocate_leaks);
			}
		}

		free((lu_p_void) self->items);
		free((lu_p_void) self);
	}

	void mem_debugger_print(Mem_Debugger self)
	{
		lu__assert(self);

		lu__debug("\n=========> Mem_Debugger <=========");
		lu__debug("\n%-12s %lu", "alloc_size:", self->alloc_size);
		lu__debug("\n%-12s %lu", "freed_size:", self->freed_size);
		lu__debug("\n%-12s %lu", "alloc_count:", self->alloc_count);
		lu__debug("\n%-12s %lu", "freed_count:", self->freed_count);

		if (!mem_debugger_is_all_clear(self))
		{
			Lu_Md_Item item;
			lu__debug("\n%7s | %10s | %-40s | %-40s", "#", "Size", "Alloc", "Free");
			lu__debug("\n----------------------------------------------------------------------------------------------------------");
			for (lu_size i = 0; i < self->items_size; i++)
			{
				item = self->items[i];

				if (!item) continue;
			
				lu__debug("\n%7lu | %10lu | %-40s | %-40s", i, item->size, item->alloc_path, "");

				while((item = item->prev))
				{
					lu__debug("\n%7lu | %10lu | %-40s | %-40s", i, item->size, item->alloc_path, "");
				}
			}
		}

		lu__debug("\n");
	}

	void mem_debugger_register_alloc(	Lu_I_Mem_Debugger imd, lu_p_byte address, lu_size size,  
										const char* func, const char* file, int line)
	{
		if (address == NULL) 
		{
			lu_debug_message_internal(file, line, "\nMem_Debugger: Alloc failed!");
			return;
		} 

		//lu__debug("\nMEM DEBUGGER REGISTER ALLOC");
		lu__assert(imd);
		lu__assert(size > 0);

		Mem_Debugger self = (Mem_Debugger) imd;
		lu_size i = mem_debugger_index(address);
		lu__assert(i < LU_MD_HASH_SIZE);

		Lu_Md_Item 				prev;
		Lu_Md_Item item 		= lu_md_item_create();


		item->address 			= address; 
		item->size 				= size;

		char buff[512];
		sprintf(buff, "%s:%u", file, line);

		lu_size len = strlen(buff);
		
		if (len > LU_MD_ITEM_FILE_SIZE)
		{
			lu_size start = len - LU_MD_ITEM_FILE_SIZE + 1; // +1 for 0 to end string
			strncpy(item->alloc_path, buff + start, len - start);
		}
		else
		{
			strncpy(item->alloc_path, buff, LU_MD_ITEM_FILE_SIZE);
		}

		item->line  			= line;

		if (self->items[i] == NULL)
		{
			self->items[i] = item;
		}
		else
		{
			prev = self->items[i];
			lu__assert(item->prev == NULL);
			item->prev = prev;
			lu__assert(prev->next == NULL);
			prev->next = item;
			self->items[i] = item;
		}

		self->alloc_size += item->size; 
		++self->alloc_count;
	}
	
	void mem_debugger_register_realloc(	Lu_I_Mem_Debugger imd, lu_p_byte address, lu_size size,  
										const char* func, const char* file, int line)
	{
		if (address == NULL) 
		{
			lu_debug_message_internal(file, line, "\nMem_Debugger: Realloc failed!");
			return;
		} 

		lu__debug("\n!!! MEM DEBUGGER REGISTER REALLOC !!!");
	}

	void mem_debugger_register_free(	Lu_I_Mem_Debugger imd, lu_p_byte address, 
										const char* func, const char* file, int line)
	{
		if (address == NULL) 
		{
			lu_debug_message_internal(file, line, "\nMem_Debugger: Trying to free NULL!");
			return;
		}

		//lu__debug("\nMEM DEBUGGER REGISTER FREE");
		lu__assert(imd);

		Mem_Debugger self	= (Mem_Debugger) imd;
		lu_size i 			= mem_debugger_index(address);
		lu__assert(i < LU_MD_HASH_SIZE);

		Lu_Md_Item item 	= self->items[i];
		Lu_Md_Item temp;

		if (item == NULL)
		{
			lu_debug_message_internal(file, line, "\nMem_Debugger: Double free?! Seems pointer was already freed.");
			return;
		} 

		if (item->address == address)
		{
			temp = item->prev;
			self->items[i] = temp;
		}
		else 
		{
			while(item && item->address != address)
			{
				item = item->prev;
			}

			if (item == NULL)
			{
				lu_debug_message_internal(file, line, "\nMem_Debugger: Double free?! Seems pointer was already freed.");
				return;
			}
		}

		self->freed_size += item->size;
		++self->freed_count;
		lu_md_item_destroy(item, false);
	}	

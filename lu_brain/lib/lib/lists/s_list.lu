/**
	Copyright Â© 2022 Oleh Ihorovych Novosad (Novossaad)
*/

///////////////////////////////////////////////////////////////////////////////
// Lu_S_Node

Lu_S_Node lu_s_node__create(Lu_Mem_Table mem_table, lu_size limit_size)
{
	Lu_S_Node node = (Lu_S_Node) lu_mem_record__alloc(mem_table);

	lu_s_node__init(node, mem_table, limit_size);

	return node;
}

void lu_s_node__destroy(Lu_Mem_Table mem_table, Lu_S_Node* s_node)
{
	lu_list__node_destroy_all((Lu_List) &(*s_node)->values);
	lu_mem_record__free(mem_table, (lu_p_byte) *s_node);
	*s_node = NULL;
}

 
///////////////////////////////////////////////////////////////////////////////
// Lu_S_List

static void lu_s_list__build_header(Lu_S_List self)
{
	Lu_S_Node above;  
	
	Lu_S_Node below 	= lu_s_node__create(self->mem_table, self->limit_size); 
	below->value 	= NULL; 

	for (lu_size i = 1; i < self->level_size; i++)
	{
		above			= lu_s_node__create(self->mem_table, self->limit_size);

		above->below	= below;
		above->value 	= NULL;

		below->above 	= above;

	 	below 			= above;
	}

	self->header = below;
}

Lu_S_List lu_s_list__create(Lu_Mem mem, lu_size limit_size, lu_fp_compare compare, enum lu_s_list_side_type over_limit_remove_side)
{
	lu__assert(limit_size > 0);
	Lu_S_List self = (Lu_S_List) lu_mem__alloc(mem, sizeof(struct lu_s_list));
	lu__assert(self != NULL);

	// Initialize

	self->mem 						= mem;
	self->limit_size 				= limit_size;
	self->over_limit_remove_side 	= over_limit_remove_side;

	lu_size level_size 	= (lu_size) round(log10(self->limit_size) / log10(2));
	self->level_size 	= level_size <= 0 ? 1 : level_size;
	self->count 		= 0;
	self->compare 		= compare;

	self->mem_table 	= lu_mem_table__create(
							mem, 
							sizeof(struct lu_s_node), 
							self->limit_size * 3 + self->level_size, 
							0, 
							LU_MEM_TABLE__FREEABLE
						);

	lu__assert(self->mem_table != NULL);

	self->first			= NULL;
	self->last			= NULL;

	lu_s_list__build_header(self);

	return self;
}

void lu_s_list__destroy(Lu_S_List self)
{
	lu__assert(self);

	lu_mem_table__destroy(self->mem_table);

	lu_mem__free(self->mem, (lu_p_byte) self);

}

///////////////////////////////////////////////////////////////////////////////
// Main public methods

static void s_list_path_debug(Lu_S_List self, Lu_S_Node* path)
{
	// Lu_S_Node node;
	// lu__debug("\n\n~~~~~~~~~~ PATH count: %ld ~~~~~~~~~~", self->level_size);
	// int i = (int) self->level_size - 1;

	// do
	// {
	// 	node = path[i];
	// 	if (node == NULL)
	// 	{
	// 		lu__debug("\n%d: ERROR", i);
	// 	}
	// 	else if (node->value == NULL)
	// 	{
	// 		lu__debug("\n%d: NULL", i);
	// 	}
	// 	else
	// 	{
	// 		lu__debug("\n%d: %.1f", i, ((Neu)(node->value))->p);
	// 	}
	// 	--i;
	// } while (i > 0);

	// lu__debug("\n");
}

static Lu_S_Node build_column(Lu_S_List self, Lu_S_Node* path, lu_p_void value)
{ 
	Lu_S_Node above;

	Lu_S_Node below 		= lu_s_node__create(self->mem_table, self->limit_size); 
	Lu_S_Node bottom		= below;
	Lu_S_Node prev, next;

	prev 			= path[0];
	next 			= path[0]->next;

	below->value 		= value; 
	below->next 		= next;
	below->prev			= prev;

	if (next)	
		next->prev		= below;

	if (prev)
		prev->next 		= below; 

	for (lu_size i = 1; i < self->level_size && toss_coin(); i++)
	{
		above 			= lu_s_node__create(self->mem_table, self->limit_size);

		above->below 	= below;
		below->above 	= above;

		above->value 	= value;

		prev 			= path[i];
		next 			= path[i]->next;

		above->next 	= next;
		above->prev 	= prev;
		
		if (next) 
			next->prev 	= above;

		if (prev) 
			prev->next	= above;

		below 			= above;
	}

	return bottom;
}

static void s_list_remove(Lu_S_List self, Lu_S_Node bottom)
{
	if (bottom == NULL) return;

	Lu_Lim_List values = &bottom->values;
	if (lu_lim_list__count(values) > 0)
	{
		lu__assert(lu_lim_list__get_last_node(values) != NULL);
		lu_lim_list__node_remove(values, lu_lim_list__get_last_node(values));
		goto end;
	}

	Lu_S_Node curr = bottom;
	Lu_S_Node prev = bottom->prev, next = bottom->next, above;

	if (prev->value == NULL) 	self->first = next;
	if (next == NULL) 			self->last = prev;
	
	while (curr)
	{
		prev = curr->prev;
		next = curr->next;

		if (prev)
			prev->next = next;

		if (next)
			next->prev = prev;

		curr->prev = NULL;
		curr->next = NULL;
		
		above = curr->above;

		curr->below = NULL;
		curr->above = NULL;

		if (above)
			above->below = NULL;

		lu_s_node__destroy(self->mem_table, &curr);

		curr = above;
	}

end:
	--self->count;
}

void lu_s_list__debug(Lu_S_List self)
{
	Lu_S_Node head = self->header;
	Lu_S_Node curr;

	lu_size i = self->level_size - 1;
	lu__debug_message("======= SLIST ======");
	while (head)
	{
		lu__debug("\n%ld:  ", i);
		curr = head->next;
		while (curr)
		{
			if (curr->value == NULL) lu__debug("NULL, ");
			else 
			{
				//lu__debug("%.1f", (float)(*curr->value));	
				if (lu_lim_list__count(&curr->values) > 0) lu__debug("(%ld)", lu_lim_list__count(&curr->values) + 1);
				lu__debug(", ");
			}

			curr = curr->next;
		}

		head = head->below;
		--i;
	}
	
}

static Lu_S_Node s_list_insert(Lu_S_List self, lu_p_void value)
{
	Lu_S_Node path[self->level_size];

	lu_bool eq	= false;
 	lu_size i 	= self->level_size - 1;
 	path[i] 	= self->header;

 	Lu_S_Node curr, tmp;
	while (1)
	{
		if (path[i] == NULL) break;

		curr = path[i]->next;

		if (curr == NULL)
		{
			tmp = path[i]->below;
			if (tmp) path[--i] = tmp;
			else break;

			continue;
		}

		lu_value cmp = self->compare(value, curr->value);

		if (cmp == 0)
		{
			path[i] = curr;
	 		while (curr->below) 
	 		{
	 			path[--i] = curr->below;
	 			curr = curr->below;
	 		}
	 		eq = true;
	 		break;
		}

	 	if (cmp < 0)
	 	{
			tmp = path[i]->below;
			if (tmp) path[--i] = tmp;
			else break;

	 		continue;
	 	}

	 	path[i] = curr;
	}

	if (eq)
	{
		lu_lim_list__append(&path[0]->values, value);
	}	
	else 
	{
		//s_list_path_debug(self, path);
		curr = build_column(self, path, value);
			
		if (path[0]->value == NULL) self->first = curr;
		if (curr->next == NULL) 	self->last = curr;
	}

	++self->count;

	return curr;
}

Lu_S_Node lu_s_list__add(Lu_S_List self, lu_p_void value)
{
	if (self->first == NULL) return s_list_insert(self, value);

	if (self->count >= self->limit_size)  
	{
		if (self->over_limit_remove_side == LU_S_LST__FIRST)
		{
			if (self->compare(self->first->value, value) >= 0) return NULL;

			s_list_remove(self, self->first);
		} 
		else 
		{
			if (self->compare(self->last->value, value) <= 0) return NULL;

			s_list_remove(self, self->last);
		}		
	}

	return s_list_insert(self, value);
}

///////////////////////////////////////////////////////////////////////////////
// Other public methods
/**
	Copyright Â© 2021 Oleh Ihorovych Novosad (Novossaad)
*/

///////////////////////////////////////////////////////////////////////////////
// Init, create and destroy

	Lu_Lim_List lu_lim_list_create(Lu_Mem mem, lu_size max_size_in_items)
	{
		lu__assert(mem);
		lu__assert(max_size_in_items > 0);
	
		Lu_Lim_List self 	= (Lu_Lim_List) lu_mem__alloc(mem, sizeof(struct lu_lim_list));
		lu__assert(self);

		lu_list__init(&self->super, mem);

		self->mem_table 	= lu_mem_table_create(
			mem, 
			sizeof(struct lu_l_node),
			max_size_in_items,
			0,
			MTF_FREEABLE
		);
		lu__assert(self->mem_table);

		self->max_size 				= max_size_in_items;
		self->node_after_create 	= NULL;
		self->node_before_destroy 	= NULL;

		return self;
	}

	void lu_lim_list_destroy(Lu_Lim_List self)
	{
		lu__assert(self);

		lu_mem_table_destroy(self->mem_table);
		lu_mem__free(self->super.mem, (lu_p_byte) self);
	}

	Lu_L_Node lu_lim_list_l_node_create(Lu_List list)
	{
		lu__assert(list);

		Lu_Lim_List self = (Lu_Lim_List) list;
		lu__assert(self->mem_table);

		Lu_L_Node node = (Lu_L_Node) lu_mem_record_alloc(self->mem_table);
		lu__assert(node);

		if (self->node_after_create) self->node_after_create(self, node);

		return node;
	}

	void lu_lim_list_l_node_destroy(Lu_List list, Lu_L_Node* l_node)
	{
		lu__assert(list);
		lu__assert(*l_node);

		Lu_Lim_List self = (Lu_Lim_List) list;
 		lu__assert(self->mem_table);

 		if (self->node_before_destroy) self->node_before_destroy(self, *l_node);

		lu_mem_record_free(self->mem_table, (lu_p_byte) *l_node);
		*l_node = NULL;
	}

	Lu_L_Node lu_lim_list_append(Lu_Lim_List self, lu_p_void value)
	{
		// if out of items, remove first
		if (lu_lim_list_count(self) >= self->max_size)
			lu_lim_list_node_remove(self, lu_list__first_node(&self->super));

		return lu_list__node_append_with_creator((Lu_List) self, value, lu_lim_list_l_node_create);
	}
	
	void lu_lim_list_node_remove(Lu_Lim_List self, Lu_L_Node node)
	{
		lu_list__node_remove_with_destroyer((Lu_List) self, node, lu_lim_list_l_node_destroy);
	}

	void lu_lim_list_clear(Lu_Lim_List self)
	{
		Lu_List list = (Lu_List) self;

		if (self->node_before_destroy)
		{
			Lu_L_Node curr = list->first;
			Lu_L_Node to_dest;
			while (curr)
			{
				to_dest = curr;
				curr 	= curr->next;

				self->node_before_destroy(self, to_dest);
			}
		}	

		lu_mem_table_reset(self->mem_table);

		lu_list__init(list, list->mem);
	}

/**
	Copyright Â© 2021 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// Lu_Mem_Stack_Table

	// Careful: reset "invalidates" record pointers. Make sure you are not using any.
	void lu_mem_stack_table_reset_internal(Lu_Mem_Table self, const char* func, const char* file, int line)
	{
		lu_assert(self);

		lu_p_byte start 			= (lu_p_byte) self;

		Lu_Mem_Stack_Table st = (Lu_Mem_Stack_Table) self;

		st->super.records_start 			= start + sizeof(struct lu_mem_stack_table);
		st->super.records_pos				= st->super.records_start;
		st->super.records_end				= st->super.records_start + st->super.table_size_in_records * st->super.record_size_in_bytes;
		st->super.free_start 				= (lu_p_byte*) st->super.records_end;
		st->super.records_count 			= 0;
		st->super.free_count				= 0;
	}

	void lu_mem_stack_table_realloc_internal(
		Lu_Mem_Table self, 
		lu_size new_size_in_bytes, 
		lu_flags flags, 
		const char* func, 
		const char* file, 
		int line
	)
	{
		lu_debug_message("NOT IMPLEMENTED");
	}

	Lu_Mem lu_mem_stack_table_mem_get(Lu_Mem_Table self)
	{
		Lu_Mem_Stack_Table perm = (Lu_Mem_Stack_Table) self;

		return (Lu_Mem) perm->mem_stack;
	}

	Lu_Mem_Stack_Table lu_mem_stack_table_create(
		Lu_Mem_Stack 			mem_stack, 
		lu_size 			record_size_in_bytes, 
		lu_size 			table_size_in_records, 
		lu_value 			percent,
		lu_flags 			flags,
		const char* 		func, 
		const char* 		file,
		int 				line
	)
	{
		if (record_size_in_bytes == 0) return NULL;

		if (table_size_in_records == 0 && percent == 0) return NULL;

		if (percent > 100.0) return NULL;

		if (table_size_in_records == 0 && percent > 0)
		{
			// x * ps + x * is + sisa = a
			// x * (ps + is) = a - sisa
			// x = (a - sisa)/(ps + is)

			lu_size a = lu_mem_stack_avail(mem_stack) * percent  / 100.0;

			lu_size fis = record_size_in_bytes;
			if (flags & MTF_FREEABLE) 
				fis += sizeof(lu_p_byte);

			table_size_in_records = (a - sizeof(struct lu_mem_stack_table)) / fis;
		}

		lu_size full_size = sizeof(struct lu_mem_stack_table) + record_size_in_bytes * table_size_in_records;
		
		if (flags & MTF_FREEABLE) 
			full_size += sizeof(lu_p_byte) * table_size_in_records;

		Lu_Mem mem = (Lu_Mem) mem_stack;
		lu_p_byte start = lu_mem_alloc(mem, full_size);

		if (start == NULL) return NULL;

		Lu_Mem_Stack_Table self = (Lu_Mem_Stack_Table) start;

		// super
 
 		self->super.reset 					= lu_mem_stack_table_reset_internal;
		self->super.realloc 				= lu_mem_stack_table_realloc_internal;
		self->super.destroy 				= lu_mem_table_destroy_default;
		self->super.record_alloc 			= lu_mem_table_record_alloc_default;
		self->super.record_free 			= lu_mem_table_record_free_default;
		self->super.size_in_bytes 			= lu_mem_table_size_in_bytes_default;
		self->super.mem_get 				= lu_mem_stack_table_mem_get;

		self->super.record_size_in_bytes 	= record_size_in_bytes;
		self->super.table_size_in_records 	= table_size_in_records;
		self->super.flags 					= flags;
		self->super.full_size_in_bytes 		= full_size;

		// own
		self->mem_stack 				= mem_stack;

		lu_mem_table_reset(((Lu_Mem_Table) self));

		return self;
	}


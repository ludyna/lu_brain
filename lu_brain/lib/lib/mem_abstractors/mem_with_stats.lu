/**
	Copyright Â© 2021 Oleh Ihorovych Novosad 
*/


///////////////////////////////////////////////////////////////////////////////
// Lu_Mem_With_Stats 

	// Alloc, realloc and free
	lu_p_byte lu_mem_with_stats_alloc_internal(Lu_Mem mem, lu_size size, const char* func, const char* file, int line)
	{
		Lu_Mem_With_Stats self = (Lu_Mem_With_Stats) mem;
		lu_size s = sizeof(lu_size) + size;
		lu_size* ret = (lu_size*) lu_mem__alloc(self->parent_mem, s);

		if (!ret) return (lu_p_byte) ret;

		*ret = s;

		++self->alloc_count;
		self->alloc_size += s;

		return (lu_p_byte) &ret[1];
	}

	lu_p_byte lu_mem_with_stats_realloc_internal(Lu_Mem mem, lu_p_byte p, lu_size size_in_bytes, const char* func, const char* file, int line)
	{
		Lu_Mem_With_Stats self = (Lu_Mem_With_Stats) mem;

		lu_size old_size = *((lu_size*)p - 1);

		lu_size new_size = size_in_bytes + sizeof(lu_size);
		lu_p_byte new_p = lu_mem__realloc(self->parent_mem, (lu_p_byte)((lu_size*)p - 1), new_size);

		if (!new_p) return new_p;

		lu_size* new_p_size = (lu_size*) new_p;
		*new_p_size = new_size;

		++self->realloc_count;
		self->free_size += old_size;
		self->alloc_size += new_size;

		return (lu_p_byte) &new_p_size[1];
	}

	void lu_mem_with_stats_free_internal(Lu_Mem mem, lu_p_byte p, const char* func, const char* file, int line)
	{
		Lu_Mem_With_Stats self = (Lu_Mem_With_Stats) mem;

		++self->free_count;
		self->free_size += *((lu_size*)p - 1);

		lu_mem__free(self->parent_mem, (lu_p_byte)((lu_size*)p - 1));
	}

	// Memory stats

	lu_size lu_mem_with_stats_used_internal(Lu_Mem mem)
	{
		Lu_Mem_With_Stats self = (Lu_Mem_With_Stats) mem;

		return self->alloc_size - self->free_size;
	}

	// Destroy memory
	void lu_mem_with_stats_destroy_internal(Lu_Mem self, Lu_Mem parent_mem, const char* func, const char* file, int line)
	{
		lu_mem__free(parent_mem, (lu_p_byte) self);
	}


///////////////////////////////////////////////////////////////////////////////
// Lu_Mem_With_Stats Create

	Lu_Mem_With_Stats lu_mem_with_stats_create(Lu_Mem parent_mem)
	{
		Lu_Mem_With_Stats self = (Lu_Mem_With_Stats) lu_mem__alloc(parent_mem, sizeof(struct lu_mem_with_stats));
		lu__assert(self);

 		self->parent_mem 		= parent_mem;
		self->alloc_count 		= 0;
		self->free_count 		= 0;
		self->realloc_count 	= 0;

		self->alloc_size 		= 0;
		self->free_size 		= 0;

		// alloc, realloc, free
		self->super.alloc 			= lu_mem_with_stats_alloc_internal;
		self->super.realloc 		= lu_mem_with_stats_realloc_internal;
		self->super.free 			= lu_mem_with_stats_free_internal;

		// destroy
		self->super.destroy 		= lu_mem_with_stats_destroy_internal;

		// stats
		self->super.preallocated 	= self->parent_mem->preallocated;
		self->super.used 			= lu_mem_with_stats_used_internal;

		// table create
		self->super.table_create 	= self->parent_mem->table_create;

		return self;
	}
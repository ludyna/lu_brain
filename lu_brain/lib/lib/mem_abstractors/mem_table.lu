/**
	Copyright Â© 2021 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// Lu_Mem_Table

	void lu_mem_table_reset_default(Lu_Mem_Table self, const char* func, const char* file, int line)
	{
		lu_p_byte start 			= (lu_p_byte) self;
		self->records_start 		= start + sizeof(struct lu_mem_table);
		self->records_pos			= self->records_start;
		self->records_end			= self->records_start + self->table_size_in_records * self->record_size_in_bytes;
		self->free_start 			= (lu_p_byte*) self->records_end;
		self->records_count 		= 0;
		self->free_count			= 0;
	}

    void lu_mem_table_realloc_default(
		Lu_Mem_Table self, 
		lu_size new_size_in_bytes, 
		lu_flags flags, 
		const char* func, 
		const char* file, 
		int line
	)
	{
		lu_debug_message("NOT IMPLEMENTED");
	}

	void lu_mem_table_destroy_default(Lu_Mem_Table self, const char* func, const char* file, int line)
	{
		lu_mem_free(lu_mem_table_mem_get(self), (lu_p_byte) self);
	}
	
	lu_p_byte lu_mem_table_record_alloc_default(Lu_Mem_Table self, const char* func, const char* file, int line)
	{
		lu_p_byte res;
		if (self->records_pos < self->records_end)
		{
			res = self->records_pos;
			self->records_pos += self->record_size_in_bytes;
		}
		else 
		{
			if (self->free_count <= 0)
			{
				lu_user_debug_internal(func, file, line, "MEM_TABLE allocation failed");
				return NULL; // out of available memory
			}
			res = self->free_start[--self->free_count];
		}

		++self->records_count;

		return res;
	}

	void lu_mem_table_record_free_default(Lu_Mem_Table self, lu_p_byte record, const char* func, const char* file, int line)
	{
		if (record == NULL) return;  // should prob debug this

		if (!(self->flags & MTF_FREEABLE)) return;

		lu_assert(self->records_count > 0);
		lu_assert(self->free_count < self->table_size_in_records); 

		self->free_start[self->free_count++] = record;

		--self->records_count;
	}

	lu_size lu_mem_table_size_in_bytes_default(Lu_Mem_Table self)
	{
		return self->full_size_in_bytes;
	}


	Lu_Mem lu_mem_table_mem_get_default(Lu_Mem_Table self)
	{
		return lu_g_mem;
	}

	Lu_Mem_Table lu_mem_table_create_default(
		Lu_Mem 		mem, 
		lu_size 	record_size_in_bytes, 
		lu_size 	table_size_in_records, 
		lu_value 	percent,
		lu_flags 	flags,
		const char* func, 
		const char* file,
		int line
	)
	{
		if (record_size_in_bytes == 0) return NULL;

		if (table_size_in_records == 0) return NULL;

		if (percent > 100.0) return NULL;

		lu_size full_size = sizeof(struct lu_mem_table) + record_size_in_bytes * table_size_in_records;
		
		if (flags & MTF_FREEABLE) 
			full_size += sizeof(lu_p_byte) * table_size_in_records;

		lu_p_byte start = lu_mem_alloc(mem, full_size);

		if (start == NULL) return NULL;

		Lu_Mem_Table self 				= (Lu_Mem_Table) start;

		self->reset 				= lu_mem_table_reset_default;
		self->realloc 				= lu_mem_table_realloc_default;
		self->destroy 				= lu_mem_table_destroy_default;
		self->record_alloc 			= lu_mem_table_record_alloc_default;
		self->record_free 			= lu_mem_table_record_free_default;
		self->size_in_bytes 		= lu_mem_table_size_in_bytes_default;
		self->mem_get 				= lu_mem_table_mem_get_default;

		self->record_size_in_bytes 	= record_size_in_bytes;
		self->table_size_in_records = table_size_in_records;
		self->flags 				= flags;
		self->full_size_in_bytes 	= full_size;

		lu_mem_table_reset(self);

		return self;
	}

/**
	Copyright Â© 2021 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// Lu_Mem_Perm

	// 
	// All allocations should be at the beginning of app existance executed 
	// in single thread. No multi-threading support is needed.
	//
	lu_p_byte lu_mem_stack_alloc_internal(Lu_Mem mem, lu_size size_in_bytes, const char* func, const char* file, int line)
	{
		Lu_Mem_Perm self = (Lu_Mem_Perm) mem;

		if (self->buff_pos + size_in_bytes > self->buff_end)
		{
			char msg[256];
			sprintf(
				msg, 
				"MEM_PERM alloc %ld bytes failed. Used %ld from %ld bytes.", 
				size_in_bytes,
				self->buff_pos - self->buff_start, 
				self->size_in_bytes
			);

			lu_user_debug_internal(func, file, line, msg);
			return NULL;
		}

		lu_p_byte tmp 	= self->buff_pos;
		self->buff_pos 	+= size_in_bytes;

		return tmp;
	} 

	lu_p_byte lu_mem_stack_realloc_internal(Lu_Mem self, lu_p_byte p, lu_size size_in_bytes, const char* func, const char* file, int line)
	{
		lu_debug_message_internal(file, line, "MEM PERM REALLOC NOT IMPLEMENTED");
		return NULL;
	}

	void lu_mem_stack_free_internal(Lu_Mem self, lu_p_byte p, const char* func, const char* file, int line)
	{
		lu_debug_message_internal(file, line, "MEM PERM FREE NOT IMPLEMENTED");
	}

	void lu_mem_stack_destroy_internal(Lu_Mem self, Lu_Mem parent_mem, const char* func, const char* file, int line)
	{
		lu_mem_free(parent_mem, (lu_p_byte) self);
	}

	Lu_Mem_Table lu_mem_table_perm_create_internal(
		Lu_Mem 		mem, 
		lu_size 	record_size_in_bytes, 
		lu_size 	table_size_in_records, 
		lu_value 	percent,
		lu_flags 	flags,
		const char* func, 
		const char* file,
		int 		line
	)
	{
		return (Lu_Mem_Table) lu_mem_table_perm_create(
			(Lu_Mem_Perm) mem,
			record_size_in_bytes,
			table_size_in_records,
			percent,
			flags,
			func,
			file,
			line
		); 
	}

	Lu_Mem_Perm lu_mem_stack_create(Lu_Mem parent_mem, lu_size size_in_bytes)
	{
		lu_assert(size_in_bytes > sizeof(struct lu_mem_stack));

		lu_p_void buff_start	= lu_mem_alloc(parent_mem, size_in_bytes);

		if (buff_start == NULL) return NULL;

		Lu_Mem_Perm self 				= (Lu_Mem_Perm) buff_start;

		self->super.debugger  		= NULL; // debugger makes no much sense for mem_stack
		self->super.alloc 			= lu_mem_stack_alloc_internal;
		self->super.realloc 		= lu_mem_stack_realloc_internal;
		self->super.free 			= lu_mem_stack_free_internal;
		self->super.destroy 		= lu_mem_stack_destroy_internal;
		self->super.table_create 	= lu_mem_table_perm_create_internal;

		self->buff_start 			= (lu_p_byte) buff_start;
		self->buff_end				= self->buff_start + size_in_bytes;
		self->buff_pos 				= self->buff_start + sizeof(struct lu_mem_stack);
		self->size_in_bytes 		= size_in_bytes;

		return self;
	}


/**
	Copyright Â© 2021 Oleh Ihorovych Novosad
*/
 
///////////////////////////////////////////////////////////////////////////////
// Structs and types

///////////////////////////////////////////////////////////////////////////////
// Prototypes
 
///////////////////////////////////////////////////////////////////////////////
// Create and destroy

Arr arr_create(Lu_Mem mem, lu_size size, lu_bool allow_realloc)
{
	lu_user_assert(size > 0, "size should be greater than zero");
	lu_user_assert(mem, "Lu_Mem is NULL");

	Arr self = (Arr) lu_mem_alloc(mem, sizeof(struct arr));
	lu_user_assert(self, "Unable to allocate array");
	
	// Initialize
	self->size 			= size;
	self->count 		= 0;
	self->items 		= (lu_p_void*) lu_mem_alloc(mem, self->size * sizeof(lu_p_void));
 	self->allow_realloc = allow_realloc;
 	self->mem 			= mem;

	// init with NULLs for safety 
	for(lu_size i = 0; i < self->size; i++)
		self->items[i] = NULL;

	return self;
}

void arr_destroy(Arr self)
{
	lu_user_assert_void(self, "Arr is NULL");
	
	Lu_Mem mem = self->mem;
	lu_user_assert_void(mem, "Lu_Mem is NULL");

	lu_mem_free(mem, (lu_p_byte) self->items);
	lu_mem_free(mem, (lu_p_byte) self);
}

///////////////////////////////////////////////////////////////////////////////
// Main public methods

lu_size arr_append(Arr self, lu_p_void item)
{
	lu_assert(self != NULL);
	lu_assert(self->count < self->size);
 
 	// no automatic realloc 
	if (self->allow_realloc && self->count >= self->size) 
		arr_realloc(self, self->size * 2);

	lu_size index = self->count;

	self->items[self->count] = item;
	++self->count;

	return index;
}

void arr_each(Arr self, void (*block)(lu_p_void item))
{
	for (lu_size i = 0; i < self->count; i++)
	{
		block((void *) self->items[i]);
	}
}

void arr_each1(Arr self, void (*block)(lu_p_void item, lu_p_void p1), lu_p_void p1)
{
	for (lu_size i = 0; i < self->count; i++)
	{
		block((lu_p_void) self->items[i], p1);
	}
}

void arr_each_1p(Arr self, void (*block)(lu_p_void item, lu_p_void p1), lu_p_void p1)
{
	for (lu_size i = 0; i < self->count; i++)
	{
		block((lu_p_void) self->items[i], p1);
	}
}

void arr_each_2p(Arr self, void (*block)(lu_p_void item, lu_p_void p1, lu_p_void p2), lu_p_void p1, lu_p_void p2)
{
	for (lu_size i = 0; i < self->count; i++)
	{
		block((lu_p_void) self->items[i], p1, p2);
	}
}

void arr_each_with_index_1p(Arr self, void (*block)(Arr self, lu_p_void item, lu_size index, lu_p_void p1), lu_p_void p1)
{
	for (lu_size i = 0; i < self->count; i++)
	{
		block(self, (lu_p_void) self->items[i], i, p1);
	}
}

void arr_nullify(Arr self)
{ 
	for (lu_size i = 0; i < self->size; i++)
	{
		self->items[i] = NULL;
	}
}

void arr_realloc(Arr self, lu_size new_size)
{
	lu_user_assert_void(new_size > self->size, "new_size should be greater than current size");

	self->size = new_size;

	self->items = (lu_p_void*) lu_mem_realloc(self->mem, (lu_p_byte) self->items, sizeof(lu_p_void) * self->size);
	lu_assert(self->items != NULL);
}

Arr arr_merge(Arr self, Arr src)
{
	lu_assert(self->count + src->count < self->size);

	// realloc if needed
	if (self->allow_realloc && (self->count + src->count) > self->size)
		arr_realloc(self, self->count + src->count);

	for(lu_size i = 0; i < src->count; i++)
		self->items[self->count++] = src->items[i];

	return self;
} 

lu_p_void arr_find_first_1p(Arr self, lu_bool (*block)(lu_p_void item, lu_p_void p1), lu_p_void p1)
{
	lu_p_void item;
	for(lu_size i = 0; i < self->count; i++) 
	{
		item = self->items[i];
		if (block(item, p1)) return item;
	}

	return NULL;
}

///////////////////////////////////////////////////////////////////////////////
// Other public methods

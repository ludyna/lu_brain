/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// Init, create, destroy

	Lu_Data lu_data__create_via_mem_copy_internal(Lu_Mem mem, lu_p_value src, lu_size w, lu_size h, lu_size d, const char* func, const char* file, int line)
	{
		lu__assert(mem);
		lu__assert(src);
		lu__assert(w > 0);
		lu__assert(h > 0);
		lu__assert(d > 0);

		Lu_Data self = (Lu_Data) mem->alloc(mem, sizeof(struct lu_data), func, file, line);
		lu__assert(self);

		self->w 		= w;
		self->h 		= h;
		self->d 		= d;

		lu_size size = sizeof(lu_value) * self->w * self->h * self->d;

		self->values 	= (lu_p_value) mem->alloc(mem, size, func, file, line);

		memcpy((lu_p_void) self->values, (lu_p_void) src, size);

		return self;
	}

	Lu_Data lu_data__create_via_deep_copy_internal(Lu_Mem mem, Lu_Data src, const char* func, const char* file, int line)
	{
		lu__assert(mem);
		lu_data__validate_exists(src);

		Lu_Data self = (Lu_Data) mem->alloc(mem, sizeof(struct lu_data), func, file, line);
		lu__assert(self);

		self->w 		= src->w;
		self->h 		= src->h;
		self->d 		= src->d;

		lu_size size = sizeof(lu_value) * self->w * self->h * self->d;

		self->values 	= (lu_p_value) mem->alloc(mem, size, func, file, line);

		memcpy((lu_p_void) self->values, (lu_p_void) src->values, size);

		return self;
	}

	Lu_Data lu_data__create_via_shift_internal(Lu_Mem mem, Lu_Data src, lu_int x_shift, lu_int y_shift, const char* func, const char* file, int line) 
	{
		lu__assert(mem);
		lu_data__validate_exists(src);

		lu_int w = (lu_int) src->w;
		lu_int h = (lu_int) src->h;
		lu_int d = (lu_int) src->d;

		lu__assert(x_shift < w);
		lu__assert(y_shift < h);

		Lu_Data self = (Lu_Data) mem->alloc(mem, sizeof(struct lu_data), func, file, line);
		lu__assert(self);

		self->w 		= src->w;
		self->h 		= src->h;
		self->d 		= src->d;
		self->values 	= (lu_p_value) mem->alloc(mem, sizeof(lu_value) * self->w * self->h * self->d, func, file, line);

		lu_int x;
		lu_int y;
		lu_int z;
		lu_int sx;
		lu_int sy;
		lu_int tx; 
		lu_int ty;

		lu_int x_start 	= x_shift;
		lu_int x_end 	= w + x_shift;

		lu_int y_start 	= y_shift;
		lu_int y_end 	= h + y_shift;

		for(z = 0; z < d; z++)
			for (y = y_start; y < y_end; y++)
				for(x = x_start; x < x_end; x++)
				{
					sx = x;
					sy = y;

					if (sx < 0) sx = 0; 
					if (sx >= self->w) sx = self->w - 1;
					if (sy < 0) sy = 0;
					if (sy >= self->h) sy = self->h - 1;

					tx = x - x_shift;
					ty = y - y_shift;

					// lu__debug("\n %d - %d = %d", x, x_shift, tx);

					lu__assert(tx >= 0);
					lu__assert(tx < self->w);
					lu__assert(ty >= 0);
					lu__assert(ty < self->h);

					lu_data__value_set(self, tx, ty, z, lu_data__value_get(src, sx, sy, z));
				}
			
		return self;
	}

	void lu_data__destroy(Lu_Data self, Lu_Mem mem)
	{
		lu__assert(self);
		lu__assert(mem);

		if (self->values) 
		{
			lu_mem__free(mem, (lu_p_byte) self->values);
			self->values = NULL;
		}

		lu_mem__free(mem, (lu_p_byte) self);
	}


///////////////////////////////////////////////////////////////////////////////
// Debug

	void lu_data__debug(Lu_Data self)
	{
		lu__assert(self);

		lu__debug("\nData: ");
		lu__debug("\n\tw: %d", self->w); 
		lu__debug("\n\th: %d", self->h);
		lu__debug("\n\td: %d", self->d);

		if (self->values)
		{
			lu_size x;
			lu_size y;
			lu_size z;
			for (z = 0; z < self->d; z++)
			{
				lu__debug("\n\t");
				for (y = 0; y < self->h; y++)
				{
					lu__debug("\n\t");
					for (x = 0; x < self->w; x++)
					{
						lu__debug("%.2f, ", lu_data__value_get(self, x, y, z));
					}
				}
			}
		}
		else
		{
			lu__debug("\tvalues: NULL");
		}
	}
/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// 


	static Lu_La_Column lu_la_column__init(
		Lu_La_Column self, 
		Lu_Config config
	)
	{
		lu__assert(self);
		lu__assert(config);
		lu__assert(config->la_labels_size > 0);
		lu__assert(config->la_mem);
		lu__assert(config->w_mem);
		lu__assert(config->n_mem);
		lu__assert(config->w_save_waves_size > 0);

		self->la_mem = config->la_mem;
		self->w_mem = config->w_mem;
		self->n_mem = config->n_mem;

		self->cells_size = config->la_labels_size;
		self->w_save_waves_size = config->w_save_waves_size;

		lu_size size_bytes = sizeof(struct lu_la_cell) * self->cells_size;

		self->cells = (struct lu_la_cell*) lu_mem__alloc(self->la_mem, size_bytes);
		lu__alloc_assert(self->cells);

		Lu_La_Cell la_cell;
		for (lu_size i = 0; i < self->cells_size; i++)
		{
			la_cell = &self->cells[i];

			lu_la_cell__init(la_cell, i, self->w_mem, self->w_save_waves_size);
		}

		lu_n_link_mem__init(&self->n_link_mem, self->n_mem, config->n_link_mem_size);
		lu_la_link_mem__init(&self->la_link_mem, self->la_mem, config->la_link_mem_size);

		return self;
	}

	static void lu_la_column__deinit(Lu_La_Column self)
	{
		lu__assert(self);
		lu__assert(self->la_mem);
		lu__assert(self->w_mem);

		lu_la_link_mem__deinit(&self->la_link_mem);
		lu_n_link_mem__deinit(&self->n_link_mem);

		Lu_La_Cell la_cell;
		for (lu_size i = 0; i < self->cells_size; i++)
		{
			la_cell = &self->cells[i];

			lu_la_cell__deinit(la_cell, self->w_mem);
		}

		lu_mem__free(self->la_mem, (lu_p_byte) self->cells);
	}
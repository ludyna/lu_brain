/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// 

	Lu_Comp_Calc lu_comp_calc__init(
		Lu_Comp_Calc self,  
		Lu_Mem mem,
		lu_value min, 
		lu_value max, 
		lu_size cells_size
	) 
	{
		lu__assert(self);
		lu__assert(mem);
		lu__assert(cells_size > 0);
		lu__assert(max > min);

		self->mem = mem;
		self->cells_size  		= cells_size; // value depth in indexes
		self->orig_min 			= min;
		self->orig_max 			= max;
		self->max 				= self->orig_max - self->orig_min;
		self->step 				= self->max / (lu_value) self->cells_size;

		// my robymo tochni znachennia, tomu ce zakomentano
		//self->nsc 				= nsc; //(lu_size) lu_round(self->max_val * rec->val_nsc / self->step); // nsc in indexes

	 	// Kroky preobchysleni (vertical)
		self->steps 		= (lu_value*) lu_mem__alloc(self->mem, sizeof(lu_value) * self->cells_size);
		lu__assert(self->steps);
	
		lu_size i;
		for (i = 0; i < self->cells_size; i++)
			self->steps[i] = (lu_value)i * self->step;

		return self;
	}

	void lu_comp_calc__deinit(Lu_Comp_Calc self)
	{
		lu__assert(self);
		lu__assert(self->mem);

		lu_mem__free(self->mem, (lu_p_byte) self->steps);
		
		self->steps = NULL;
	}

///////////////////////////////////////////////////////////////////////////////
// 

	void lu_comp_calc__digitalize_data(Lu_Comp_Calc self, Lu_Data data, lu_size z)
	{
		lu__assert(self);
		lu__assert(data);
		lu__assert(z < data->d);

		lu_size z_shift = z * data->w * data->h;

		lu_size x;
		lu_size y;
		lu_size y_shift;
		lu_value v;
		lu_size ix;

		for (y = 0; y < data->h; y++)
		{
			y_shift = y * data->w;

			for (x = 0; x < data->w; x++)
			{
				ix = z_shift + y_shift + x;
				v = data->values[ix];

				data->values[ix] = lu_comp_calc__digitalize_value(self, v);
			}
		}

	}

	void lu_comp_calc__debug(Lu_Comp_Calc self)
	{
		lu__assert(self);

		lu__debug("\n\nLu_Comp_Calc steps: ");

		for (lu_size x = 0; x < self->cells_size; x++)
		{
			lu__debug("| %0.2f ", self->steps[x]);
		}

		lu__debug("\n");

	}

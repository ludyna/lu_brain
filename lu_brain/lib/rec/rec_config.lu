/**
	Copyright Â© 2021 Oleh Ihorovych Novosad 
*/
 
///////////////////////////////////////////////////////////////////////////////
// Lu_Rec_Config predefined
 
 	struct lu_rec_config lu_g_rc_predefined[LU_RC_END] = {
		{
			// LU_RC_MONOCHROME1_IMAGE
			.depth 				= 1,
			.max_blocks_size 	= 16,
			.hold_blocks_size 	= 2, 
			.transf_algorithm 	= LU_TA_STATIC_IMAGE,
			
			.v_min 				= 0,
			.v_max 				= 1,
			.v_neu_size			= 2,
			.p_neu_size			= 2,
		},
		{
			// LU_RC_MONOCHROME8_IMAGE
		},
		{
			// LU_RC_RBG8_IMAGE
			.depth 				= 1,
			.max_blocks_size 	= 16,
			.hold_blocks_size 	= 4, 
			.transf_algorithm 	= LU_TA_STATIC_IMAGE,
			
			.v_min 				= 0,
			.v_max 				= 255,
			.v_neu_size			= 256,
			.p_neu_size			= 128,
		},
		{
			// LU_RC_RBG16_IMAGE
		},
		{
			// LU_RC_RBG32_IMAGE
		},
		{
			// LU_RC_TEST1
			.depth 				= 1,
			.max_blocks_size 	= 16,
			.hold_blocks_size 	= 4, 
			.transf_algorithm 	= LU_TA_STATIC_IMAGE,
			
			.v_min 				= 0,
			.v_max 				= 10,
			.v_neu_size			= 10,
			.p_neu_size			= 2,
		}
	};

	struct lu_rec_config lu_rec_config_get_by_id(lu_size id)
	{
		lu_user_assert(id < LU_RC_END, "Predefined id is > LU_RC_END");
		return lu_g_rc_predefined[id];
	}

///////////////////////////////////////////////////////////////////////////////
// Lu_Rec_Config

	Lu_Rec_Config lu_rec_config_validate(Lu_Rec_Config self)
	{
		lu_user_assert(self, "Lu_Rec_Config is NULL");
	
		lu_user_assert(self->width > 0, "Width should be greater than 0");
		lu_user_assert(self->height > 0, "Height should be greater than 0");	
		lu_user_assert(self->depth > 0, "Depth should be greater than 0");

		lu_user_assert(self->max_blocks_size > 0, "max_block_size should be greater than 0");

		lu_user_assert(self->v_max - self->v_min > 0, "v_max minus v_min should greater than 0");
		lu_user_assert(self->v_neu_size > 1, "v_neu_size should be greater than 1");
		lu_user_assert(self->p_neu_size > 1, "p_neu_size should be greater than 1");

		return self;
	}
/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/
 
///////////////////////////////////////////////////////////////////////////////
// Lu_Rec_Config predefined
 
 	struct lu_rec_config lu_g_rc_predefined[LU_REC_CONFIG_END] = {
		{
			// LU_RC_MONOCHROME1_IMAGE
			.hold_blocks_size 	= 2, 
			.transf_algorithm 	= LU_TA_STATIC_IMAGE,
			
			.comp_config.v_min 				= 0,
			.comp_config.v_max 				= 1,
			.comp_config.v_neu_size			= 2,
			.comp_config.p_neu_size			= 2,
		},
		{
			// LU_RC_MONOCHROME8_IMAGE
		},
		{
			// LU_RC_RBG8_IMAGE
			.hold_blocks_size 	= 4, 
			.transf_algorithm 	= LU_TA_STATIC_IMAGE,
			
			.comp_config.v_min 				= 0,
			.comp_config.v_max 				= 255,
			.comp_config.v_neu_size			= 256,
			.comp_config.p_neu_size			= 128,
		},
		{
			// LU_RC_RBG16_IMAGE
		},
		{
			// LU_RC_RBG32_IMAGE
		},
		{
			// LU_RC_TEST1
			.hold_blocks_size 	= 4, 
			.transf_algorithm 	= LU_TA_STATIC_IMAGE,
			
			.comp_config.v_min 				= 0,
			.comp_config.v_max 				= 10,
			.comp_config.v_neu_size			= 10,
			.comp_config.p_neu_size			= 2,
		}
	};

	Lu_Rec_Comp_Config lu_rec_comp_config__validate(Lu_Rec_Comp_Config self)
	{
		lu__user_assert(self->v_max - self->v_min > 0, "v_max minus v_min should greater than 0");
		lu__user_assert(self->v_neu_size > 1, "v_neu_size should be greater than 1");
		lu__user_assert(self->p_neu_size > 1, "p_neu_size should be greater than 1");

		return self;
	}

	struct lu_rec_config lu_rec_config__get_by_id(lu_size id)
	{
		lu__assert(id < LU_REC_CONFIG_END);
		return lu_g_rc_predefined[id];
	}

///////////////////////////////////////////////////////////////////////////////
// Lu_Rec_Config

	Lu_Rec_Config lu_rec_config__validate(Lu_Rec_Config self)
	{
		lu__user_assert(self, "Lu_Rec_Config is NULL");

		lu_rec_comp_config__validate(&self->comp_config);

		return self;
	}
 /**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/
 
///////////////////////////////////////////////////////////////////////////////
// Init, create and destroy

	// 
	// It is actually lu_brain_rec_create_and_add, but lu_brain__rec_add for shortness.
	//
	Lu_Rec lu_brain__rec_add(Lu_Brain brain, lu_size width, lu_size height, lu_size depth, struct lu_rec_config config)
	{
		lu__user_assert(brain, "Lu_Brain is NULL");
		lu__user_assert(brain->config.b_mem, "b_mem is NULL");
		lu__user_assert(width, "widht should be greater than 0");
		lu__user_assert(height, "widht should be greater than 0");
		lu__user_assert(depth, "widht should be greater than 0");
	 
	 	Lu_Rec_Config p_config 	= lu_rec_config__validate(&config);
	 	lu__user_assert(p_config, "Lu_Rec_Config validation failed");

		Lu_Rec self = (Lu_Rec) lu_mem__alloc(brain->config.b_mem, sizeof(struct lu_rec));
		lu__user_assert(self, "Cannot allocate lu_rec");

		// Initialize
		self->config = *p_config;

		self->width = width;
		self->height = height;
		self->depth = depth;

		//
		// View
		//

		lu_rec_view__init(&self->view, self->width, self->height, self->depth);

		lu_brain__rec_attach(brain, self);

		return self;
	}

	void lu_brain__rec_remove(Lu_Rec self)
	{
		if (self->brain)
			lu_brain__rec_detach(self->brain, self);
	}


	static void lu_rec__destroy(Lu_Rec self, Lu_Mem mem)
	{
		lu__assert(self);
		lu_mem__free(mem, (lu_p_byte) self);
	}

	lu_size lu_rec__get_id(Lu_Rec self)
	{
		lu__assert(self);
		return self->id;
	}

///////////////////////////////////////////////////////////////////////////////
// 

	void lu_wave__set_dest_start_pos(Lu_Rec self, lu_long dest_x, lu_long dest_y)
	{
		lu__user_assert_void(self, "Rec is NULL");

		lu_rec_view__set_dest_start_pos(&self->view, dest_x, dest_y);
	}

	void lu_rec__set_src_start_pos(Lu_Rec self, lu_size src_x, lu_size src_y)
	{
		lu__user_assert_void(self, "Rec is NULL");
		lu__user_assert_void(src_x <= self->width, "src_x should <= widht");
		lu__user_assert_void(src_y <= self->height, "src_x should <= widht");
		lu__user_assert_void(src_x <= self->view.src_end_x, "src_x should <= src_end_x");
		lu__user_assert_void(src_y <= self->view.src_end_y, "src_x should <= src_end_y");

		lu_rec_view__set_src_start_pos(&self->view, src_x, src_y);
	}

	void lu_rec__set_src_end_pos(Lu_Rec self, lu_size src_x, lu_size src_y)
	{
		lu__user_assert_void(self, "Rec is NULL"); 
		lu__user_assert_void(src_x <= self->width, "src_x should <= widht");
		lu__user_assert_void(src_y <= self->height, "src_x should <= widht");
		lu__user_assert_void(src_x >= self->view.src_start_x, "src_x should <= src_start_x");
		lu__user_assert_void(src_y >= self->view.src_start_y, "src_x should <= src_start_y");

		lu_rec_view__set_src_end_pos(&self->view, src_x, src_y);
	}

	void lu_rec__set_src_start_z(Lu_Rec self, lu_size src_z)
	{
		lu__user_assert_void(self, "Rec is NULL"); 
		lu__user_assert_void(src_z <= self->depth, "src_z should <= depth");
		lu__user_assert_void(src_z <= self->view.src_end_z, "src_z should <= src_end_z");

		lu_rec_view__set_src_start_z(&self->view, src_z);
	}

	void lu_rec__set_src_end_z(Lu_Rec self, lu_size src_z)
	{
		lu__user_assert_void(self, "Rec is NULL"); 
		lu__user_assert_void(src_z <= self->depth, "src_z should <= depth");
		lu__user_assert_void(src_z >= self->view.src_start_z, "src_z should <= src_start_z");

		lu_rec_view__set_src_end_z(&self->view, src_z);
	}

 /**
	Copyright Â© 2021 Oleh Ihorovych Novosad 
*/
 
///////////////////////////////////////////////////////////////////////////////
// Init, create and destroy

	// 
	// It is actually lu_brain_rec_create_and_add, but lu_brain_rec_add for shortness.
	//
	Lu_Rec lu_brain_rec_add(Lu_Brain brain, lu_size width, lu_size height, lu_size depth, struct lu_rec_config config)
	{
		lu_user_assert(brain, "Lu_Brain is NULL");
		lu_user_assert(width, "widht should be greater than 0");
		lu_user_assert(height, "widht should be greater than 0");
		lu_user_assert(depth, "widht should be greater than 0");
	 
	 	Lu_Rec_Config p_config 	= lu_rec_config_validate(&config);
	 	lu_user_assert(p_config, "Lu_Rec_Config validation failed");

		Lu_Rec self 			= (Lu_Rec) lu_mem_alloc(brain->brain_mem, sizeof(struct lu_rec));
		lu_user_assert(self, "Cannot allocate lu_rec");

		// Initialize
		self->config 			= *p_config;

		//lu_debug("\n\nrec->config.v_nsc=%d\n\n", self->v_nsc);

		self->width = width;
		self->height = height;
		self->depth = depth;

		lu_brain_rec_attach(brain, self);

		return self;
	}

	void lu_brain_rec_remove(Lu_Rec self)
	{
		if (self->brain)
			lu_brain_rec_detach(self->brain, self);
	}


	static void lu_rec_destroy(Lu_Rec self, Lu_Mem mem)
	{
		lu_assert(self);
		lu_mem_free(mem, (lu_p_byte) self);
	}

///////////////////////////////////////////////////////////////////////////////
// 
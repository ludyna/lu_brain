/**
	Copyright Â© 2021 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// Create and destroy

	Lu_Story lu_story_create(Lu_Mem mem, lu_size recs_size)
	{
		lu_assert(mem);
		lu_assert(recs_size);

		Lu_Story self 					= (Lu_Story) lu_mem_alloc(mem, sizeof(struct lu_story));

		// Initialize
		self->mem 						= mem;
		self->recs_size 				= recs_size;
		self->blocks 					= lu_list_create(self->mem);
		self->start_block_on_next_data 	= false;  

		self->current_read_pos 			= NULL;
		
		return self;
	}

	void lu_story_destroy_blocks(Lu_List blocks, lu_p_void value, lu_p_void p1)
	{
		lu_assert(blocks);
		lu_assert(value);
		lu_block_destroy((Lu_Block) value);
	}

	void lu_story_destroy(Lu_Story self)
	{
		lu_user_assert_void(self, "Lu_Story is NULL");

		lu_list_each_1p(self->blocks, lu_story_destroy_blocks, NULL);
		lu_list_destroy(self->blocks);
		lu_mem_free(self->mem, (lu_p_byte) self);
	}

///////////////////////////////////////////////////////////////////////////////
// Story Block 

	void lu_story_block_begin(Lu_Story story)
	{
		lu_user_assert_void(story, "Lu_Story is NULL");
		//lu_debug("\nlu_block_begin");
		story->start_block_on_next_data = true;
	}

	void lu_story_block_end(Lu_Story story)
	{
		lu_user_assert_void(story, "Lu_Story is NULL");
		//lu_debug("\nlu_block_end");
		story->start_block_on_next_data = true;
	}


///////////////////////////////////////////////////////////////////////////////
// 

	Lu_Data lu_story_data_get(Lu_Story self, lu_size rec_i, Lu_L_Node node)
	{
		lu_assert(self);

		if (node == NULL) return NULL;

		lu_assert(node->value);

		Lu_Block block = (Lu_Block) node->value;

		lu_assert(rec_i < block->datum_size);

		return &block->datum[rec_i]; 
	}

	lu_size lu_story_blocks_count(Lu_Story self)
	{ 
		lu_assert(self);
		return lu_list_count(self->blocks);
	}

	lu_p_value lu_story_last_values(Lu_Story self, lu_size rec_i)
	{
		lu_user_assert(self, "Lu_Story is NULL");
		Lu_Data data = lu_story_data_get(self, rec_i, lu_list_last_node(self->blocks));
		if (data == NULL) return NULL;

		return data->values;
	}

	Lu_Data lu_story_last_data(Lu_Story self, lu_size rec_i)
	{
		lu_user_assert(self, "Lu_Story is NULL");
		return lu_story_data_get(self, rec_i, lu_list_last_node(self->blocks));
	}

	static Lu_Block lu_story_block_add(Lu_Story self)
	{
		lu_assert(self);

		Lu_Block block = lu_block_create(self->mem, self->recs_size);
		lu_assert(block);

		lu_list_append(self->blocks, (lu_p_void) block);

		return block;
	}

	void lu_story_reset(Lu_Story self)
	{
		lu_user_assert_void(self, "Lu_Story should be present");
		lu_user_assert_void(self->blocks, "Lu_Story blocks should be present");

		lu_list_each_1p(self->blocks, lu_story_destroy_blocks, NULL);
		lu_list_clear(self->blocks); 

		self->start_block_on_next_data = false;
	}

	void lu_story_push(Lu_Story self, Lu_Rec rec, lu_value* values)
	{ 
		lu_user_assert_void(self, "Lu_Story should not be NULL"); 
		lu_user_assert_void(rec, "Lu_Rec should not be NULL"); 
		lu_user_assert_void(values, "values should not be NULL");
		lu_user_assert_void(rec->depth, "Lu_Rec depth is zero"); 

	 	if (self->start_block_on_next_data)
		{ 
			// yaksho my na nuliu, to ce itak pochatok bloka
			lu_story_block_add(self);
			
			self->start_block_on_next_data = false;
		}

		if (lu_list_is_empty(self->blocks))
			lu_story_block_add(self);

		Lu_Data data = lu_story_data_get(self, rec->id, lu_list_last_node(self->blocks));
		lu_p_value v = data->values;
		if (v)
			// new input to the same rec and channel advances story
			lu_story_block_add(self);

		data = lu_story_data_get(self, rec->id, lu_list_last_node(self->blocks));
		lu_assert(data);
		lu_assert(data->values == NULL);

	 	lu_data_set(data, rec->width, rec->height, rec->depth, values);
	}

	static lu_bool lu_story_blocks_non_empty_values_block(lu_p_void value, lu_p_void p1)
	{
		if (value == NULL) return false;
		lu_assert(p1);

		lu_size* p_rec_i = (lu_size*) p1;

		Lu_Block block = (Lu_Block) value;

		lu_assert(*p_rec_i < block->datum_size);

		Lu_Data data = &block->datum[*p_rec_i];

		return data->values != NULL;
	}

	static Lu_Data lu_story_first_non_null_data(Lu_Story self, lu_size rec_i)
	{
		lu_user_assert(self, "Lu_Story is NULL");

		Lu_Block block = (Lu_Block) lu_list_find_forward_1p(self->blocks, lu_story_blocks_non_empty_values_block, &rec_i);

		if (block == NULL) return NULL;

		lu_assert(rec_i < block->datum_size);

		return &block->datum[rec_i];
	}

	Lu_Story lu_story_validate(Lu_Story self)
	{
		lu_user_assert(lu_story_blocks_count(self), "Story is empty");

		return self;
	}

	//
	// We don't need this actually, we can move this out of scope. 
	// W_Rec/Wave should have reset() to clear last data.
	//
	Lu_Story lu_story_prepare(Lu_Story self)
	{
		lu_user_assert(self, "Lu_Story is NULL");
		lu_assert(self->blocks);

		lu_size rec_i;
		Lu_Data d1;
		Lu_Data d2;

		lu_size recs_size =self->recs_size;

		for(rec_i = 0; rec_i < recs_size; rec_i++)
		{
			Lu_L_Node curr = lu_list_first_node(self->blocks);

			while(curr)
			{
				d1 = lu_story_data_get(self, rec_i, curr);
				lu_assert(d1);

				//lu_debug("\n FILL GAPS (rec_i=%d, block_i=%d)", rec_i, block_i);

				if (d1->values) goto end;
				
				if (curr == lu_list_first_node(self->blocks))
				{
					d2 = lu_story_first_non_null_data(self, rec_i);
					if (d2 == NULL) break; 	// nema danyh dlia rec_i vzahali
					lu_data_shallow_copy(d1, d2);
				}
				else
				{
					d2 = lu_story_data_get(self, rec_i, lu_l_node_prev(curr));
					lu_data_shallow_copy(d1, d2);
				}

				end:
				curr = lu_l_node_next(curr);
			}
		}

		return self;
	}

///////////////////////////////////////////////////////////////////////////////
// Story reading

	static Lu_Block lu_story_next_block_get(Lu_Story self)
	{
		lu_assert(self);
		lu_assert(self->blocks);

		// when first element
		if (self->current_read_pos == NULL) 
		{
			self->current_read_pos = lu_list_first_node(self->blocks);
			if (self->current_read_pos == NULL) return NULL;

			return (Lu_Block) lu_l_node_value(self->current_read_pos);
		}

		if (self->current_read_pos)
		{
			self->current_read_pos = lu_l_node_next(self->current_read_pos);

			if (self->current_read_pos == NULL) return NULL;

			return (Lu_Block) lu_l_node_value(self->current_read_pos);
		}

		return NULL;
	} 
/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/

lu_bool g_user_assert = LU__USER_ASSERT_DEFAULT;

void lu__throw_internal(enum lu_e e, const char* file, int line)
{
	fprintf(stderr, "\nEXCEPTION: <%s:%d> ID: %d", file, line, e);
	Throw(e);
}

void lu__throw_with_message_internal(enum lu_e e, const char* file, int line, const char* fmt, ...)
{
	if (fmt != NULL)
	{
	    va_list ap;
	    va_start(ap, fmt);

	    char final_fmt[512];

	    sprintf(final_fmt, "\nEXCEPTION: <%s:%d> ID: <%d> %s", file, line, e, fmt);

	    vfprintf(stderr, final_fmt, ap);
	    va_end(ap);
	}

	Throw(e);
}

void* lu__user_debug_internal(const char* func, const char* file, int line, const char* fmt)
{
	if (!g_user_assert) return NULL;

	fprintf(stderr, "\n\x1B[31m%s(): <%s:%d> %s\033[0m", func, file, line, fmt);
    return NULL;
}

void* lu__user_debug_args_internal	(const char* func, const char* file, int line, const char* fmt, ...)
{
	if (fmt == NULL) return NULL;
	
    va_list ap;
    va_start(ap, fmt);

    char final_fmt[512];

    sprintf(final_fmt, "\nDEBUG: %s(): <%s:%d> %s", func, file, line, fmt);

    vfprintf(stderr, final_fmt, ap);
    va_end(ap);

    return NULL;
}
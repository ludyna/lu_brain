/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/ 

///////////////////////////////////////////////////////////////////////////////
// 


	Lu_N_Table lu_n_table__create(
		Lu_Mem mem, 
		lu_size w, 
		lu_size h, 
		lu_size h_max, 
		Lu_Config config, 
		lu_size layer_ix,
		lu_size area_ix
	)
	{
		lu__assert(mem);
		lu__assert(w > 0);
		lu__assert(h > 0);
		lu__assert(h_max >= h);
		lu__assert(config);

		Lu_N_Table self = (Lu_N_Table) lu_mem__alloc(mem, sizeof(struct lu_n_table));
		lu__alloc_assert(self);

		self->mem = mem; 

		self->w = w;
		self->h = h;
		self->h_max = h_max;

		lu_size s = w * h_max;

		self->columns = (struct lu_n_column*) lu_mem__alloc(mem, sizeof(struct lu_n_column) * s);
		lu__alloc_assert(self->columns);

		Lu_N_Column column;
		for (lu_size i = 0; i < s; i++)
		{
			column = &self->columns[i];

			lu_n_column__init(column, mem, config->n_column_h, config->n_column_d, area_ix, layer_ix, i);
		}

		return self;
	}

	void lu_n_table__destroy(Lu_N_Table self)
	{
		lu__assert(self);
		lu__assert(self->columns);

		Lu_N_Column column;
		lu_size s = self->w * self->h_max;
		for (lu_size i = 0; i < s; i++)
		{
			column = &self->columns[i];

			lu_n_column__deinit(column);
		}

		lu_mem__free(self->mem, (lu_p_byte) self->columns);
		self->columns = NULL;

		lu_mem__free(self->mem, (lu_p_byte) self);
	}
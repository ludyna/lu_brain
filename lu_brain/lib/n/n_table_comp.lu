/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/ 

///////////////////////////////////////////////////////////////////////////////
// 

	static Lu_N_Table_Comp lu_n_table_comp__create(
		Lu_Config config, 
		Lu_Comp_Calc comp_calc, 
		lu_size width, 
		lu_size height, 
		lu_size depth,
		lu_size layer_ix,
		lu_size area_ix
	)
	{
		lu__assert(config);
		lu__assert(comp_calc);
		lu__assert(width > 0);
		lu__assert(height > 0);
		lu__assert(depth > 0);
		lu__assert(comp_calc->cells_size == depth);
		lu__assert(area_ix >= LU_N_AREA__SPECIAL_AREA_SKIP);

		Lu_N_Table_Comp self = (Lu_N_Table_Comp) lu_mem__alloc(config->n_mem, sizeof(struct lu_n_table_comp));
		lu__assert(self);

		self->mem = config->n_mem;
		self->w = width;
		self->h = height;
		self->d = depth;
		self->wh = self->w * self->h;

		self->columns = (struct lu_n_column_comp*) lu_mem__alloc(
			self->mem, 
			sizeof(struct lu_n_column_comp) * self->wh
		);
		lu__alloc_assert(self->columns);

		Lu_N_Column_Comp column;
		lu_size column_ix = 0;
		lu_size y;
		lu_size x;
		for (y = 0; y < height; y++)
		{
			for (x = 0; x < width; x++, column_ix++)
			{
				column = &self->columns[column_ix];

				lu_n_column_comp__init(
					column,
					self->mem,
					depth,
					x,
					y,
					area_ix,
					layer_ix,
					column_ix,				
					comp_calc,
					config
				);
			}
		}

		return self;
	}

	static void lu_n_table_comp__destroy(Lu_N_Table_Comp self)
	{
		lu__assert(self);
		lu__assert(self->mem);  

		Lu_N_Column_Comp column = NULL;
		for (lu_size i = 0; i < self->wh; i++)
		{
			column = &self->columns[i];
			lu_n_column_comp__deinit(column);
		}

		lu_mem__free(self->mem, (lu_p_byte) self->columns);
		lu_mem__free(self->mem, (lu_p_byte) self);
	}


///////////////////////////////////////////////////////////////////////////////
// 

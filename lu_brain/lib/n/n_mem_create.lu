/**
	Copyright Â© 2021 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// N_Mem create methods

	static N_Mem n_mem_create(Lu_Brain brain, lu_size names_size)
	{
		lu_user_assert(brain, "Lu_Brain is NULL");
		lu_user_assert(brain->brain_mem, "Lu_Brain brain_mem is NULL");
		lu_user_assert(names_size > 0, "names_size should be greater than 0");

		N_Mem self 			= (N_Mem) mem_alloc(brain->brain_mem, sizeof(struct n_mem));
		lu_user_assert(self, "Cannot allocate N_Mem");

		self->brain 		= brain;

		self->names_size 	= names_size;

		self->names 		= simple_hash_create(brain->brain_mem, self->names_size);
		lu_user_assert(self->names, "Cannot create names");

		return self;
	}

	static void n_mem_destroy(N_Mem self)
	{
		lu_assert(self);

		if (self->names)
		{
			simple_hash_destroy(self->names, self->brain->brain_mem);
			self->names = NULL;
		}

		mem_free(self->brain->brain_mem, (lu_p_byte) self);
	}

	// static N_Mem n_mem_tables_create(N_Mem self, Mem mem)
	// {
	// 	lu_user_assert(self, "N_Mem is NULL");
	// 	lu_user_assert(mem, "Mem is NULL");

	// 	self->cells 		= n_mem_cells_create(self, mem);
	// 	lu_user_assert(self->cells, "Cannot allocate N_Mem cells");

	// 	self->cells_2 		= n_mem_cells_2_create(self, mem);
	// 	lu_user_assert(self->cells_2, "Cannot allocate N_Mem cells_2");

	// 	self->cells_3 		= n_mem_cells_3_create(self, mem);
	// 	lu_user_assert(self->cells_2, "Cannot allocate N_Mem cells_3");

	// 	self->lins 			= n_mem_lins_create(self, mem);
	// 	lu_user_assert(self->lins, "Cannot allocate N_Mem lins");

	// 	return self;
	// }

	// static Mem_Table n_mem_cells_create(N_Mem self, Mem mem)
	// {
	// 	Mem_Table cells = mem_table_create(
	// 									mem, 
	// 		/*record_size_in_bytes*/ 	sizeof(struct n_cell), 
	// 		/*table_size_in_records*/	0, 
	// 		/*percent*/					50,
	// 		/*flags*/					MTF_FREEABLE
	// 	);

	// 	lu_user_assert(cells, "Cannot allocate cells Mem_Table");

	// 	return cells;
	// }

	// static Mem_Table n_mem_cells_2_create(N_Mem self, Mem mem)
	// {
	// 	lu_user_assert(self, "N_Mem is NULL");
	// 	Lu_Brain brain = self->brain;

	// 	lu_user_assert(brain, "Brain is NULL");
	// 	lu_user_assert(brain->s_mem, "Brain s_mem is NULL");
	// 	lu_user_assert(brain->s_mem->recs, "Recs is NULL");
	// 	lu_user_assert(arr_size(brain->s_mem->recs) > 0, "No s_recs created");

	// 	Arr recs = brain->s_mem->recs;

	// 	// value components size
	// 	lu_size val_coms_size 	= 0;
	// 	S_Rec rec 				= NULL;
	// 	S_Layer layer 			= NULL;
	// 	lu_size i 				= 0;

	// 	for (; i < arr_size(recs); i++)
	// 	{
	// 		rec = (S_Rec) arr_get(recs, i);
	// 		lu_user_assert(rec, "S_Rec is NULL");

	// 		layer = &rec->data_layers[0];
	// 		lu_user_assert(layer, "S_Layer is NULL");

	// 		val_coms_size += s_layer_cells_size(layer);
	// 	}

	// 	Mem_Table cells_2 = mem_table_create(
	// 									mem, 
	// 		/*record_size_in_bytes*/ 	sizeof(struct n_cell_2), 
	// 		/*table_size_in_records*/	val_coms_size, 
	// 		/*percent*/					0,
	// 		/*flags*/					MTF_FREEABLE
	// 	);

	// 	lu_user_assert(cells_2, "Cannot allocate cells_2 Mem_Table");


	// 	return cells_2;
	// }

	// static Mem_Table n_mem_cells_3_create(N_Mem self, Mem mem)
	// {
	// 	lu_user_assert(self, "N_Mem is NULL");
	// 	Lu_Brain brain = self->brain;

	// 	lu_user_assert(brain, "Brain is NULL");
	// 	lu_user_assert(brain->s_mem, "Brain s_mem is NULL");

	// 	Mem_Table cells_3 = mem_table_create(
	// 									mem, 
	// 		/*record_size_in_bytes*/ 	sizeof(struct n_cell_3), 
	// 		/*table_size_in_records*/	self->names_size, 
	// 		/*percent*/					0,
	// 		/*flags*/					MTF_FREEABLE
	// 	);

	// 	lu_user_assert(cells_3, "Cannot allocate cells_3 Mem_Table");


	// 	return cells_3;
	// }

	// static Mem_Table n_mem_lins_create(N_Mem self, Mem mem)
	// {
	// 	Mem_Table lins = mem_table_create(
	// 									mem, 
	// 		/*record_size_in_bytes*/ 	sizeof(struct n_cell), 
	// 		/*table_size_in_records*/	0, 
	// 		/*percent*/					100,
	// 		/*flags*/					MTF_FREEABLE
	// 	);

	// 	lu_user_assert(lins, "Cannot allocate lins Mem_Table");

	// 	return lins;
	// }
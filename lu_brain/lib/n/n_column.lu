/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// 

	static Lu_N_Column lu_n_column__init(
		Lu_N_Column self, 
		Lu_Mem mem, 
		lu_size h, 
		lu_size d, 
		lu_size area_ix,
		lu_size layer_ix, 
		lu_size column_ix,
		Lu_Config config
	)
	{
		lu__assert(self);
		lu__assert(mem);
		lu__assert(h > 0);
		lu__assert(d > 0);

		self->mem = mem;
		self->column_ix = column_ix;
		self->h = h;
		self->d = d;


		self->cells_size = h * d;

		self->cells = (struct lu_n_cell*) lu_mem__alloc(mem, sizeof(struct lu_n_cell) * self->cells_size);
		lu__alloc_assert(self->cells);

		self->w_match_cells_size = config->w_waves_size;

		for (lu_size i = 0; i < self->cells_size; i++)
		{
			lu_n_cell__init(&self->cells[i], i, column_ix, layer_ix, area_ix, mem, self->w_match_cells_size);
		}

		lu_n_link_mem__init(&self->link_mem, mem, config->n_link_mem_size);

		return self;
	}

	static void lu_n_column__deinit(Lu_N_Column self)
	{
		lu__assert(self);
		lu__assert(self->mem);

		lu_n_link_mem__deinit(&self->link_mem);

		for (lu_size i = 0; i < self->cells_size; i++)
		{
			lu_n_cell__deinit(&self->cells[i], self->mem);
		}

		lu_mem__free(self->mem, (lu_p_byte) self->cells);
		
		self->cells = NULL;
		self->h = 0;
		self->d = 0;
		self->mem = NULL;
	}


///////////////////////////////////////////////////////////////////////////////
// 

	static void lu_n_column__realloc(Lu_N_Column self, lu_size h, lu_size d)
	{
		// lu__assert(self);
		// lu__assert(self->mem);
		// lu__assert(w > 0);
		// lu__assert(h > 0);
		// lu__assert(d > 0);

		// self->w = w;
		// self->h = h;
		// self->d = d;

		// self->strings = (lu_size*) lu_mem__realloc(
		// 	self->mem, 
		// 	(lu_p_byte) self->strings, 
		// 	sizeof(lu_size) * w * h * d + 1
		// );
		// lu__alloc_assert(self->strings);

		// self->cells = (struct lu_n_cell*) lu_mem__realloc(
		// 	self->mem, 
		// 	(lu_p_byte) self->cells, 
		// 	sizeof(struct lu_n_cell) * h * d + 1
		// );
		// lu__alloc_assert(self->cells);

		// relocating just like that is not enough, we will have to move data, because we might changed h
		// and h is used in p_reg % h
	}


	// static union lu_n_addr lu_n_column__save_with_vp_children(
	// 	Lu_N_Column self, 
	// 	Lu_N_Cell_VP* children, 
	// 	lu_size children_count
	// )


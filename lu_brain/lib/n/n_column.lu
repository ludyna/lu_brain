/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/

	static Lu_N_Column lu_n_column__init(Lu_N_Column self, Lu_Mem mem, lu_size h, lu_size d)
	{
		lu__assert(self);
		lu__assert(mem);
		lu__assert(h > 0);
		lu__assert(d > 0);

		self->mem = mem;
		self->h = h;
		self->d = d;

		// +1 for "NULL" cell
		lu_size s = sizeof(struct lu_n_cell) * h * d + 1;

		self->cells = (struct lu_n_cell*) lu_mem__alloc(mem, s);
		lu__alloc_assert(self->cells);

		memset(self->cells, LU_N_CELL__NULL, s); 

		return self;
	}

	static void lu_n_column__deinit(Lu_N_Column self)
	{
		lu__assert(self);
		lu__assert(self->mem);

		lu_mem__free(self->mem, (lu_p_byte) self->cells);
		
		self->cells = NULL;
		self->h = 0;
		self->d = 0;
		self->mem = NULL;
	}

	static void lu_n_column__realloc(Lu_N_Column self, lu_size h, lu_size d)
	{
		// lu__assert(self);
		// lu__assert(self->mem);
		// lu__assert(w > 0);
		// lu__assert(h > 0);
		// lu__assert(d > 0);

		// self->w = w;
		// self->h = h;
		// self->d = d;

		// self->strings = (lu_size*) lu_mem__realloc(
		// 	self->mem, 
		// 	(lu_p_byte) self->strings, 
		// 	sizeof(lu_size) * w * h * d + 1
		// );
		// lu__alloc_assert(self->strings);

		// self->cells = (struct lu_n_cell*) lu_mem__realloc(
		// 	self->mem, 
		// 	(lu_p_byte) self->cells, 
		// 	sizeof(struct lu_n_cell) * h * d + 1
		// );
		// lu__alloc_assert(self->cells);

		// relocating just like that is not enough, we will have to move data, because we might changed h
		// and h is used in p_reg % h
	}
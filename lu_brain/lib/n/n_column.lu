/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// 

	static Lu_N_Column lu_n_column__init(
		Lu_N_Column self, 
		Lu_N_Table n_table,
		Lu_Mem mem, 
		lu_size h, 
		lu_size d, 
		lu_size area_ix,
		lu_size layer_ix, 
		lu_size column_ix,
		Lu_Config config,
		lu_size x,
		lu_size y
	)
	{
		lu__assert(self);
		lu__assert(n_table);
		lu__assert(mem);
		lu__assert(h > 0);
		lu__assert(d > 0);

		self->n_table = n_table;
		self->mem = mem;
		self->column_ix = column_ix;
		self->h = h;
		self->d = d;
		self->x = x;
		self->y = y;

		self->cells_size = h * d;

		// Stats
		self->stat_cells_used = 0;
		self->stat_max_z = 0;

		self->cells = (struct lu_n_cell*) lu_mem__alloc(mem, sizeof(struct lu_n_cell) * self->cells_size);
		lu__alloc_assert(self->cells);

		self->w_match_cells_size = config->w_match_waves_size;

		for (lu_size i = 0; i < self->cells_size; i++)
		{
			lu_n_cell__init(&self->cells[i], i, column_ix, layer_ix, area_ix, mem, self->w_match_cells_size);
		}

		lu_n_link_mem__init(&self->link_mem, mem, config->n_link_mem_size);

		return self;
	}

	static void lu_n_column__deinit(Lu_N_Column self)
	{
		lu__assert(self);
		lu__assert(self->mem);

		lu_n_link_mem__deinit(&self->link_mem);

		for (lu_size i = 0; i < self->cells_size; i++)
		{
			lu_n_cell__deinit(&self->cells[i], self->mem);
		}

		lu_mem__free(self->mem, (lu_p_byte) self->cells);
		
		self->cells = NULL;
		self->h = 0;
		self->d = 0;
		self->mem = NULL;
	}


///////////////////////////////////////////////////////////////////////////////
// 




/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// Create/Destroy

	N_Cell_Allocator n_cell_allocator_create(
		Lu_Mem mem,  
		lu_size size_in_cell_0,
		lu_size size_in_cell_1,
		lu_size size_in_cell_2,
		lu_size size_in_cell_3, 
		lu_size size_in_cell_4
	)
	{
		lu__assert(mem); 

		N_Cell_Allocator self = (N_Cell_Allocator) lu_mem__alloc(mem, sizeof(struct lu_n_cell_allocator));
		lu__assert(self);

		self->mem = mem;
		self->mt_cell_0 = NULL;
		self->mt_cell_1 = NULL;
		self->mt_cell_2 = NULL;
		self->mt_cell_3 = NULL;
		self->mt_cell_4 = NULL;

		if (size_in_cell_0 > 0)
		{
			self->mt_cell_0 = lu_mem_table__create(self->mem, sizeof(struct lu_n_cell_0), size_in_cell_0, 0, LU_MFT__FREEABLE);
			lu__assert(self->mt_cell_0);
		}

		if (size_in_cell_1 > 0)
		{
			self->mt_cell_1 = lu_mem_table__create(self->mem, sizeof(struct lu_n_cell_1), size_in_cell_1, 0, LU_MFT__FREEABLE);
			lu__assert(self->mt_cell_1);
		}

		if (size_in_cell_2 > 0)
		{
			self->mt_cell_2 = lu_mem_table__create(self->mem, sizeof(struct lu_n_cell_2), size_in_cell_2, 0, LU_MFT__FREEABLE);
			lu__assert(self->mt_cell_2);
		}

		if (size_in_cell_3 > 0)
		{
			self->mt_cell_3 = lu_mem_table__create(self->mem, sizeof(struct lu_n_cell_3), size_in_cell_3, 0, LU_MFT__FREEABLE);
			lu__assert(self->mt_cell_3);
		}

		if (size_in_cell_4 > 0)
		{
			self->mt_cell_4 = lu_mem_table__create(self->mem, sizeof(struct lu_n_cell_4), size_in_cell_4, 0, LU_MFT__FREEABLE);
			lu__assert(self->mt_cell_4);
		}

		return self;
	}

	void n_cell_allocator_destroy(N_Cell_Allocator self)
	{
		lu__assert(self);

		if (self->mt_cell_0)
		{
			lu_mem_table__destroy(self->mt_cell_0);
			self->mt_cell_0 = NULL;
		}

		if (self->mt_cell_1)
		{
			lu_mem_table__destroy(self->mt_cell_1);
			self->mt_cell_1 = NULL;
		}

		if (self->mt_cell_2)
		{
			lu_mem_table__destroy(self->mt_cell_2);
			self->mt_cell_2 = NULL;
		}

		if (self->mt_cell_3)
		{
			lu_mem_table__destroy(self->mt_cell_3);
			self->mt_cell_3 = NULL;
		}

		if (self->mt_cell_4)
		{
			lu_mem_table__destroy(self->mt_cell_4);
			self->mt_cell_4 = NULL;
		}

		Lu_Mem mem = self->mem;
		self->mem = NULL;

		lu_mem__free(mem, (lu_p_byte) self);
	}


///////////////////////////////////////////////////////////////////////////////
// Cell Alloc

	N_Cell_0 n_cell__alloc_0(N_Cell_Allocator self)
	{
		lu__assert(self);
		lu__assert(self->mt_cell_0);

		N_Cell_0 cell = (N_Cell_0) lu_mem_record__alloc(self->mt_cell_0);
		lu__assert(cell);

		n_cell_0__init(cell, N_CT__0);

		return cell;
	}

	N_Cell_1 n_cell__alloc_1(N_Cell_Allocator self)
	{
		lu__assert(self);
		lu__assert(self->mt_cell_1);

		N_Cell_1 cell = (N_Cell_1) lu_mem_record__alloc(self->mt_cell_1);
		lu__assert(cell);

		n_cell_1__init(cell, N_CT__1);

		return cell;
	}

	N_Cell_2 n_cell__alloc_2(N_Cell_Allocator self)
	{
		lu__assert(self);
		lu__assert(self->mt_cell_2);

		N_Cell_2 cell = (N_Cell_2) lu_mem_record__alloc(self->mt_cell_2);
		lu__assert(cell);

		n_cell_2__init(cell, N_CT__2);

		return cell;
	}

	N_Cell_3 n_cell__alloc_3(N_Cell_Allocator self)
	{
		lu__assert(self);
		lu__assert(self->mt_cell_3);

		N_Cell_3 cell = (N_Cell_3) lu_mem_record__alloc(self->mt_cell_3);
		lu__assert(cell);

		n_cell_3__init(cell, N_CT__3);

		return cell;
	}

	N_Cell_4 n_cell__alloc_4(N_Cell_Allocator self)
	{
		lu__assert(self);
		lu__assert(self->mt_cell_4);

		N_Cell_4 cell = (N_Cell_4) lu_mem_record__alloc(self->mt_cell_4);
		lu__assert(cell);

		n_cell_4__init(cell, N_CT__4);

		return cell;
	}

///////////////////////////////////////////////////////////////////////////////
// Cell Free

	void n_cell__free_0(N_Cell_Allocator self, N_Cell_0 cell)
	{
		lu__assert(self);
		lu__assert(self->mt_cell_0);
		lu__assert(cell);

		lu_mem_record__free(self->mt_cell_0, (lu_p_byte) cell);
	}

	void n_cell__free_1(N_Cell_Allocator self, N_Cell_0 cell)
	{
		lu__assert(self);
		lu__assert(self->mt_cell_1);
		lu__assert(cell);

		lu_mem_record__free(self->mt_cell_1, (lu_p_byte) cell);
	}

	void n_cell__free_2(N_Cell_Allocator self, N_Cell_2 cell)
	{
		lu__assert(self);
		lu__assert(self->mt_cell_2);
		lu__assert(cell);

		lu_mem_record__free(self->mt_cell_2, (lu_p_byte) cell);
	}

	void n_cell__free_3(N_Cell_Allocator self, N_Cell_3 cell)
	{
		lu__assert(self);
		lu__assert(self->mt_cell_3);
		lu__assert(cell);

		lu_mem_record__free(self->mt_cell_3, (lu_p_byte) cell);
	}

	void n_cell__free_4(N_Cell_Allocator self, N_Cell_4 cell)
	{
		lu__assert(self);
		lu__assert(self->mt_cell_4);
		lu__assert(cell);

		lu_mem_record__free(self->mt_cell_4, (lu_p_byte) cell);
	}


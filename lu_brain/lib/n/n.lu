/**
	Copyright Â© 2021 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// Lu_N create methods

	static Lu_N lu_n_create(Lu_Brain brain, struct lu_n_config config)
	{
		lu_user_assert(brain, "Lu_Brain is NULL");
		lu_user_assert(brain->brain_mem, "Lu_Brain brain_mem is NULL");

		lu_n_mem_config_validate(&config);

		Lu_N self 			= (Lu_N) lu_mem_alloc(brain->brain_mem, sizeof(struct lu_n));
		lu_user_assert(self, "Cannot allocate Lu_N");

		self->config 		= config;
		self->brain 		= brain;
		self->names 		= names_list_create(brain->brain_mem, self->config.names_size);

		return self;
	}

	static void lu_n_destroy(Lu_N self)
	{
		lu_assert(self);
		lu_assert(self->names);

		names_list_destroy(self->names);

		lu_mem_free(self->brain->brain_mem, (lu_p_byte) self);
	}


///////////////////////////////////////////////////////////////////////////////
// 
 	
 	static void lu_n_print_info(Lu_N self)
 	{
 		lu_user_assert_void(self, "Lu_N is NULL");

 		// lu_debug("\n\n-- Lu_N info: ");
 		// lu_debug("\n 	cells size (bytes): %lu", lu_mem_table_size_in_bytes(self->cells));
 		// lu_debug("\n 	lins size (bytes): %lu", lu_mem_table_size_in_bytes(self->lins));
 		// lu_debug("\n 	cells_2 size (bytes): %lu", lu_mem_table_size_in_bytes(self->cells_2));
 		// lu_debug("\n 	cells_3 size (bytes): %lu", lu_mem_table_size_in_bytes(self->cells_3));
 	}

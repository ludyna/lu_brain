/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// 

// static inline lu_size hnn_hash_comb(lu_size seed, lu_size value)
// 	{
// 	    seed ^= value + 0x9e3779b9 + (seed<<6) + (seed>>2);
// 	    return seed;
// 	}

// ///////////////////////////////////////////////////////////////////////////////
// // Cell Get 

// 	Hnn_Cell_0 hnn_cell_get_1(Hnn self, Hnn_Cell_0 top_left)
// 	{
// 		lu__assert(self);
// 		lu__assert(self->links);
// 		lu__assert(self->cell_allocator);
// 		lu__assert(top_left);

// 		lu_size hash = 0;
// 		hash = hnn_hash_comb(hash, hnn_cell_shift(self->cell_allocator, top_left));

// 		return hnn_links_cell_get_1(self->links, hash, top_left);
// 	}

// 	Hnn_Cell_0 hnn_cell_get_2(Hnn self, Hnn_Cell_0 top_left, Hnn_Cell_0 top_right)
// 	{
// 		lu__assert(self);
// 		lu__assert(self->links);
// 		lu__assert(self->cell_allocator);
// 		lu__assert(top_left);
// 		lu__assert(top_right);

// 		lu_size hash = 0;
// 		hash = hnn_hash_comb(hash, hnn_cell_shift(self->cell_allocator, top_left));
// 		hash = hnn_hash_comb(hash, hnn_cell_shift(self->cell_allocator, top_right));

// 		return hnn_links_cell_get_2(self->links, hash, top_left, top_right);
// 	}


// 	Hnn_Cell_0 hnn_cell_get_3(Hnn self, Hnn_Cell_0 top_left, Hnn_Cell_0 top_right, Hnn_Cell_0 bottom_left)
// 	{
// 		lu__assert(self);
// 		lu__assert(self->links);
// 		lu__assert(self->cell_allocator);
// 		lu__assert(top_left);
// 		lu__assert(top_right); 
// 		lu__assert(bottom_left);

// 		lu_size hash = 0;
// 		hash = hnn_hash_comb(hash, hnn_cell_shift(self->cell_allocator, top_left));
// 		hash = hnn_hash_comb(hash, hnn_cell_shift(self->cell_allocator, top_right));
// 		hash = hnn_hash_comb(hash, hnn_cell_shift(self->cell_allocator, bottom_left));

// 		return hnn_links_cell_get_3(self->links, hash, top_left, top_right, bottom_left);
// 	}

// ///////////////////////////////////////////////////////////////////////////////
// // Shifts

// 	static inline lu_size hnn_cell_shift_0(Hnn_Cell_Allocator self, Hnn_Cell_0 cell)
// 	{
// 		lu__assert(self);
// 		lu__assert(cell);

// 		return lu_mem_table__record_shift(self->mt_cell_0, (lu_p_byte) cell);
// 	}

// 	static inline lu_size hnn_cell_shift_1(Hnn_Cell_Allocator self, Hnn_Cell_0 cell)
// 	{
// 		lu__assert(self);
// 		lu__assert(cell);

// 		return lu_mem_table__record_shift(self->mt_cell_1, (lu_p_byte) cell);
// 	}

// 	static inline lu_size hnn_cell_shift_2(Hnn_Cell_Allocator self, Hnn_Cell_2 cell)
// 	{
// 		lu__assert(self);
// 		lu__assert(cell);

// 		return lu_mem_table__record_shift(self->mt_cell_2, (lu_p_byte) cell);
// 	}

// 	static inline lu_size hnn_cell_shift_3(Hnn_Cell_Allocator self, Hnn_Cell_3 cell)
// 	{
// 		lu__assert(self);
// 		lu__assert(cell);

// 		return lu_mem_table__record_shift(self->mt_cell_3, (lu_p_byte) cell);
// 	}

// 	static inline lu_size hnn_cell_shift_4(Hnn_Cell_Allocator self, Hnn_Cell_4 cell)
// 	{
// 		lu__assert(self);
// 		lu__assert(cell);

// 		return lu_mem_table__record_shift(self->mt_cell_4, (lu_p_byte) cell);
// 	}

// 	static inline lu_size hnn_cell_shift(Hnn_Cell_Allocator self, Hnn_Cell_0 cell)
// 	{
// 		lu__assert(self);
// 		lu__assert(cell);

// 		switch(cell->type)
// 		{
// 			case HNN_CT_0:
// 				return hnn_cell_shift_0(self, cell);
// 			case HNN_CT_1:
// 				return hnn_cell_shift_1(self, cell);
// 			case HNN_CT_2:
// 				return hnn_cell_shift_2(self, (Hnn_Cell_2) cell);
// 			case HNN_CT_3:
// 				return hnn_cell_shift_3(self, (Hnn_Cell_3) cell);
// 			case HNN_CT_4:
// 				return hnn_cell_shift_4(self, (Hnn_Cell_4) cell);			
// 			default:
// 				lu__assert(false);
// 		}

// 		lu__assert(false);

// 		return 0;
// 	}
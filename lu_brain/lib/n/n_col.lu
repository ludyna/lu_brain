/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// 

	static Lu_N_Col lu_n_col__init(
		Lu_N_Col self, 
		Lu_N_Table n_table,
		Lu_Mem mem, 
		lu_size cells_size, 
		lu_size area_ix,
		lu_size layer_ix, 
		lu_size column_ix,
		Lu_Config config,
		lu_size x,
		lu_size y
	)
	{
		lu__assert(self);
		lu__assert(n_table);
		lu__assert(mem);
		lu__assert(cells_size > 1);

		self->n_table = n_table;
		self->mem = mem;
		self->column_ix = column_ix;
		self->x = x;
		self->y = y;
		self->cells_size = cells_size;


		self->cells = (struct lu_n_cell*) lu_mem__alloc(mem, sizeof(struct lu_n_cell) * self->cells_size);
		lu__alloc_assert(self->cells);

		self->w_match_cells_size = config->w_match_waves_size;

		for (lu_size i = 0; i < self->cells_size; i++)
		{
			lu_n_cell__init(&self->cells[i], i, column_ix, layer_ix, area_ix, mem, self->w_match_cells_size);
		}

		lu_n_link_mem__init(&self->link_mem, mem, config->n_link_mem_size);

		return self;
	}

	static void lu_n_col__deinit(Lu_N_Col self)
	{
		lu__assert(self);
		lu__assert(self->mem);

		lu_n_link_mem__deinit(&self->link_mem);

		// for (lu_size i = 0; i < self->cells_size; i++)
		// {
		// 	lu_n_cell__deinit(&self->cells[i], self->mem);
		// }

		lu_mem__free(self->mem, (lu_p_byte) self->cells);
		
		self->cells = NULL;
		self->cells_size = 0;
		self->cells_count = 0;
		self->mem = NULL;
	}


///////////////////////////////////////////////////////////////////////////////
// 

	static void lu_n_col__realloc(Lu_N_Col self)
	{
		//
		// Current simple implementation is that we just simply increase d , calculate cells_size , 
		// reinit additital "columns"
		//

		lu__assert(self);
		lu__assert(self->mem);

		lu_size old_cells_size = self->cells_size;

		self->cells_size = old_cells_size * 2;

		self->cells = (struct lu_n_cell*) lu_mem__realloc(
			self->mem, 
			(lu_p_byte) self->cells, 
			sizeof(struct lu_n_cell) * self->cells_size
		);
		lu__alloc_assert(self->cells);

		//
		// Init new cells
		//

		lu_size i;
		Lu_N_Cell n_cell;
		Lu_N_Cell null_n_cell = lu_n_col__get_null_cell(self);
		for (i = old_cells_size; i < self->cells_size; i++)
		{
			n_cell = &self->cells[i];

			lu_n_cell__init(
				n_cell, 
				i, 
				self->column_ix, 
				null_n_cell->addr.layer_ix, 
				null_n_cell->addr.area_ix, 
				self->mem, 
				self->w_match_cells_size
			);
		}
	}

	static Lu_N_Cell lu_n_col__save_with_vp_children(
		Lu_N_Col self, 
		Lu_W_Cell_P* children, 
		lu_size children_count
	)
	{
		lu__debug_assert(self);
		lu__debug_assert(children);
		lu__debug_assert(children_count > 0);

		// lu_size ix = lu_n_column__vp_children_to_ix(self, children, children_count);

		Lu_N_Cell cell = NULL;
		// lu_size z;
		// for (z = 0; z < self->d; z++)
		// {
		// 	cell = lu_n_column__get_cell(self, z, ix);
		// 	lu__debug_assert(cell);

		// 	// We don't save INTO n_column null cell (which is for z = 0 only), find another.
		// 	if (z == 0 && lu_n_cell__is_n_column_null_cell(cell)) continue;

		// 	if (lu_n_cell__is_blank(cell))
		// 	{
		// 		lu_n_cell__vp_save(cell, children, children_count, &self->link_mem);
		// 		lu_n_column__increase_stats(self, z, cell);
		// 		return cell;
		// 	}
		// 	else if (lu_n_link_addr__is_vp_eq(cell->children, children, children_count, &self->link_mem)) 
		// 	{
		// 		return cell; // no need to do anything, we already have that cell
		// 	}
		// }

		// lu_n_column__realloc(self);

		// cell = lu_n_column__get_cell(self, z, ix);
		// lu__assert(lu_n_cell__is_blank(cell));

		// lu_n_cell__vp_save(cell, children, children_count, &self->link_mem);
		// lu_n_column__increase_stats(self, z, cell);

		// #ifdef LU__MEM_DEBUG
		// lu_n_column__print_mem_stats(self);
		// #endif

		return cell;
	}

	static Lu_N_Cell lu_n_col__save_with_children(
		Lu_N_Col self, 
		Lu_W_Cell* children, 
		lu_size children_count
	)
	{
		lu__debug_assert(self);
		lu__debug_assert(children);
		lu__debug_assert(children_count > 0);

		// lu_size ix = lu_n_column__children_to_ix(self, children, children_count);

		Lu_N_Cell cell = NULL;
		// lu_size z;
		// for (z = 0; z < self->d; z++)
		// {
		// 	cell = lu_n_column__get_cell(self, z, ix);
		// 	lu__debug_assert(cell);

		// 	// We don't save INTO n_column null cell (which is for z = 0 only), find another.
		// 	if (z == 0 && lu_n_cell__is_n_column_null_cell(cell)) continue;

		// 	if (lu_n_cell__is_blank(cell))
		// 	{
		// 		lu_n_cell__save(cell, children, children_count, &self->link_mem);
		// 		lu_n_column__increase_stats(self, z, cell);
		// 		return cell;
		// 	}
		// 	else if (lu_n_link_addr__is_eq(cell->children, children, children_count, &self->link_mem)) 
		// 	{
		// 		return cell; // no need to do anything, we already have that cell
		// 	}
		// }

		// lu_n_column__realloc(self);

		// cell = lu_n_column__get_cell(self, z, ix);
		// lu__assert(lu_n_cell__is_blank(cell));

		// lu_n_cell__save(cell, children, children_count, &self->link_mem);
		// lu_n_column__increase_stats(self, z, cell);

		// #ifdef LU__MEM_DEBUG
		// lu_n_column__print_mem_stats(self);
		// #endif

		return cell;
	}
/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// 

	static Lu_N_Col lu_n_col__init(
		Lu_N_Col self, 
		Lu_N_Table n_table,
		Lu_Mem mem, 
		lu_size cells_size, 
		lu_size area_ix,
		lu_size layer_ix, 
		lu_size column_ix,
		Lu_Config config,
		lu_size x,
		lu_size y
	)
	{
		lu__assert(self);
		lu__assert(n_table);
		lu__assert(mem);
		lu__assert(cells_size > 1);

		self->n_table = n_table;
		self->mem = mem;
		self->column_ix = column_ix;
		self->x = x;
		self->y = y;
		self->cells_size = cells_size;


		self->cells = (struct lu_n_cell*) lu_mem__alloc(mem, sizeof(struct lu_n_cell) * self->cells_size);
		lu__alloc_assert(self->cells);

		self->w_match_cells_size = config->w_match_waves_size;

		for (lu_size i = 0; i < self->cells_size; i++)
		{
			lu_n_cell__init(&self->cells[i], i, column_ix, layer_ix, area_ix, mem, self->w_match_cells_size);
		}

		lu_n_link_mem__init(&self->link_mem, mem, config->n_link_mem_size);

		return self;
	}

	static void lu_n_col__deinit(Lu_N_Col self)
	{
		lu__assert(self);
		lu__assert(self->mem);

		lu_n_link_mem__deinit(&self->link_mem);

		// for (lu_size i = 0; i < self->cells_size; i++)
		// {
		// 	lu_n_cell__deinit(&self->cells[i], self->mem);
		// }

		lu_mem__free(self->mem, (lu_p_byte) self->cells);
		
		self->cells = NULL;
		self->cells_size = 0;
		self->cells_count = 0;
		self->mem = NULL;
	}


///////////////////////////////////////////////////////////////////////////////
// 

	static void lu_n_col__realloc(Lu_N_Col self)
	{
		lu__assert(self);
		lu__assert(self->mem);

		lu_size old_cells_size = self->cells_size;

		self->cells_size = old_cells_size * 2;

		self->cells = (struct lu_n_cell*) lu_mem__realloc(
			self->mem, 
			(lu_p_byte) self->cells, 
			sizeof(struct lu_n_cell) * self->cells_size
		);
		lu__alloc_assert(self->cells);

		//
		// Init new cells
		//

		lu_size i;
		Lu_N_Cell n_cell;
		Lu_N_Cell null_n_cell = lu_n_col__get_null_cell(self);
		for (i = old_cells_size; i < self->cells_size; i++)
		{
			n_cell = &self->cells[i];

			lu_n_cell__init(
				n_cell, 
				i, 
				self->column_ix, 
				null_n_cell->addr.layer_ix, 
				null_n_cell->addr.area_ix, 
				self->mem, 
				self->w_match_cells_size
			);
		}
	}

	////
	// Here it is important to understant that Lu_W_Cell_P only connect to cells in one parent col (self).
	static inline void lu_n_col__find_matching_parent_vp(
		Lu_N_Col self, // this is parent col for child
		Lu_W_Cell_P child_w_cell_p, 
		Lu_Block_Id block_id,
		lu_size wave_ix,
		Lu_W_Save_Cell* output_save_cell,
		Lu_N_Cell* output_n_cell
	)
	{
		// lu__assert(self);

		// Lu_N_Cell_VP child_n_cell_vp = self->n_cell_vp;
		// Lu_N_Column_Comp child_n_column_comp = self->n_column_comp;

		// lu__assert(child_n_cell_vp);
		// lu__assert(child_n_column_comp);

		// // No parents, return
		// if(lu_n_link_addr__is_blank(&child_n_cell_vp->parents)) return;

		// Lu_N_Link_Mem link_mem = child_n_column_comp->link_mem;



		// // lu_w_processor__fire_n_parents(self, &n_column->link_mem, sig, n_cell->parents);


		// Lu_N_Link n_link_parent = lu_n_link_mem__get_link(link_mem, child_n_cell_vp->parents);

		// Lu_N_Cell n_cell_parent;
		// Lu_N_Column n_column_parent;
 
		// while (n_link_parent)
		// {
		// 	n_cell_parent = NULL;
		// 	n_column_parent = NULL;

		// 	lu_w_processor__find_n_cell_and_n_column(self, n_link_parent->cell_addr, &n_cell_parent, &n_column_parent);
		
		// 	lu__assert(n_cell_parent);
		// 	lu__assert(n_column_parent);

		// 	lu_w_processor__fire_n_cell(self, n_cell_parent, n_column_parent, sig);

		// 	n_link_parent = lu_n_link_mem__get_link(link_mem, n_link_parent->next);
		// }
	}


	static inline Lu_N_Cell lu_n_col__find_or_create_parent_for_vp_children(
		Lu_N_Col self, // this is parent col for children
		Lu_W_Cell_P* children, 
		lu_size children_count,
		Lu_Block_Id block_id,
		lu_size wave_ix
	)
	{
		lu__debug_assert(self);
		lu__debug_assert(children);
		lu__debug_assert(children_count > 0);


		Lu_W_Save_Cell output_save_cell = NULL;
		Lu_N_Cell output_n_cell = NULL;

		lu_size i;
		for (i = 0; i < children_count; i++)
		{

		}

		if (output_save_cell == NULL || !lu_w_save_cell__is_sig_over_breakpoint(output_save_cell, output_n_cell, .76))
		{
			// create new neuron
			output_n_cell = lu_n_col__alloc_n_cell(self);

			if (output_n_cell == NULL)
			{
				lu_n_col__realloc(self);
				output_n_cell = lu_n_col__alloc_n_cell(self);
				lu__assert(output_n_cell);
			}

			lu_n_cell__vp_save(output_n_cell, children, children_count, &self->link_mem);
		}

		return output_n_cell;
	}

	////
	// Unlike Lu_W_Cell_P which connect only to one parent col, Lu_W_Cell can connect to cells in multiple cols,
	// We are interested only in current col (self), we should not send sig or process connections to other cols.
	static inline void lu_n_col__find_matching_parent(
		Lu_N_Col self, // this is parent col for child
		Lu_W_Cell child_w_cell, 
		Lu_Block_Id block_id,
		lu_size wave_ix,
		Lu_W_Save_Cell* output_save_cell,
		Lu_N_Cell* output_n_cell
	)
	{
		// if(lu_n_link_addr__is_blank(&self->n_cell_vp->parents)) return;

		// prev_w_save_cell = lu_n_cell__get_w_save_cell(n_cell, wave_ix);
		// lu_w_save_cell__calc_fire_sig(prev_w_save_cell, n_cell->default_sig)
	}

	static inline Lu_N_Cell lu_n_col__find_or_create_parent(
		Lu_N_Col self, // this is parent col for child
		Lu_W_Cell* children, 
		lu_size children_count,
		Lu_Block_Id block_id,
		lu_size wave_ix
	)
	{
		lu__debug_assert(self);
		lu__debug_assert(children);
		lu__debug_assert(children_count > 0);

		Lu_W_Save_Cell output_save_cell = NULL;
		Lu_N_Cell output_n_cell = NULL;

		lu_size i;
		for (i = 0; i < children_count; i++)
		{

		}

		if (output_save_cell == NULL || !lu_w_save_cell__is_sig_over_breakpoint(output_save_cell, output_n_cell, .73))
		{
			// create new neuron
			output_n_cell = lu_n_col__alloc_n_cell(self);

			if (output_n_cell == NULL)
			{
				lu_n_col__realloc(self);
				output_n_cell = lu_n_col__alloc_n_cell(self);
				lu__assert(output_n_cell);
			}

			lu_n_cell__save(output_n_cell, children, children_count, &self->link_mem);
		}

		return output_n_cell;
	}
/**
	Copyright Â© 2021 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// 

	static Hnn_Links hnn_links_create(Mem mem, lu_size t1_size, lu_size t2_size, lu_size t3_size, lu_size t4_size)
	{
		lu_assert(mem);

		Hnn_Links self = (Hnn_Links) mem_alloc(mem, sizeof(struct hnn_links));
		lu_assert(self);

		self->mem = mem;

		self->table_1 =	hnn_table_create(mem, t1_size, HNN_CT_1);
		self->table_2 = hnn_table_create(mem, t2_size, HNN_CT_2);
		self->table_3 = hnn_table_create(mem, t3_size, HNN_CT_3);
		self->table_4 = hnn_table_create(mem, t4_size, HNN_CT_4);

		return self;
	}

	static void hnn_links_destroy(Hnn_Links self)
	{
		lu_assert(self);
		Mem mem = self->mem;
		lu_assert(mem);

		if(self->table_1)
		{
			hnn_table_destroy(self->table_1);
			self->table_1 = NULL;
		}

		if(self->table_2)
		{
			hnn_table_destroy(self->table_2);
			self->table_2 = NULL;
		}

		if(self->table_3)
		{
			hnn_table_destroy(self->table_3);
			self->table_3 = NULL;
		}

		if(self->table_4)
		{
			hnn_table_destroy(self->table_4);
			self->table_4 = NULL;
		}

		self->mem = NULL;
		mem_free(mem, (lu_p_byte) self);
	}

///////////////////////////////////////////////////////////////////////////////
// 

	// table_1

	static Hnn_Table_Node hnn_links_cell_add_1(Hnn_Links self, Hnn_Cell new_cell, lu_size hash)
	{
		lu_assert(self);
		return hnn_table_cell_add(self->table_1, new_cell, hash);
	}

	static void hnn_links_cell_remove_1(Hnn_Links self, Hnn_Cell cell, lu_size hash)
	{
		lu_assert(self);
		hnn_table_cell_remove(self->table_1, cell, hash);
	}

	static Hnn_Cell hnn_links_cell_get_1(Hnn_Links self, Hnn_Cell source, lu_size hash)
	{
		lu_assert(self);
		lu_assert(source);

		return hnn_table_cell_get(self->table_1, hash, source);
	}

	// table_2

	static Hnn_Table_Node hnn_links_cell_add_2(Hnn_Links self, Hnn_Cell new_cell, lu_size hash)
	{
		lu_assert(self);
		return hnn_table_cell_add(self->table_2, new_cell, hash);
	}

	static void hnn_links_cell_remove_2(Hnn_Links self, Hnn_Cell cell, lu_size hash)
	{
		lu_assert(self);
		hnn_table_cell_remove(self->table_2, cell, hash);
	}

	// table_3

	static Hnn_Table_Node hnn_links_cell_add_3(Hnn_Links self, Hnn_Cell new_cell, lu_size hash)
	{
		lu_assert(self);
		return hnn_table_cell_add(self->table_3, new_cell, hash);
	}

	static void hnn_links_cell_remove_3(Hnn_Links self, Hnn_Cell cell, lu_size hash)
	{
		lu_assert(self);
		hnn_table_cell_remove(self->table_3, cell, hash);
	}

	// table_4

	static Hnn_Table_Node hnn_links_cell_add_4(Hnn_Links self, Hnn_Cell new_cell, lu_size hash)
	{
		lu_assert(self);
		return hnn_table_cell_add(self->table_4, new_cell, hash);
	}

	static void hnn_links_cell_remove_4(Hnn_Links self, Hnn_Cell cell, lu_size hash)
	{
		lu_assert(self);
		hnn_table_cell_remove(self->table_4, cell, hash);
	}

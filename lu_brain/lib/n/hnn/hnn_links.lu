/**
	Copyright Â© 2021 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// 

	static Hnn_Links hnn_links_create(Lu_Mem mem, lu_size t1_size, lu_size t2_size, lu_size t3_size, lu_size t4_size)
	{
		lu__assert(mem);

		Hnn_Links self = (Hnn_Links) lu_mem__alloc(mem, sizeof(struct hnn_links));
		lu__assert(self);

		self->mem = mem;

		self->table_1 =	hnn_table_create(mem, t1_size, HNN_CT_1);
		self->table_2 = hnn_table_create(mem, t2_size, HNN_CT_2);
		self->table_3 = hnn_table_create(mem, t3_size, HNN_CT_3);
		self->table_4 = hnn_table_create(mem, t4_size, HNN_CT_4);

		return self;
	}

	static void hnn_links_destroy(Hnn_Links self)
	{
		lu__assert(self);
		Lu_Mem mem = self->mem;
		lu__assert(mem);

		if(self->table_1)
		{
			hnn_table_destroy(self->table_1);
			self->table_1 = NULL;
		}

		if(self->table_2)
		{
			hnn_table_destroy(self->table_2);
			self->table_2 = NULL;
		}

		if(self->table_3)
		{
			hnn_table_destroy(self->table_3);
			self->table_3 = NULL;
		}

		if(self->table_4)
		{
			hnn_table_destroy(self->table_4);
			self->table_4 = NULL;
		}

		self->mem = NULL;
		lu_mem__free(mem, (lu_p_byte) self);
	}

///////////////////////////////////////////////////////////////////////////////
// Cell Add 

	static Hnn_Table_Node hnn_links_cell_add_1(Hnn_Links self, lu_size hash, Hnn_Cell_0 new_cell)
	{
		lu__assert(self);
		return hnn_table_cell_add(self->table_1, hash, new_cell);
	}

	static Hnn_Table_Node hnn_links_cell_add_2(Hnn_Links self, lu_size hash, Hnn_Cell_0 new_cell)
	{
		lu__assert(self);
		return hnn_table_cell_add(self->table_2, hash, new_cell);
	}

	static Hnn_Table_Node hnn_links_cell_add_3(Hnn_Links self, lu_size hash, Hnn_Cell_0 new_cell)
	{
		lu__assert(self);
		return hnn_table_cell_add(self->table_3, hash, new_cell);
	}

	static Hnn_Table_Node hnn_links_cell_add_4(Hnn_Links self, lu_size hash, Hnn_Cell_0 new_cell)
	{
		lu__assert(self);
		return hnn_table_cell_add(self->table_4, hash, new_cell);
	}

///////////////////////////////////////////////////////////////////////////////
// Cell Remove  

	static void hnn_links_cell_remove_1(Hnn_Links self, lu_size hash, Hnn_Cell_0 cell)
	{
		lu__assert(self);
		hnn_table_cell_remove(self->table_1, hash, cell);
	}

	static void hnn_links_cell_remove_2(Hnn_Links self, lu_size hash, Hnn_Cell_0 cell)
	{
		lu__assert(self);
		hnn_table_cell_remove(self->table_2, hash, cell);
	}

	static void hnn_links_cell_remove_3(Hnn_Links self, lu_size hash, Hnn_Cell_0 cell)
	{
		lu__assert(self);
		hnn_table_cell_remove(self->table_3, hash, cell);
	}

	static void hnn_links_cell_remove_4(Hnn_Links self, lu_size hash, Hnn_Cell_0 cell)
	{
		lu__assert(self);
		hnn_table_cell_remove(self->table_4, hash, cell);
	}

///////////////////////////////////////////////////////////////////////////////
// Cell Get  

	static Hnn_Cell_0 hnn_links_cell_get_1(Hnn_Links self, lu_size hash, Hnn_Cell_0 top_left)
	{
		lu__assert(self);
		lu__assert(top_left);

		return hnn_table_cell_get_1(self->table_1, hash, top_left);
	}

	static Hnn_Cell_0 hnn_links_cell_get_2(Hnn_Links self, lu_size hash, Hnn_Cell_0 top_left, Hnn_Cell_0 top_right)
	{
		lu__assert(self);
		lu__assert(top_left);
		lu__assert(top_right);

		return hnn_table_cell_get_2(self->table_2, hash, top_left, top_right);
	}

	static Hnn_Cell_0 hnn_links_cell_get_3(Hnn_Links self, lu_size hash, Hnn_Cell_0 top_left, Hnn_Cell_0 top_right, Hnn_Cell_0 bottom_left)
	{
		lu__assert(self);
		lu__assert(top_left);
		lu__assert(top_right);
		lu__assert(bottom_left);

		return hnn_table_cell_get_3(self->table_3, hash, top_left, top_right, bottom_left);
	}

	static Hnn_Cell_0 hnn_links_cell_get_4(Hnn_Links self, lu_size hash, Hnn_Cell_0 top_left, Hnn_Cell_0 top_right, Hnn_Cell_0 bottom_left, Hnn_Cell_0 bottom_right)
	{
		lu__assert(self);
		lu__assert(top_left);
		lu__assert(top_right);
		lu__assert(bottom_left);
		lu__assert(bottom_right);

		return hnn_table_cell_get_4(self->table_4, hash, top_left, top_right, bottom_left, bottom_right);
	}

///////////////////////////////////////////////////////////////////////////////
// Utility

	static void hnn_links_print_distribution(Hnn_Links self, lu_size type)
	{
		lu__assert(self);

		switch(type)
		{
			case HNN_CT_1:
				hnn_table_print_distribution(self->table_1);
				break;
			case HNN_CT_2:
				hnn_table_print_distribution(self->table_2);
				break;

			case HNN_CT_3:
				hnn_table_print_distribution(self->table_3);
				break;

			case HNN_CT_4:
				hnn_table_print_distribution(self->table_4);
				break;

			default:
				lu__assert(false);
		}
	}
/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
//  Hnn_Table_Node

	static void hnn_table_unit_destroy(Hnn_Table_Node self, Lu_Mem mem)
	{
		Hnn_Table_Node prev;
		while (self)
		{
			prev = self->prev;

			// we don't care about destroying sefl->cell here because they all are 
			// destroyed (freed) in hnn_cell_allocator
			// vydaliaty komirky ce skladna tema (bo ye zviazky z inshymy i td)
			// ye inshi sposoby robyty "defragmentaciyu" komirok

			lu_mem__free(mem, (lu_p_byte) self);

			self = prev;
		}
	}

///////////////////////////////////////////////////////////////////////////////
//  Hnn_Table Create And Destroy

	static Hnn_Table hnn_table_create(Lu_Mem mem, lu_size size_in_cells, lu_byte cell_type)
	{
		lu__assert(mem);

		if (size_in_cells == 0)
			return NULL;

		Hnn_Table self = (Hnn_Table) lu_mem__alloc(mem, sizeof(struct hnn_table));
		lu__assert(self);

		self->mem = mem;
		self->size_in_cells = size_in_cells;
		self->cell_type = cell_type;
		
		lu_size bytes_size = sizeof(Hnn_Table_Node) * self->size_in_cells;
		
		self->units = (Hnn_Table_Node*) lu_mem__alloc(mem, bytes_size);

		memset(self->units, 0, bytes_size);

		lu__assert(self->units);

		return self;
	}

	static void hnn_table_destroy(Hnn_Table self)
	{
		lu__assert(self);

		Lu_Mem mem = self->mem;

		Hnn_Table_Node unit = NULL;
		Hnn_Table_Node next = NULL;

		if (self->units) {
			
			for (lu_size i = 0; i < self->size_in_cells; i++)
			{
				unit = self->units[i];

				if (unit == NULL) continue;
				
				hnn_table_unit_destroy(unit, mem);
			}
			
			lu_mem__free(mem, (lu_p_byte) self->units);
		}

		self->size_in_cells = 0;
		self->units = NULL;
		self->mem = NULL;
		lu_mem__free(mem, (lu_p_byte) self);
	}

///////////////////////////////////////////////////////////////////////////////
//  Hnn_Table Main Methods

	static Hnn_Table_Node hnn_table_node_find(Hnn_Table self, Hnn_Cell_0 cell, lu_size hash)
	{
		lu__assert(self);
		lu__assert(cell);

		lu_size index = hnn_table_hash_to_index(self, hash);

		Hnn_Table_Node node = self->units[index];

		while (node && node->cell != cell) node = node->prev;

		return node;
	}

	static void hnn_table_cell_remove(Hnn_Table self, lu_size hash, Hnn_Cell_0 dest)
	{
		lu__assert(self);
		lu__assert(dest);
		
		lu__user_assert_void(false, "NOT IMPLEMENTED");
	}

	static Hnn_Cell_0 hnn_table_cell_get_1(Hnn_Table self, lu_size hash, Hnn_Cell_0 top_left)
	{
		lu__assert(self);
		lu__assert(top_left);
		lu__assert(self->cell_type == HNN_CT_1);

		lu_size index = hnn_table_hash_to_index(self, hash);

		Hnn_Table_Node node = self->units[index];

		while (node && node->cell && !hnn_cell_parent_eq_1((Hnn_Cell_1) node->cell, top_left)) node = node->prev;

		if (node) return node->cell;

		return NULL;
	}

 	static Hnn_Cell_0 hnn_table_cell_get_2(Hnn_Table self, lu_size hash, Hnn_Cell_0 top_left, Hnn_Cell_0 top_right)
 	{
		lu__assert(self);
		lu__assert(top_left);
		lu__assert(top_right);
		lu__assert(self->cell_type == HNN_CT_2);

		lu_size index = hnn_table_hash_to_index(self, hash);

		Hnn_Table_Node node = self->units[index];

		while (node && node->cell && !hnn_cell_parent_eq_2((Hnn_Cell_2) node->cell, top_left, top_right)) node = node->prev;

		if (node) return node->cell;

		return NULL;
 	}

 	static Hnn_Cell_0 hnn_table_cell_get_3(Hnn_Table self, lu_size hash, Hnn_Cell_0 top_left, Hnn_Cell_0 top_right, Hnn_Cell_0 bottom_left)
 	{
		lu__assert(self);
		lu__assert(top_left);
		lu__assert(top_right);
		lu__assert(bottom_left);
		lu__assert(self->cell_type == HNN_CT_3);

		lu_size index = hnn_table_hash_to_index(self, hash);

		Hnn_Table_Node node = self->units[index];

		while (node && node->cell && !hnn_cell_parent_eq_3((Hnn_Cell_3) node->cell, top_left, top_right, bottom_left)) node = node->prev;

		if (node) return node->cell;

		return NULL;
 	}

 	static Hnn_Cell_0 hnn_table_cell_get_4(Hnn_Table self, lu_size hash, Hnn_Cell_0 top_left, Hnn_Cell_0 top_right, Hnn_Cell_0 bottom_left, Hnn_Cell_0 bottom_right)
 	{
		lu__assert(self);
		lu__assert(top_left);
		lu__assert(top_right);
		lu__assert(bottom_left);
		lu__assert(self->cell_type == HNN_CT_4);

		lu_size index = hnn_table_hash_to_index(self, hash);

		Hnn_Table_Node node = self->units[index];

		while (node && node->cell && !hnn_cell_parent_eq_4((Hnn_Cell_4) node->cell, top_left, top_right, bottom_left, bottom_right)) node = node->prev;

		if (node) return node->cell;

		return NULL;
 	}


///////////////////////////////////////////////////////////////////////////////
// Hnn_Table Utility    

	static void hnn_table_print_distribution(Hnn_Table self)
	{
		lu__assert(self);
		
		lu_size i;
		lu_size count;
		lu_size total_count = 0;
		Hnn_Table_Node node;

		printf("\n Table distribution:");
		for (i = 0; i < self->size_in_cells; i++)
		{
			node = self->units[i];

			if (node == NULL) continue;

			count = 0;
			while (node) 
			{
				++count;
				node = node->prev;
			}

			total_count += count;
			printf("\n [%lu]: %lu", i, count);
		}

		printf("\n Total count: %lu", total_count);
	}
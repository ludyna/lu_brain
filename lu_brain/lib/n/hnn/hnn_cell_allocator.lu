/**
	Copyright Â© 2021 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// Create/Destroy

	Hnn_Cell_Allocator hnn_cell_allocator_create(
		Mem mem,  
		lu_size size_in_cell_0,
		lu_size size_in_cell_1,
		lu_size size_in_cell_2,
		lu_size size_in_cell_3, 
		lu_size size_in_cell_4
	)
	{
		lu_assert(mem); 

		Hnn_Cell_Allocator self = (Hnn_Cell_Allocator) mem_alloc(mem, sizeof(struct hnn_cell_allocator));
		lu_assert(self);

		self->mem = mem;
		self->mt_cell_0 = NULL;
		self->mt_cell_1 = NULL;
		self->mt_cell_2 = NULL;
		self->mt_cell_3 = NULL;
		self->mt_cell_4 = NULL;

		if (size_in_cell_0 > 0)
			self->mt_cell_0 = mem_table_create(self->mem, sizeof(struct hnn_cell), size_in_cell_0, 0, MTF_FREEABLE);

		if (size_in_cell_1 > 0)
			self->mt_cell_1 = mem_table_create(self->mem, sizeof(struct hnn_cell), size_in_cell_1, 0, MTF_FREEABLE);

		if (size_in_cell_2 > 0)
			self->mt_cell_2 = mem_table_create(self->mem, sizeof(struct hnn_cell_2), size_in_cell_2, 0, MTF_FREEABLE);

		if (size_in_cell_3 > 0)
			self->mt_cell_3 = mem_table_create(self->mem, sizeof(struct hnn_cell_3), size_in_cell_3, 0, MTF_FREEABLE);

		if (size_in_cell_4 > 0)
			self->mt_cell_4 = mem_table_create(self->mem, sizeof(struct hnn_cell_4), size_in_cell_4, 0, MTF_FREEABLE);


		return self;
	}

	void hnn_cell_allocator_destroy(Hnn_Cell_Allocator self)
	{
		lu_assert(self);

		if (self->mt_cell_0)
		{
			mem_table_destroy(self->mt_cell_0);
			self->mt_cell_0 = NULL;
		}

		if (self->mt_cell_1)
		{
			mem_table_destroy(self->mt_cell_1);
			self->mt_cell_1 = NULL;
		}

		if (self->mt_cell_2)
		{
			mem_table_destroy(self->mt_cell_2);
			self->mt_cell_2 = NULL;
		}

		if (self->mt_cell_3)
		{
			mem_table_destroy(self->mt_cell_3);
			self->mt_cell_3 = NULL;
		}

		if (self->mt_cell_4)
		{
			mem_table_destroy(self->mt_cell_4);
			self->mt_cell_4 = NULL;
		}

		Mem mem = self->mem;
		self->mem = NULL;

		mem_free(mem, (lu_p_byte) self);
	}


///////////////////////////////////////////////////////////////////////////////
// Cell Allocators

	// 0

	Hnn_Cell hnn_cell_alloc_0(Hnn_Cell_Allocator self)
	{
		lu_assert(self);
		lu_assert(self->mt_cell_0);

		Hnn_Cell cell = (Hnn_Cell) mem_record_alloc(self->mt_cell_0);
		
		if (cell) 
			hnn_cell_init(cell, HNN_CT_0);

		return cell;
	}

	void hnn_cell_free_0(Hnn_Cell_Allocator self, Hnn_Cell cell)
	{
		lu_assert(self);
		lu_assert(self->mt_cell_0);
		lu_assert(cell);

		mem_record_free(self->mt_cell_0, (lu_p_byte) cell);
	}

	// 1

	Hnn_Cell hnn_cell_alloc_1(Hnn_Cell_Allocator self)
	{
		lu_assert(self);
		lu_assert(self->mt_cell_1);

		Hnn_Cell cell = (Hnn_Cell) mem_record_alloc(self->mt_cell_1);
		
		if (cell) 
			hnn_cell_init(cell, HNN_CT_1);

		return cell;
	}

	void hnn_cell_free_1(Hnn_Cell_Allocator self, Hnn_Cell cell)
	{
		lu_assert(self);
		lu_assert(self->mt_cell_1);
		lu_assert(cell);

		mem_record_free(self->mt_cell_1, (lu_p_byte) cell);
	}

	// 2

	Hnn_Cell_2 hnn_cell_2_alloc(Hnn_Cell_Allocator self)
	{
		lu_assert(self);
		lu_assert(self->mt_cell_2);

		Hnn_Cell_2 cell = (Hnn_Cell_2) mem_record_alloc(self->mt_cell_2);

		if (cell)
			hnn_cell_2_init(cell, HNN_CT_2);

		return cell;
	}

	void hnn_cell_2_free(Hnn_Cell_Allocator self, Hnn_Cell_2 cell)
	{
		lu_assert(self);
		lu_assert(self->mt_cell_2);
		lu_assert(cell);

		mem_record_free(self->mt_cell_2, (lu_p_byte) cell);
	}

	// 3

	Hnn_Cell_3 hnn_cell_3_alloc(Hnn_Cell_Allocator self)
	{
		lu_assert(self);
		lu_assert(self->mt_cell_3);

		Hnn_Cell_3 cell = (Hnn_Cell_3) mem_record_alloc(self->mt_cell_3);

		if (cell)
			hnn_cell_3_init(cell, HNN_CT_3);

		return cell;
	}

	void hnn_cell_3_free(Hnn_Cell_Allocator self, Hnn_Cell_3 cell)
	{
		lu_assert(self);
		lu_assert(self->mt_cell_3);
		lu_assert(cell);

		mem_record_free(self->mt_cell_3, (lu_p_byte) cell);
	}

	// 4

	Hnn_Cell_4 hnn_cell_4_alloc(Hnn_Cell_Allocator self)
	{
		lu_assert(self);
		lu_assert(self->mt_cell_4);

		Hnn_Cell_4 cell = (Hnn_Cell_4) mem_record_alloc(self->mt_cell_4);

		if (cell)
			hnn_cell_4_init(cell, HNN_CT_4);

		return cell;
	}

	void hnn_cell_4_free(Hnn_Cell_Allocator self, Hnn_Cell_4 cell)
	{
		lu_assert(self);
		lu_assert(self->mt_cell_4);
		lu_assert(cell);

		mem_record_free(self->mt_cell_4, (lu_p_byte) cell);
	}


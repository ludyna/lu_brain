/**
	Copyright Â© 2021 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// 

	Hnn hnn_create(Mem mem, struct hnn_config config)
	{
		lu_assert(mem);

		Hnn self = (Hnn) mem_alloc(mem, sizeof(struct hnn));
		lu_assert(self);

		self->mem = mem;

		self->cell_allocator = hnn_cell_allocator_create(
			mem, 
			config.size_in_cell_0, 
			config.size_in_cell_1, 
			config.size_in_cell_2, 
			config.size_in_cell_3, 
			config.size_in_cell_4
		);
		lu_assert(self->cell_allocator);

		lu_size T_SIZE_MOD = 2;
		
		if (config.t1_size == 0)
			config.t1_size = config.size_in_cell_1 * T_SIZE_MOD;

		if (config.t2_size == 0)
			config.t2_size = config.size_in_cell_2 * T_SIZE_MOD;

		if (config.t3_size == 0)
			config.t3_size = config.size_in_cell_3 * T_SIZE_MOD;

		if (config.t4_size == 0)
			config.t4_size = config.size_in_cell_4 * T_SIZE_MOD;

		self->links = hnn_links_create(
			mem, 
			config.t1_size,
			config.t2_size,
			config.t3_size, 
			config.t4_size
		);
		lu_assert(self->links);

		return self;
	}

	void hnn_destroy(Hnn self)
	{
		lu_assert(self);

		hnn_cell_allocator_destroy(self->cell_allocator);
		hnn_links_destroy(self->links);

		Mem mem = self->mem;
		self->mem = NULL;

		mem_free(mem, (lu_p_byte) self);
	}

///////////////////////////////////////////////////////////////////////////////
// Cell Spawn & Die 

	Hnn_Cell hnn_cell_spawn(Hnn self, lu_byte type)
	{
		lu_assert(self);

		switch(type)
		{
			case HNN_CT_0:
				return hnn_cell_alloc_0(self->cell_allocator);
			case HNN_CT_1:
				return hnn_cell_alloc_1(self->cell_allocator);
			case HNN_CT_2:
				return (Hnn_Cell) hnn_cell_alloc_2(self->cell_allocator);
			case HNN_CT_3:
				return (Hnn_Cell) hnn_cell_alloc_3(self->cell_allocator);
			case HNN_CT_4:
				return (Hnn_Cell) hnn_cell_alloc_4(self->cell_allocator);
			default:
				return NULL;
		}

		return NULL;
	}

	void hnn_cell_die(Hnn self, Hnn_Cell cell)
	{
		lu_assert(self);
		lu_assert(cell);

		switch(cell->type)
		{
			case HNN_CT_0:
				hnn_cell_free_0(self->cell_allocator, cell);
				break;
			case HNN_CT_1:
				hnn_cell_free_1(self->cell_allocator, cell);
				break;
			case HNN_CT_2:
				hnn_cell_free_2(self->cell_allocator, (Hnn_Cell_2) cell);
				break;
			case HNN_CT_3:
				hnn_cell_free_3(self->cell_allocator, (Hnn_Cell_3) cell);
				break;
			case HNN_CT_4:
				hnn_cell_free_4(self->cell_allocator, (Hnn_Cell_4) cell);
				break;
			default:
				lu_assert(false);
		}
	}
 
	static inline lu_size hnn_hash_comb(lu_size seed, lu_size value)
	{
	    seed ^= value + 0x9e3779b9 + (seed<<6) + (seed>>2);
	    return seed;
	}


///////////////////////////////////////////////////////////////////////////////
// Cell Get 

	Hnn_Cell hnn_cell_get_1(Hnn self, Hnn_Cell top_left)
	{
		lu_assert(self);
		lu_assert(self->links);
		lu_assert(self->cell_allocator);
		lu_assert(top_left);

		lu_size hash = 0;
		hash = hnn_hash_comb(hash, hnn_cell_shift(self->cell_allocator, top_left));

		return hnn_links_cell_get_1(self->links, hash, top_left);
	}

	Hnn_Cell hnn_cell_get_2(Hnn self, Hnn_Cell top_left, Hnn_Cell top_right)
	{
		lu_assert(self);
		lu_assert(self->links);
		lu_assert(self->cell_allocator);
		lu_assert(top_left);
		lu_assert(top_right);

		lu_size hash = 0;
		hash = hnn_hash_comb(hash, hnn_cell_shift(self->cell_allocator, top_left));
		hash = hnn_hash_comb(hash, hnn_cell_shift(self->cell_allocator, top_right));

		return hnn_links_cell_get_2(self->links, hash, top_left, top_right);
	}


	Hnn_Cell hnn_cell_get_3(Hnn self, Hnn_Cell top_left, Hnn_Cell top_right, Hnn_Cell bottom_left)
	{
		lu_assert(self);
		lu_assert(self->links);
		lu_assert(self->cell_allocator);
		lu_assert(top_left);
		lu_assert(top_right); 
		lu_assert(bottom_left);

		lu_size hash = 0;
		hash = hnn_hash_comb(hash, hnn_cell_shift(self->cell_allocator, top_left));
		hash = hnn_hash_comb(hash, hnn_cell_shift(self->cell_allocator, top_right));
		hash = hnn_hash_comb(hash, hnn_cell_shift(self->cell_allocator, bottom_left));

		return hnn_links_cell_get_3(self->links, hash, top_left, top_right, bottom_left);
	}

	Hnn_Cell hnn_cell_get_4(Hnn self, Hnn_Cell top_left, Hnn_Cell top_right, Hnn_Cell bottom_left, Hnn_Cell bottom_right)
	{
		lu_assert(self);
		lu_assert(self->links);
		lu_assert(self->cell_allocator);
		lu_assert(top_left);
		lu_assert(top_right); 
		lu_assert(bottom_left);
		lu_assert(bottom_right);

		lu_size hash = 0;
		hash = hnn_hash_comb(hash, hnn_cell_shift(self->cell_allocator, top_left));
		hash = hnn_hash_comb(hash, hnn_cell_shift(self->cell_allocator, top_right));
		hash = hnn_hash_comb(hash, hnn_cell_shift(self->cell_allocator, bottom_left));
		hash = hnn_hash_comb(hash, hnn_cell_shift(self->cell_allocator, bottom_right));

		return hnn_links_cell_get_4(self->links, hash, top_left, top_right, bottom_left, bottom_right);
	}

///////////////////////////////////////////////////////////////////////////////
// Cell Spawn Connect 

	Hnn_Cell hnn_cell_spawn_connect_1(Hnn self, Hnn_Cell top_left)
	{
		lu_assert(self);
		lu_assert(self->cell_allocator);
		lu_assert(self->links);
		lu_assert(top_left);

		lu_size hash = 0;
		hash = hnn_hash_comb(hash, hnn_cell_shift(self->cell_allocator, top_left));

		Hnn_Cell new_cell = hnn_cell_alloc_1(self->cell_allocator);
 
 		// Important
		new_cell->top_left = top_left;

		Hnn_Table_Node node = hnn_links_cell_add_1(self->links, hash, new_cell);
		lu_assert(node);

		return node->cell;
	}

	Hnn_Cell hnn_cell_spawn_connect_2(Hnn self, Hnn_Cell top_left, Hnn_Cell top_right)
	{
		lu_assert(self);
		lu_assert(top_left);
		lu_assert(top_right);

	}

	Hnn_Cell hnn_cell_spawn_connect_3(Hnn self, Hnn_Cell top_left, Hnn_Cell top_right, Hnn_Cell bottom_left)
	{
		lu_assert(self);
		lu_assert(top_left);
		lu_assert(top_right);
		lu_assert(bottom_left);
	}


	Hnn_Cell hnn_cell_spawn_connect_4(Hnn self, Hnn_Cell top_left, Hnn_Cell top_right, Hnn_Cell bottom_left, Hnn_Cell bottom_right)
	{
		lu_assert(self);
		lu_assert(top_left);
		lu_assert(top_right);
		lu_assert(bottom_left);
		lu_assert(bottom_right);
	}


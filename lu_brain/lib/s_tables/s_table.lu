/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/ 

///////////////////////////////////////////////////////////////////////////////
// 


	Lu_S_Table lu_s_table__init(
		Lu_S_Table self,
		Lu_Mem mem, 
		lu_size w, 
		lu_size h, 
		lu_size h_max, 
		Lu_Config config, 
		lu_size layer_ix,
		lu_size area_ix, 
		Lu_S_Layer_Base layer
	)
	{
		lu__assert(self);
		lu__assert(mem);
		lu__assert(w > 0);
		lu__assert(h > 0);
		lu__assert(h_max >= h);
		lu__assert(config);

		self->mem = mem; 
		self->layer = layer;

		self->w = w;
		self->h = h;
		self->h_max = h_max;

		self->columns_size = w * h_max;

		self->columns = (struct lu_s_column*) lu_mem__alloc(mem, sizeof(struct lu_s_column) * self->columns_size);
		lu__alloc_assert(self->columns);

		Lu_S_Column column;

		lu_size x;
		lu_size y;
		lu_size i;
		for (y = 0, i= 0; y < h_max; y++)
		{
			for (x = 0; x < w; x++, i++)
			{
				column = &self->columns[i];

				lu_s_column__init(
					column, 
					self,
					mem, 
					config->s_column_h, 
					area_ix, 
					layer_ix, 
					i, 
					config,
					x,
					y
				);
			}
		}


		// for (lu_size i = 0; i < self->columns_size; i++)
		// {
		// 	column = &self->columns[i];

		// 	lu_s_column__init(
		// 		column, 
		// 		self,
		// 		mem, 
		// 		config->s_column_h, 
		// 		config->s_column_d, 
		// 		area_ix, 
		// 		layer_ix, 
		// 		i, 
		// 		config
		// 	);
		// }

		return self;
	}

	void lu_s_table__deinit(Lu_S_Table self)
	{
		lu__assert(self);
		lu__assert(self->columns);

		Lu_S_Column column;
		for (lu_size i = 0; i < self->columns_size; i++)
		{
			column = &self->columns[i];

			lu_s_column__deinit(column);
		}

		lu_mem__free(self->mem, (lu_p_byte) self->columns);
		self->columns = NULL;
	}
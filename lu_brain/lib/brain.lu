/**
	Copyright Â© 2022 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// Brain API

	Lu_Brain lu_brain__create(struct lu_config config)
	{
		lu_config__set_defaults(&config);

		Lu_Config p_config = lu_config__validate(&config);
		lu__user_assert(p_config, "Lu_Config validation failed");

		Lu_Brain self 		= (Lu_Brain) lu_mem__alloc(p_config->b_mem, sizeof(struct lu_brain));
		lu__user_assert(self, "Cannot allocate Lu_Brain. Not enough memory?");
		
		self->config 		= *p_config;
		self->recs 			= lu_arr__temp_create(p_config->b_recs_size, false);
		lu__create_assert(self->recs);

		self->s 			= NULL;
		self->w_manager 	= lu_w_manager__create(p_config->b_mem, p_config);
		lu__create_assert(self->w_manager);

		lu_la_column__init(
			&self->la_column,
			p_config
		);

		return self;
	}

	void lu_brain__destroy(Lu_Brain self)
	{
		lu__assert(self);

		lu__user_assert_void(self, "Lu_Brain is NULL");

		lu_la_column__deinit(&self->la_column);

		if (self->w_manager)
		{
			lu__user_assert_void(
				lu_w_manager__is_empty(self->w_manager), 
				"Cannot destroy Lu_Brain. It still has registered Lu_Wave(s)."
			);
		}

		Lu_Mem b_mem = self->config.b_mem;
		lu__assert(b_mem);

		if (self->s) 
		{	
			lu_s__destroy(self->s);
			self->s = NULL;
		}

		if (self->w_manager)
		{

			lu_w_manager__destroy(self->w_manager);
			self->w_manager = NULL;
		}

		Lu_Rec rec;
		if (self->recs)
			for (lu_size i = 0; i < lu_arr__count(self->recs); i++)
			{
				rec = (Lu_Rec) lu_arr__get(self->recs, i);

				if (rec)
					lu_rec__destroy(rec, b_mem);
			}

		lu_arr__destroy(self->recs);

		lu_mem__free(b_mem, (lu_p_byte) self);
	}

	void lu_brain__print_info(Lu_Brain self)
	{
		lu__user_assert_void(self, "Lu_Brain is NULL");

		Lu_Mem b_mem = self->config.b_mem;
		lu__assert(b_mem);

		lu__user_assert_void(b_mem, "b_mem is NULL");

		lu__debug("\n\n=========> Brain #%lu Info <=========", self->config.b_id);
		lu__debug("\nMemory allocated (bytes): %lu", lu_mem__preallocated(b_mem));
		lu__debug("\nMemory used (bytes): %lu", lu_mem__used(b_mem));

 		if (self->s)
 			lu_s__print_info(self->s);

 		// if (self->n)
 		// 		lu_n__print_info(self->n);
	}

	void lu_brain__print_areas(Lu_Brain self)
	{
		lu__user_assert_void(self, "Lu_Brain is NULL");

		Lu_Mem b_mem = self->config.b_mem;
		lu__assert(b_mem);

 		if (self->s)
 			lu_s__print_areas(self->s);
	}

	void lu_brain__print_net_stats(Lu_Brain self)
	{
		lu__user_assert_void(self, "Lu_Brain is NULL");

		lu__debug("\n\n=======================> Brain #%lu Net Stats Info <=======================", self->config.b_id);
		// lu__debug("\nMemory allocated (bytes): %lu", lu_mem__preallocated(b_mem));
		// lu__debug("\nMemory used (bytes): %lu", lu_mem__used(b_mem));

		Lu_Mem b_mem = self->config.b_mem;
		lu__assert(b_mem);

 		if (self->s)
 			lu_s__print_net_stats(self->s);
	}

	struct lu_brain_net_stats lu_brain__get_net_stats(Lu_Brain self)
	{
		struct lu_brain_net_stats brain_ns;

		lu_brain_net_stats__reset(&brain_ns);

		lu_s__get_net_stats(self->s, &brain_ns);

		return brain_ns;
	}

	struct lu_config lu_brain_config_get(Lu_Brain self)
	{
		lu__assert(self);

		return self->config;
	}

	Lu_Brain lu_brain__reconfig(Lu_Brain self, struct lu_config config)
	{
		lu__user_assert(NULL, "Not implemented yet");
	}

	static lu_size lu_brain__rec_attach(Lu_Brain self, Lu_Rec rec)
	{
		lu__assert(self);
		lu__assert(rec);
		lu__assert(self->recs);
		lu__assert(!rec->brain);

		rec->brain = self;

		// find empty slot
		lu_size i;
		for(i = 0; i < lu_arr__count(self->recs); i++)
		{
			if (lu_arr__get(self->recs, i) == NULL) break;
		}
		
		rec->id = i;
		lu_arr__set(self->recs, rec->id, rec);

		return rec->id;
	}

	static void lu_brain__rec_detach(Lu_Brain self, Lu_Rec rec)
	{
		lu__assert(self);
		lu__assert(rec->brain);
		lu__assert(self->s);

		lu_arr__set(self->recs, rec->id, NULL);
		
		rec->brain = NULL;
	}

	Lu_Rec lu_brain__get_rec_by_id(Lu_Brain brain, lu_size rec_id)
	{
		lu__user_assert(brain, "Lu_Brain is NULL");
		lu__assert(brain->recs);
		lu__user_assert(rec_id < lu_arr__count(brain->recs), "rec_id is out of range");

		return (Lu_Rec) lu_arr__get(brain->recs, rec_id);
	}

	lu_size lu_brain__recs_size(Lu_Brain self) { return lu_arr__size(self->recs); }

	// For MVP this method will destroy and re-create s_mem and n_mem.
	// In future we might want to preserve n_mem (adding recs on fly).
	Lu_Brain lu_brain__build(Lu_Brain self) 
	{
		lu__user_assert(self, "Lu_Brain is NULL");

		//
		// Destroy if exist
		//

		if (self->s)
		{
			lu_s__destroy(self->s);
			self->s = NULL;
		}

		//
		// Create S
		// 
 
 		// (Lu_Mem mem, Lu_S_Layer_Mem cell_mem, Lu_Arr lu_recs);
		self->s = lu_s__create_intersected_squares_cortex(
			&self->config, 
			self->recs
		);
		lu__user_assert(self->s, "Cannot create Lu_S. Not enough memory?");

		return self;
	}

	Lu_Wave lu_brain__get_wave_by_ix(Lu_Brain self, lu_size wave_ix, enum lu_wave_type wave_type)
	{
		lu__user_assert(self, "Lu_Brain is NULL");
		lu__user_assert(self->w_manager, "Something went wrong. Lu_W_Manager is not set.");

		return lu_w_manager__get_wave_by_ix(self->w_manager, wave_ix, wave_type);
	}

	